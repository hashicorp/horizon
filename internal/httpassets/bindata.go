// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Package httpassets Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// static/error.html
// static/error_limit.html
// static/images/error.svg
// static/images/hashi.svg
// static/images/logo.svg
// static/images/pattern-br.svg
// static/images/pattern-tl.svg
// static/index.html
// static/style.css
package httpassets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _errorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4d\x6f\xdb\x30\x0c\xbd\xf7\x57\x70\xba\xec\xb2\x44\xe8\x2e\x03\x06\x39\x97\xae\xc0\x0a\x14\xd8\xb0\x0f\x0c\x3d\x15\x9a\x4c\x5b\x5c\x65\xd1\x90\x98\xb8\xd9\xaf\x1f\xe4\x38\xa9\xba\xae\x03\x9a\x4b\x44\x89\x7c\x7a\x7c\x7e\xa2\x79\xf5\xe1\xd3\xc5\xb7\x9b\xcf\x97\xe0\x65\x08\x9b\x33\x73\xf8\x03\x30\x1e\x6d\x5b\x16\x00\x46\x48\x02\x6e\x3e\xda\xec\xe9\x82\xd3\x08\x3f\xec\x7e\x64\x8a\x02\xdf\xbf\x5c\xc3\x57\x4c\x3b\x72\x68\xf4\x21\xeb\x50\x11\x28\xde\x41\xc2\xd0\xa8\x2c\xfb\x80\xd9\x23\x8a\x02\xd9\x8f\xd8\x28\xc1\x7b\xd1\x2e\x67\x05\x3e\x61\xd7\x28\x7d\x7b\xeb\x7f\x47\x9d\xc5\x0a\x39\x3d\xe7\xaf\xe7\x63\xbd\x80\x0d\x28\x16\xa2\x1d\xb0\x51\x3b\xc2\x69\xe4\x24\x0a\x1c\x47\xc1\x28\x8d\x9a\xa8\x15\xdf\xb4\x58\x48\xac\xe6\xe0\x0d\x50\x24\x21\x1b\x56\xd9\xd9\x80\xcd\xf9\x02\x65\xf4\xa1\xa7\xb2\xfc\xc9\xed\x1e\x5c\xb0\x39\x37\xca\xdb\xbc\xc2\x94\x38\xa9\xe5\xc2\x96\x76\xc7\xb3\x72\x8d\xa5\x88\xc7\xb3\x45\x18\x4c\xc7\x10\xc0\xd8\xa5\x11\x2f\x32\xe6\xf7\x5a\x4f\x8b\x3c\x63\xe2\x5f\xe8\x64\x4d\xac\x8e\x70\x81\x7b\x56\x0f\xa5\x00\x86\x86\x1e\x72\x72\x7f\xcb\x40\x83\xed\x31\xeb\x92\xbf\xce\xbb\x5e\x81\x0d\xd2\xa8\xeb\x52\x0e\x1e\xa9\xf7\xd2\xa8\x77\x6f\x4f\x1a\xcd\x50\xda\x9e\x38\xea\xc7\x24\x4d\x46\x27\xc4\xb1\xee\x0a\xa3\x54\x4c\xea\x9e\x67\x2d\x56\xe4\x38\xbe\x84\xea\x5c\x55\x71\xbd\x2c\x31\x5c\x15\x94\xc7\x2c\x5b\xda\x55\xa1\x3f\xdf\x5c\xf0\x36\xb4\xf1\xb5\x40\x47\xb1\x05\xfb\x60\xaf\x16\xc7\xc0\xfb\x01\xa3\xc0\x44\xe2\x41\x3c\xe5\xe2\xb9\xb5\xd1\xfe\xbc\xc2\x18\x6b\x9a\x57\x1d\xec\x79\x0b\x78\x3f\xa2\x13\x6c\x41\x18\x32\x22\xd8\x1a\xcd\x63\xc2\x39\x6b\x28\x4a\xc2\x64\xa3\x94\x3c\xe7\xd1\xdd\x95\xfd\x54\xe1\x05\xee\xf3\x11\x84\x3a\xc8\x3c\xa0\x78\x8a\x3d\x4c\x33\xaf\xc4\xb1\x5f\x57\xdd\x8d\xcf\xf1\xba\xe1\x2d\x38\x1b\xc1\x86\xcc\x90\xb0\xc3\x54\x50\xc5\x63\x2d\xf1\x13\x2b\x4d\xd3\xfa\xa9\x9d\x74\xcb\x2e\xeb\x6d\x0a\x6a\xd3\xb2\xdb\x96\x96\x6c\xf9\xbc\x95\x03\xca\xaf\xe3\x04\x1e\xc3\x78\x10\xef\xa8\xea\x3f\xc9\x1a\xbd\x38\xe4\xb4\xd1\x31\xcb\x7f\x5d\xee\xcb\x38\x70\x9c\xc6\xb5\xe3\x41\x55\x6f\xc9\xd3\x4b\x6c\x33\x17\x54\xb6\x39\x4d\x99\xe7\xbd\x5d\x53\x3b\xd9\xc9\xe8\xf2\xa4\x37\x67\x46\x1f\x26\xd8\x9f\x00\x00\x00\xff\xff\xfb\x98\x1d\xea\xd9\x04\x00\x00")

func errorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_errorHtml,
		"error.html",
	)
}

func errorHtml() (*asset, error) {
	bytes, err := errorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "error.html", size: 1241, mode: os.FileMode(420), modTime: time.Unix(1602670272, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _error_limitHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xc1\x6e\xdb\x30\x0c\xbd\xf7\x2b\x38\x01\xbb\x2d\x16\xba\xcb\x80\xc2\xce\xa5\x2b\xb0\x01\x05\x36\x6c\x2d\x86\x9e\x0a\x55\x66\x2c\x6e\xb2\xe8\x49\x74\xd2\xec\xeb\x07\x39\x8e\xab\xb4\xd8\x80\xe6\x12\xd1\x22\x9f\x1e\x9f\x1e\x55\xbf\xf9\xf8\xe5\xf2\xe6\xee\xeb\x15\x38\xe9\xfd\xfa\xac\x3e\xfc\x01\xd4\x0e\x4d\x9b\x17\x00\xb5\x90\x78\x5c\x7f\x32\xc9\xd1\x25\xc7\x01\x7e\x98\xfd\xc0\x14\x04\x6e\xbf\x5d\xc3\x77\x8c\x5b\xb2\x58\xeb\x43\xd6\xa1\xc2\x53\xf8\x05\x11\x7d\xa3\x92\xec\x3d\x26\x87\x28\x0a\x64\x3f\x60\xa3\x04\x1f\x45\xdb\x94\x14\xb8\x88\x9b\x46\xe9\xfb\x7b\xf7\x27\xe8\x24\x46\xc8\xea\x29\xbf\x9a\xb6\xf5\x0c\xd6\xa3\x18\x08\xa6\xc7\x46\x6d\x09\x77\x03\x47\x51\x60\x39\x08\x06\x69\xd4\x8e\x5a\x71\x4d\x8b\x99\xc4\x6a\x0a\xde\x01\x05\x12\x32\x7e\x95\xac\xf1\xd8\x9c\xcf\x50\xb5\x3e\xf4\x94\x97\x0f\xdc\xee\xc1\x7a\x93\x52\xa3\x9c\x49\x2b\x8c\x91\xa3\x9a\x0f\x6c\x69\x7b\xdc\xcb\xc7\x18\x0a\x78\xdc\x9b\x85\xc1\x78\x0c\x01\x6a\x33\x37\xe2\x44\x86\x74\xa1\xf5\x6e\x96\x67\x88\xfc\x13\xad\x54\xc4\xea\x08\xe7\xb9\x63\xf5\x54\x0a\x50\x53\xdf\x41\x8a\xf6\xb9\x0c\xd4\x9b\x0e\x93\xce\xf9\x55\xda\x76\x0a\x8c\x97\x46\x5d\xe7\x72\x70\x48\x9d\x93\x46\x7d\x78\xbf\x68\x34\x41\x69\xb3\x70\xd4\xa7\x24\xeb\x84\x56\x88\x43\xd9\x15\x06\x29\x98\x94\x3d\x4f\x5a\xac\xc8\x72\x78\x0d\xd5\xa9\xaa\xe0\x7a\x95\x63\xf8\x9c\x51\x4e\x59\xb6\xb4\x2d\x42\x77\xbe\xbe\x4d\xa6\x43\xf0\xd4\x93\x24\xc0\x47\x8b\xd8\x62\x5b\xd5\xda\x9d\x17\x79\xc3\xfa\xc6\x61\xbe\xf5\x0d\x75\x63\xc4\xf6\x98\xbf\xe1\x08\xe2\x28\x81\xb1\x96\xc7\x20\xe0\xcc\x16\xe1\x01\x31\x94\x50\xc3\x29\x12\xf5\x08\x63\x10\xf2\x10\xf0\x51\x20\xe2\xef\x11\x93\x80\x35\x01\x1e\x10\x06\x8c\x1b\x8e\x3d\xb6\x17\xf0\x36\x3d\xaf\x2d\x04\xb9\xe3\x71\x2a\x31\x3e\x31\x44\xdc\x60\x04\x61\x10\x87\xa5\x68\x2f\xcc\xb1\xdb\x55\x2f\x0d\xa2\x5b\xb6\x49\x8f\xd1\xab\x75\xcb\x76\xec\x31\x64\x6d\x39\x14\x77\x9a\x7f\xb9\x59\x87\x7e\x80\x1d\x89\x5b\xc6\xb0\x2a\xc4\x1d\x9e\x2c\x30\xdf\xf9\xf2\x61\xc3\x2c\xff\xf5\xad\xcb\x03\x6e\x39\x0e\x95\xe5\x5e\x15\xd3\xe1\xe8\x35\x46\x98\x0a\x0a\x23\x2c\xef\xc6\xbf\xdd\x5a\x52\x5b\x0c\x52\xeb\x3c\xa4\xeb\xb3\x5a\x1f\xde\xa4\xbf\x01\x00\x00\xff\xff\x34\x85\x23\x7a\xab\x04\x00\x00")

func error_limitHtmlBytes() ([]byte, error) {
	return bindataRead(
		_error_limitHtml,
		"error_limit.html",
	)
}

func error_limitHtml() (*asset, error) {
	bytes, err := error_limitHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "error_limit.html", size: 1195, mode: os.FileMode(420), modTime: time.Unix(1602670264, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesErrorSvg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\xcd\x6e\xda\x40\x10\x80\xef\x3c\xc5\x68\x7b\x75\xc6\xf3\xbb\x3b\x5b\x61\x0e\xe5\x4a\x5e\x20\xb7\x4a\xb8\x18\x89\x86\x28\xb8\x38\x8f\x5f\x51\x38\x98\x26\xdc\x76\x3f\xad\xbe\x6f\x47\x9a\xe5\xe9\xbc\x83\x8f\xdf\x87\xd7\x53\x97\x86\x71\x7c\xfb\xde\xb6\xd3\x34\xe1\xa4\x78\x7c\xdf\xb5\x42\x44\xed\xe9\xbc\x4b\x30\xed\xb7\xe3\xd0\x25\xb3\x04\x43\xbf\xdf\x0d\xe3\xf5\x7c\xde\xf7\xd3\x8f\xe3\x47\x97\x08\x08\xcc\xc0\x2c\xad\x16\x00\xcb\xb7\x9f\xe3\x00\xbf\xf6\x87\x43\x97\xbe\xad\x33\x19\x59\xfa\x77\x7d\x7a\xff\x73\xe8\xbb\xd4\x9f\xfb\xd7\xe3\x76\x9b\x60\xdb\xa5\x67\x0d\xf4\x08\xd2\x28\x8d\x16\x2c\x0e\x6b\x63\xac\x41\x94\x45\x6f\xc4\x0c\x99\x98\x4b\x68\xa3\x86\x6c\x9a\xc9\x03\x4c\xd0\x88\x4a\x66\x6d\x94\x51\xb2\x8a\x99\xc0\x46\x1c\x83\x25\xc2\x1b\x45\x76\x37\xaa\x1a\xb0\x16\x43\xe6\x1c\x45\xa5\x21\x94\x60\x57\x12\x2a\xc0\x15\x23\x3c\xbb\xfd\x87\x03\x39\x8a\x69\x8d\xb9\x64\xc3\xe8\xb5\x7a\x56\xf3\x79\x71\xfd\x44\xc8\x44\xe1\xea\xd9\xaf\x1f\x64\x33\x07\x41\xe2\x20\xaf\x91\x6f\x63\x38\xda\xe5\x9d\x9a\xdd\xc0\xe6\xd3\xec\x2f\xf0\x2c\x86\x42\x52\x8a\xf3\x35\x52\x3c\xfb\xa5\x5d\xb1\xd4\xe2\x56\xcb\x23\x2c\x19\xab\x79\x35\x85\xcd\xcc\xf1\x35\x9d\x29\xee\x93\x22\x98\xc5\x54\x48\xee\xdd\x5f\x63\x56\xac\xc1\x54\xcc\xef\xec\x0f\xf0\x4c\xf2\x92\xda\xd5\x62\x79\xd9\xad\xd5\xe2\x6f\x00\x00\x00\xff\xff\x30\xa5\x4a\x07\x84\x02\x00\x00")

func imagesErrorSvgBytes() ([]byte, error) {
	return bindataRead(
		_imagesErrorSvg,
		"images/error.svg",
	)
}

func imagesErrorSvg() (*asset, error) {
	bytes, err := imagesErrorSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/error.svg", size: 644, mode: os.FileMode(420), modTime: time.Unix(1602636424, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesHashiSvg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\xcd\x6a\x1b\x41\x10\x84\xef\x7a\x8a\x61\x72\x5d\xb7\xfa\xbf\x7b\x82\x56\x90\x9c\xd7\x2f\xe0\x5b\xc0\x8a\x24\x50\x62\x13\x09\xad\x1f\x3f\xac\xc0\x58\x83\x93\x63\x7f\xc3\x54\x15\xd5\xbd\x39\x5f\xf7\xe5\xed\xd7\xe9\xf7\x79\xac\x87\xcb\xe5\xf5\xeb\x7a\x3d\xcf\x33\xcc\x02\x2f\x7f\xf6\x6b\x46\xc4\xf5\xf9\xba\xaf\x65\x3e\x3e\x5f\x0e\x63\x65\xad\xe5\xb0\x3b\xee\x0f\x97\xb1\xb2\xd5\x72\x3d\xee\xe6\xef\x2f\x6f\x63\xc5\x82\x85\xb5\xb0\xd5\xed\xaa\x94\xcd\xeb\x8f\xcb\xa1\xfc\x3c\x9e\x4e\x63\xfd\xd2\xa8\xe5\x37\xaa\xe5\x79\xac\x8f\x8c\xc0\x4a\xa8\x3e\x08\x98\x91\x47\xa4\x95\x89\x75\x30\xf0\xb4\x86\x8e\x7a\x1b\xa9\x81\x30\x93\x46\x94\x89\x04\x5a\x73\x12\xe5\x81\xad\x1f\x11\x42\x94\x39\xb9\x4c\x1f\xca\x14\x40\x19\xac\x29\xf7\xf4\xce\xef\xa9\x3c\xde\x44\x2c\x9a\xd0\x80\x80\x48\x88\x1e\x44\x4a\x65\xa2\x80\x30\xc3\x4c\x1a\x18\x48\xcc\x02\x35\x3a\x4c\x0e\x68\x11\x94\xd4\x85\xa1\x04\x6a\xc2\x99\xde\x63\x05\x72\x57\x95\x32\xd1\x62\x25\x94\xe2\xff\xa1\xac\x4b\x2a\x41\x2e\x93\x03\xab\x36\xa2\xcc\x81\x19\xf2\x3d\xc6\x1d\x4e\x68\x4a\x4e\x18\xda\x69\x38\x24\x86\x24\x9b\xf5\x86\x08\xe9\xa8\xc8\x7d\xa1\x9f\xf0\xbf\x3a\x59\xfa\xfa\x50\xc2\x4e\x57\x81\xfd\xbd\x0c\x81\xb0\xe4\xa0\xb0\x21\x20\x89\x31\xd1\xb4\xc3\x4c\xa0\x9a\xcb\x66\xcb\xf4\x40\x40\xe2\xe9\x29\xb9\x7b\x20\xb9\xad\x9c\x14\x9b\x7e\x7e\x32\xf0\x9b\xc5\xf2\xad\x4b\xf2\x54\xd7\xdb\xd5\x66\xb9\xd0\xed\xea\x6f\x00\x00\x00\xff\xff\x94\x05\x16\xfe\xca\x02\x00\x00")

func imagesHashiSvgBytes() ([]byte, error) {
	return bindataRead(
		_imagesHashiSvg,
		"images/hashi.svg",
	)
}

func imagesHashiSvg() (*asset, error) {
	bytes, err := imagesHashiSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/hashi.svg", size: 714, mode: os.FileMode(420), modTime: time.Unix(1602636424, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesLogoSvg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x91\xc1\xce\x9b\x40\x0c\x84\xef\x79\x0a\x6b\x7b\x25\xc6\xf6\x7a\xbd\xbb\x55\xc8\xa1\xb9\x92\x17\xc8\xad\x12\x14\x90\x68\x12\x25\x14\xf2\xf8\x15\xf4\xd0\x9f\xe3\x8c\x3c\x63\x7f\xf2\xe9\x3d\x77\xf0\xf9\x3d\xde\xdf\x95\xeb\xa7\xe9\xf9\xbd\x2c\x97\x65\xc1\xc5\xe3\xe3\xd5\x95\x42\x44\xe5\x7b\xee\x1c\x2c\x43\x33\xf5\x95\xb3\xe0\xa0\x6f\x87\xae\x9f\x2a\xa7\xe2\x60\x1e\xda\xe5\xc7\xe3\x53\x39\x02\x02\x0b\xa0\xe2\xce\x07\x80\xd3\xf3\xe7\xd4\xc3\xaf\x61\x1c\x2b\xf7\x8d\xf4\x62\x17\x71\x9b\x3c\xbe\xfe\x8c\x6d\xe5\xda\xb9\xbd\x3f\x9a\xc6\x41\x53\xb9\xab\x44\x24\xa2\x20\xcc\x05\x41\xad\x84\x81\x38\x89\xcf\x85\x78\xf4\xde\x07\x4e\x02\xb5\x7a\xe4\x9c\xd9\x4c\x0a\x4e\x68\x16\x95\x63\x82\xda\x0b\x2a\x91\xb2\xe5\x2d\xfb\x7f\x68\x55\x09\x8d\x84\x53\x8a\x45\x46\xef\x43\x52\x26\x81\x3a\xe8\xae\xe1\xcb\x3e\x15\xa8\x85\xd1\x88\xcd\xa2\xed\x42\x6c\x28\xc4\x31\x72\xda\xd9\x92\xd1\x72\xce\x1a\x73\xe1\x05\xcd\x2c\x86\xcc\x50\x8b\xa2\xff\x87\xb4\x75\x1e\x15\x73\xf4\x31\x67\x0e\xed\x91\x75\xbd\x6d\xc7\x7c\x83\xab\x85\xd5\x0d\xb1\x60\x85\x5a\x37\x98\xcd\xba\xb9\xf2\x7c\x38\xad\x2f\x38\x1f\xfe\x06\x00\x00\xff\xff\xa8\xf9\xb0\x5e\xab\x01\x00\x00")

func imagesLogoSvgBytes() ([]byte, error) {
	return bindataRead(
		_imagesLogoSvg,
		"images/logo.svg",
	)
}

func imagesLogoSvg() (*asset, error) {
	bytes, err := imagesLogoSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/logo.svg", size: 427, mode: os.FileMode(420), modTime: time.Unix(1602636424, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesPatternBrSvg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdb\x72\xda\xb0\x16\x7d\xef\x57\x78\xd4\xe9\x4c\xfb\x80\xd0\xfd\x72\x06\x77\x86\x5b\xce\x77\xd0\x60\x08\x2d\xc1\xd4\x38\x90\xf4\xeb\xcf\xe0\x8b\x22\xc7\x32\xe2\xd6\x9e\xb4\xf8\xcd\x62\x34\x8b\xad\xb5\xf6\x5e\xda\xde\xd0\xdb\x6c\xe7\xc1\xf3\xe3\x72\xb5\x09\xc1\x43\x9a\xae\xff\xd3\xed\xee\x76\x3b\xb8\xa3\x30\x4e\xe6\x5d\x82\x10\xea\x6e\xb6\x73\x10\xec\x16\xd3\xf4\x21\x04\x44\x09\x10\x3c\x44\x8b\xf9\x43\x1a\x02\x81\x08\x08\xb6\x8b\x68\x37\x88\x9f\x43\x80\x02\x14\x10\x25\x82\xfd\xa7\x5f\x3f\x04\x41\x6f\x1a\xcd\x36\xfb\x87\x20\xe8\x2d\x17\xab\x68\x92\xfc\x37\x99\x4c\x17\xd1\x2a\x0d\x16\xd3\x10\xac\x27\x69\x1a\x25\xab\xce\xb7\xa4\x33\x01\xc1\x33\x0e\x41\x07\x43\xa2\xe8\x27\x10\x3c\x93\x10\x60\x54\xae\x5e\x70\x08\x38\xda\x3f\x90\xfc\x21\xc7\x0c\x82\xde\x26\x8d\xd7\x41\x3c\x9b\x6d\xa2\x34\x04\x58\x7c\x02\xc1\xfe\x93\xce\x7d\xbc\x8c\x93\x10\x7c\xc4\x6c\x28\x86\x03\xd0\x75\xef\xd7\xb5\xfd\x68\x24\x87\xf2\xae\xdc\xdf\xeb\x56\x83\x3e\xea\x24\xdf\xfe\x99\x93\xdc\x17\x27\x81\xd2\x1c\x03\x65\xcf\x47\x1e\x82\xd2\xd3\x0e\xc1\x50\x6d\x3f\x1d\xdc\x0d\x59\xe3\x7e\x5d\xdb\x8f\xfb\xa3\x01\x6e\xda\x2f\x6a\xf8\x68\xac\xc6\xba\x71\xbf\x24\xb5\xfd\x7d\x41\x85\x68\xda\xaf\xea\x22\x70\x32\x22\xe3\x43\xa2\x5d\xa2\xcf\xb4\xd4\x47\x30\x6c\x29\x94\xaf\x5a\x8d\xde\x85\x46\x51\xa9\x91\xe2\xdc\xd2\x28\x5f\xb5\x1a\xbd\x0b\x8d\x66\xc6\xe7\x2a\x46\xd7\x3a\xdd\xbb\x51\x68\x5e\x2a\xc4\x35\xb1\x24\xca\x57\xad\x46\xef\x42\xa3\x87\x52\x23\xa2\xec\x32\xca\x57\x7b\x8d\x98\x86\x5a\xeb\x42\xa7\x72\xe1\x8e\x85\xd4\xb9\x3f\xa8\x15\x61\x0e\xee\x79\x5f\x37\xed\xa7\x75\xee\x47\x72\x20\x47\x8d\xfb\xeb\x5c\x6a\x2e\x79\x23\x3e\xab\x6b\x25\xe8\x90\x36\xe2\x33\xe5\xd0\x4a\x93\x46\x7c\x5e\xcb\x65\x44\xf1\x08\x37\xe2\xf3\x5a\x6e\x22\x8a\x35\x6e\xc4\x97\xae\xfd\x02\x37\xe6\x9a\xae\xf3\x49\xd0\x18\x35\xe6\x1a\x46\xe8\xb2\x64\x5b\x98\x64\xe3\x95\x64\xe3\x27\x98\x76\x9b\x64\x6d\x92\x1d\x4c\xb2\xef\x26\xc9\x44\x99\x64\x1d\x86\x09\x54\xd9\xdb\x56\x9b\x65\x6d\x96\x5d\x23\xcb\x7e\x98\x79\x81\xce\xb4\x2f\xe7\x05\xf9\xea\x37\xcd\x0b\x38\xae\xed\x47\x7a\xdc\x27\x27\xb0\x38\x56\x5c\xa9\x3f\x3a\x8f\x58\x5a\x4c\xf1\x0a\x53\x27\xbc\x4c\xdd\x04\x53\x8f\x66\x32\x80\x2a\x93\x01\xf4\x3a\x19\x80\x08\x11\x43\x56\xbe\xb8\x0e\x61\xb4\x6e\x60\x74\x30\x1c\x36\xf7\xc1\xdc\x61\x78\xa4\xdf\x58\xa0\x59\xc1\x5d\x9d\xb1\x55\xc1\x18\x81\x92\x19\xb3\xe7\x58\x62\xa8\xa5\xfa\x7d\xd9\xf5\x77\x92\x15\x9b\x42\x14\xa8\x1c\x71\x76\x88\x96\x02\x52\x74\x42\x03\x76\x1b\x64\xad\xcd\x74\x01\x1b\xae\x30\x11\x12\x72\xa5\xda\x6a\x74\x73\xf6\xd3\x24\x18\xa6\xc4\x24\x18\x92\x18\x4a\x2d\x6d\xd2\xa8\x4d\x1a\xbd\x6d\xd2\x12\x33\x6a\x94\xdc\x24\x1a\x97\x0a\x52\xa2\x5a\xce\xdc\x9c\x6d\xae\x30\x58\xba\x0d\xa6\xd2\x82\x29\x0d\xb9\x36\x17\x24\x56\x14\x0b\xc8\x5b\xd3\x7f\xcb\xd6\x53\x99\x57\xba\x32\x0c\xd3\xea\x0f\xb8\x17\x96\x8e\xfd\x7c\xd8\xfc\x86\x57\xdf\x8f\xf4\xa8\xdf\x3c\x88\xac\x75\xc4\x87\x3b\x5c\xc7\x20\xf2\x72\x82\xb7\xe6\x86\xa0\xc4\xa4\x23\x61\x4c\x40\x8c\x84\xcd\x31\xb3\x39\x66\x2d\xc7\x27\x70\xbc\x2b\x38\x66\x90\x48\x73\x0b\x2b\xa4\x25\xa4\x9c\x58\x1c\x63\xbb\x75\xc1\x57\x6b\x5d\x6e\x82\xe3\x67\xd3\x1d\xaa\xd7\x4b\x9b\x21\x09\x31\xfa\x03\xdd\xe1\x4d\x50\xfc\x62\x5e\x86\xb9\xc9\x62\x8c\x39\x86\x12\x93\x96\xe2\xab\x50\xfc\xcb\xbc\x3d\x23\x33\x99\xe9\x50\xa9\x38\x64\xa8\xc2\xb1\xb0\x39\x16\x2d\xc7\x27\x70\xdc\xbf\xf8\x57\xea\x9b\x18\x7d\x0d\xea\x86\x9a\xf1\xa4\xb8\xfd\x33\xa4\xb2\x7f\x86\x54\x37\x4d\xd8\xd0\x51\xbb\x18\x95\x2b\xc3\x18\xb3\x19\xbb\x5a\x1f\xf5\x57\x32\x36\x72\xf4\x9e\x18\x95\x2b\xc3\x98\xb0\x19\xbb\x9a\xd7\xfd\x95\x8c\x8d\x7d\xaf\x43\x19\x47\xd2\x26\x4c\xde\x34\x61\x77\x8e\xd6\x1b\xa3\x72\x55\x32\xa6\x6c\x1b\x53\xff\xb4\x8d\xf5\xba\xe5\x5f\x89\x7b\xf3\x60\xb6\x58\x2e\x43\xb0\x8a\x57\x11\xc8\x9e\x3b\xc9\xd3\x32\x0a\x41\xb4\x8d\x56\xf1\x74\xba\xc7\x4e\xe2\x1f\x51\x67\x8f\x72\x3f\x59\x87\x20\x89\x9f\x56\x53\x10\xc4\xeb\xc9\xfd\x22\x7d\x09\x01\x14\x20\x48\x93\xc9\x6a\x33\x8b\x93\xc7\x10\x64\x8f\xcb\x49\x1a\x7d\xc6\x01\xfe\x02\x2c\x81\x32\x11\xb0\x84\x94\xe4\x12\x08\x0d\x89\xca\xf9\x17\x08\x15\xf7\x2d\x46\xe5\x37\x86\xe0\x29\x59\x7e\xfe\x68\xff\xad\xf9\x8b\x39\x94\xc1\xa3\x0c\x0a\x96\xe3\x29\xb1\x0f\xe5\x32\x38\x8e\xa1\x16\x65\x86\x50\xa8\xc9\xa5\x80\xc5\x21\x33\x40\x82\x21\x61\x97\x02\xe6\xa7\xcc\xf0\xa8\x82\xfc\xe2\x13\x97\xc7\xcc\x10\x39\x87\xea\x62\x49\xca\x73\x66\x88\x92\x42\x82\xe4\x29\x90\xdf\xde\x42\x12\x23\xcb\x85\x71\x69\x0d\xb1\x92\x75\x75\x89\xe2\x45\xe5\xf3\x03\x90\xf7\x4e\x48\x04\x39\x91\x6f\xf3\x8f\x48\x74\x04\xe0\xd4\x01\x48\xf2\x09\x60\x5d\x60\x8a\x8f\x89\x31\x72\x41\x22\x09\x15\x93\xf5\x1c\xa4\xe8\x98\x28\x67\xae\x63\x2b\x0c\x95\x90\xb5\x32\x26\xfc\x98\x20\xe7\xae\x20\x15\x83\x48\x52\xf0\x56\x6d\x26\xa1\xde\x7f\x91\x17\xf4\xc1\x05\x2a\x25\xc4\xa5\x3a\x85\xf1\x78\x81\x16\xbe\xe8\x0a\xc7\x79\xc9\xcd\x4c\xef\x3f\xf6\x82\x7e\x77\x91\x58\xa8\x5b\x2b\x93\x0c\xc9\x9b\xe1\x3f\x7c\x95\x67\xd5\xf2\x71\x88\x4b\x9f\x3b\x58\xe9\x78\x3e\xa2\xe5\x5f\x56\x2e\x9e\x8f\x67\x39\xf6\x6b\x01\x5e\x70\xe0\xd7\xfb\xc9\x4e\xc3\xb3\xf1\xac\xfb\xc9\x2a\x94\xf3\xf1\xec\xfb\xc4\xb2\xb0\x4b\x0e\x5c\xa4\xde\x1e\xd2\x24\x7a\xc5\x69\x19\x2a\xaa\xb0\x09\xf7\xd1\x55\x33\x5c\x43\x75\x18\x97\xf3\xa2\x7e\x9a\x70\x57\x2e\x5c\x46\x20\x53\x87\x71\x89\x07\x37\xf6\x59\x79\x03\x0f\xd4\xc3\xc3\xda\x15\x2f\xe1\x10\x8b\xc3\xb8\xda\x83\xfb\xd3\x67\xeb\x0d\xb8\xc2\x83\x9b\xb8\x70\x85\x82\xac\x8c\x37\x37\x91\xd2\x97\x50\xe1\xee\xd9\x17\x34\x61\x6e\x7c\x46\xdc\xa0\x99\xf2\x68\x96\xfa\x7c\xd9\x5c\x9d\x99\x33\x53\xeb\xe2\xc8\xae\xa5\x26\xdc\x27\x17\x2e\xa5\x50\x99\x78\xcb\x45\xe5\x86\xab\x60\xbe\x79\x05\x68\xb8\xce\x2b\x01\x9e\x0a\xc4\x31\xc4\x46\xed\x72\x71\x0e\x90\x2d\xaf\x59\x9c\x03\x54\xe1\xde\xe6\x08\x8b\x63\xb9\xdf\x7a\x35\xad\x04\x48\x8e\xc5\xdd\xf9\x70\x4d\x2b\x98\xc5\x8b\x8e\xc5\x7d\xf6\xf5\x42\x95\xdc\x36\x84\x4a\x4f\x19\xbe\x78\x69\xb0\x05\xc7\xfa\xd8\x70\x7f\xf9\xc2\x35\x8b\x33\xf4\xaf\x76\xd3\x36\x9f\xff\x2f\xa0\xab\xd5\x48\x55\x52\x67\x8d\x64\x5e\xd8\xc4\x7b\xdf\xd7\xd8\x5f\xe4\x04\x57\xf3\xa6\x6b\x39\x41\x45\x40\x77\x05\x30\x44\x20\xa2\x07\xdc\x7d\xe0\xec\x20\x6c\x3d\x9d\xb8\x14\x7b\x70\x87\x5e\x77\x77\xe3\x32\x0f\xee\xc8\x2b\xb1\x1b\x57\x7a\x70\xc7\xbf\xb3\x64\x0f\x58\xab\x2a\xe2\xf2\x7a\xca\x5d\x11\x60\xaf\x3b\xff\xfa\xa1\xd7\xdd\x6c\xe7\x5f\x3f\xfc\x2f\x00\x00\xff\xff\x11\x53\x3e\x5c\xf3\x3e\x00\x00")

func imagesPatternBrSvgBytes() ([]byte, error) {
	return bindataRead(
		_imagesPatternBrSvg,
		"images/pattern-br.svg",
	)
}

func imagesPatternBrSvg() (*asset, error) {
	bytes, err := imagesPatternBrSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/pattern-br.svg", size: 16115, mode: os.FileMode(420), modTime: time.Unix(1602636424, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesPatternTlSvg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9a\xdd\x72\x9b\x3c\x13\xc7\xcf\x73\x15\x1a\x75\x32\xd3\x1c\x58\xd6\x07\x12\xd2\x3b\x26\x33\x8e\xdb\xf7\xb9\x0e\x37\xc6\x1f\x0d\x01\x17\x13\xdb\xe9\xd5\x3f\x03\x48\x44\xb6\x05\xc5\xd4\x7d\xe2\x74\x38\xd3\x7a\xa4\x7f\x76\x7f\xac\x56\x2b\xc8\x68\xb3\x5d\x80\xfd\x73\x14\x6f\x02\xb8\xcc\xb2\xf5\xff\x86\xc3\xdd\x6e\x87\x76\x0c\x25\xe9\x62\x48\x31\xc6\xc3\xcd\x76\x01\xc1\x6e\x35\xcb\x96\x01\x64\x98\x43\xb0\x0c\x57\x8b\x65\x16\x40\x4e\x7d\x08\xb6\xab\x70\xf7\x90\xec\x03\x88\x01\x06\x0c\x73\x90\xff\x7a\x7f\x03\xc0\x68\x16\xce\x37\xf9\x00\x80\x51\xb4\x8a\xc3\x69\xfa\x4f\x3a\x9d\xad\xc2\x38\x03\xab\x59\x00\xd7\xd3\x2c\x0b\xd3\x78\x90\x45\x83\x29\x04\x7b\x12\xc0\x01\x43\xd2\x53\xb7\x10\xec\x69\x00\x09\x36\xd6\x2b\x09\x20\xc7\xf9\x80\x96\x83\x52\x13\x80\xd1\x26\x4b\xd6\x20\x99\xcf\x37\x61\x16\x40\x22\x6e\x21\xc8\x7f\x19\x3c\x26\x51\x92\x06\xf0\x13\xf1\x26\x62\xf2\x00\x87\xee\xf9\xcc\x3b\x99\xcf\x1e\x26\x13\x52\x37\x5f\xf0\x93\xf9\x64\x4c\xc7\xa2\x6e\x3e\xc1\xf8\x78\x01\xfe\xe2\x4f\xfc\xff\x9b\x05\xa3\xe1\x21\x95\x56\xa8\xbe\x69\x54\x04\x29\xca\x2b\x54\xc6\xea\x51\x59\xa8\x1e\x2b\x54\x54\x32\x0b\x55\x69\xf5\xa8\x2c\x54\x33\x8d\x0a\x29\x41\x2b\x52\x58\x5b\x3d\x29\x8b\x54\x68\x48\xf9\xbe\x05\xaa\x30\x7a\x4e\x16\xa7\xb9\xe1\x24\x3c\x3b\xa3\x4a\xab\x27\x65\x91\x5a\x18\x52\x9c\x5b\xa0\x78\x5f\xce\x8f\x38\x2d\x0d\x27\x4f\x12\x0b\x54\x69\xf5\xa4\x2c\x52\xab\x8a\x14\x95\x36\xa9\xc2\xea\x49\x59\xa4\xbe\x1b\x52\x4c\xda\x9b\xaf\xb4\x7a\x52\x16\xa9\x27\x4d\xca\x47\x42\xbd\x25\x95\xb1\xfe\x10\x2a\xe2\x3b\xe6\xf3\x89\xaa\x9b\xef\x9d\xce\xc7\xea\xcb\xb8\x16\xad\x4f\x4e\x48\x7d\x95\x5c\xca\xba\xf9\xf2\xc4\xff\x0b\x90\x8d\x34\x59\x8a\xb8\x10\x15\x59\x63\xf5\x64\xbb\x93\x7d\xae\x2e\x00\xdc\xb3\xfa\xff\xc2\xe8\xb9\x76\xe7\x1a\x57\x3d\xb0\xdd\x02\xb7\x87\x8a\x6f\x6b\x6b\x1d\x73\xb9\x2b\xf1\x19\xb5\xee\xf0\xf9\x74\x8a\x2f\xa9\xf2\x86\x58\x69\x73\x46\x9b\x71\xed\x01\xae\x2f\xd0\x9c\x5f\x7b\x8c\x3f\x2e\x71\xfb\xbf\xf6\x20\xd3\xdf\xbe\x8d\x5e\x7b\x84\x9b\x0b\xbc\x99\xb8\xf6\x18\xb3\xea\x06\xa8\xec\x18\x4b\xeb\x2f\x89\xf1\xa5\x8a\x91\x30\x3b\x46\xf2\x17\xed\xc6\xad\x89\x51\x1e\x5c\xe5\xe5\x39\x77\xf9\x6b\x8f\x71\xf7\xdb\x6f\x2b\xae\x3d\xc2\xfd\x7b\xbc\x61\xe7\x27\x7d\x1d\xc1\xea\xeb\x98\xd6\xf6\x81\xea\xbc\x3e\x50\xfd\x89\x3e\xf0\xf5\x3d\x3e\xdb\x7c\x48\x52\x3f\xdf\xe3\x53\xc4\x87\x24\x35\x7e\x87\x2f\x11\x1f\x12\xd4\xc3\x7f\xfe\x21\xe2\x43\x62\x9a\xf4\x98\x6e\xf2\xdf\xcc\xb7\xf8\xd1\x02\xcc\x57\x51\x14\xc0\x38\x89\x43\x58\x8c\x07\xe9\x4b\x14\x06\x30\xdc\x86\x71\x32\x9b\xe5\xda\x69\xf2\x14\x0e\x72\x95\xc7\xe9\x3a\x80\x69\xf2\x12\xcf\x20\x48\xd6\xd3\xc7\x55\xf6\x1a\x40\x24\x20\xc8\xd2\x69\xbc\x99\x27\xe9\x73\x00\x8b\x61\x34\xcd\xc2\xcf\x04\x90\x3b\x68\x3d\x95\x12\xb7\x8f\x18\x2d\x61\x53\xce\x4b\xd8\x94\x72\xf3\x67\x02\xf8\x92\x46\x9f\x3f\xd9\xff\x0c\x70\x57\x45\x52\x89\x30\x0f\x09\x4f\x8b\xc8\x36\x22\xdf\x1c\x22\x9c\x20\x25\x4a\x11\x46\xda\x88\x3c\x3a\x44\x84\x42\x54\x6a\x11\xaf\x8d\xc8\xcc\x21\x22\x05\x32\x8e\xf8\x6d\x34\x42\x87\x46\x7e\xd0\x2a\x0d\xd6\xc3\x6d\x54\xe6\x2e\x15\x4a\x10\xd5\x64\x3d\xd6\x46\x65\xe1\x52\x61\x12\x71\x1d\x91\x27\xda\xa8\x2c\x5d\x2a\x9c\x23\x29\x7d\x2d\xa3\xda\xc8\xac\x5c\x32\x3e\x43\x14\x6b\x19\x4e\xdb\xc8\x7c\x77\x3d\x23\x24\x74\x44\xa4\x61\xe5\x93\x63\x25\xe5\x48\xe9\x14\xf1\x1a\x96\x46\xc7\x4b\x8b\x47\x80\x58\xe9\xaf\xdf\xb0\xf2\xd9\xb1\x52\x6f\xb3\xa3\x1d\x67\xb2\xcb\x56\x3b\xee\x91\x2b\x09\x81\x91\x38\x92\xe8\xe0\x88\xde\xaa\x47\xbb\xf6\x2c\x47\x7c\x1f\xa9\x23\x89\x0e\x8e\x28\x8e\xa8\x80\x07\x3b\xbf\x83\x8a\x5e\x7a\x54\x3f\xce\x0a\x87\x10\x8a\xb8\x84\x07\xe5\xa3\x83\x27\x7a\xe9\x51\x11\x3a\xcf\x13\xaa\x90\x82\x76\x09\xea\xe0\x07\x65\x0c\x49\xea\x43\x6b\xe7\xfb\xa5\x12\x11\x0d\x52\xb1\x2b\x69\x85\x87\xb8\x07\x0f\xeb\x59\x31\x6e\x10\x4a\x5c\x3e\x71\x82\x88\x67\x7c\xf2\x7c\x44\xa9\xf1\x49\xe2\x7a\xa9\xb5\xcb\xa7\x62\x75\xa9\xa4\x53\x28\xd7\x51\x0d\x32\x3f\x5c\x1e\x11\x81\x38\x36\x1e\xe5\xdc\xb1\xf1\x88\x37\x48\xa5\x2e\x8f\x24\x41\x52\xe7\xa0\xc9\xa5\x42\x88\x36\x08\x6d\x5c\x3e\x09\x89\x3c\x61\x7c\xaa\xaa\x6d\x6e\xa8\x06\xe0\xd9\x9b\xd4\x3a\x89\x5e\x0b\xb9\xba\xb9\x2f\x77\x10\xac\x93\x55\x9c\x6d\xaa\x42\x0c\x28\xe5\x80\x61\x86\x08\xf6\x8b\xff\x10\xd4\x23\x47\xa0\x4a\x21\x22\x2b\x66\xf9\xc9\x64\xfc\x63\x0d\xfe\x6d\x6b\x33\x4b\x4b\x51\xc9\x91\x6f\x0e\x16\x4a\x1a\xa8\xed\xea\x0b\x5a\xb1\xd6\x9c\x26\x8d\x99\xbe\x77\x1e\x4a\x55\x4d\x26\xad\x4e\xb6\xd7\xfa\x5a\x74\xe8\x49\x13\x99\x9f\xf5\x65\xe4\x50\xa4\x69\xbf\x8d\x1d\x22\x6f\x0d\x4c\xa5\xd1\x54\x46\x1e\x7e\x71\x60\x59\xad\x4c\xab\x7e\xe8\x57\x7a\x1d\x0f\x40\xeb\xe8\xb2\xfb\xa2\xce\x2e\x5d\xe0\x28\xbc\xc0\xf1\x63\x49\xd8\x7d\x5a\xe7\xa8\x2e\x70\x0e\x59\x12\x07\x4d\x5f\x2b\x9f\x26\xb5\xf9\x78\xd2\xfd\x9d\xa5\x37\x1a\x2e\xee\x6f\x46\xc3\xcd\x76\x71\x7f\xf3\x6f\x00\x00\x00\xff\xff\xcd\xf0\xb0\xac\x15\x2d\x00\x00")

func imagesPatternTlSvgBytes() ([]byte, error) {
	return bindataRead(
		_imagesPatternTlSvg,
		"images/pattern-tl.svg",
	)
}

func imagesPatternTlSvg() (*asset, error) {
	bytes, err := imagesPatternTlSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/pattern-tl.svg", size: 11541, mode: os.FileMode(420), modTime: time.Unix(1602636424, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x55\x4d\x8f\xe4\x34\x10\xbd\xcf\xaf\x28\x72\xe0\xd4\xd3\xde\xdd\x23\xb8\x5b\x42\xbb\x20\x56\x42\x02\xf1\x29\x4e\x2b\xc7\xae\xee\x14\xe3\xd8\xc6\x55\x49\x08\xbf\x1e\x39\x49\xf7\x24\x3d\x3d\xec\x29\xb1\x5d\x7e\x7e\xaf\xea\xb9\xac\xbf\xf8\xf0\xe3\xfb\x5f\xff\xfc\xe9\x5b\x68\xa4\xf5\xc7\x07\x3d\x7f\x00\x74\x83\xc6\x95\x1f\x00\x2d\x24\x1e\x8f\xdf\x1b\x6e\xe8\x7d\xcc\x09\xfe\x30\x63\x8a\x14\x04\x7e\xfb\xf9\x07\xf8\x05\x73\x4f\x16\xb5\x9a\xa3\xe6\x1d\x9e\xc2\x13\x64\xf4\x87\x8a\x65\xf4\xc8\x0d\xa2\x54\x20\x63\xc2\x43\x25\xf8\x8f\x28\xcb\x5c\x41\x93\xf1\x74\xa8\xd4\xa7\x4f\xcd\xbf\x41\xb1\x18\x21\xab\xa6\xf8\xfd\xb4\xac\x16\xb0\x16\xc5\x40\x30\x2d\x1e\xaa\x9e\x70\x48\x31\x4b\x05\x36\x06\xc1\x20\x87\x6a\x20\x27\xcd\xc1\x61\x21\xf1\x38\x0d\x76\x40\x81\x84\x8c\x7f\x64\x6b\x3c\x1e\xde\x2e\x50\x5a\xcd\x9a\xca\x6f\x1d\xdd\xb8\xc0\x3b\xea\xc1\x7a\xc3\x7c\xa8\x0a\xa8\xa1\x80\xb9\x9a\xd7\x96\x34\x60\xbe\x0c\x01\xb4\x59\x68\x37\x22\x89\xbf\x52\x6a\x58\x92\x91\x72\xfc\x0b\xad\xec\x29\x56\x17\x38\x1f\xcf\xb1\x7a\xde\x0a\xa0\xa9\x3d\x03\x67\x7b\x2b\x9a\x5a\x73\x46\x56\x25\x7e\xcf\xfd\xf9\x2a\x7d\xda\xa3\xcc\x95\x8c\xda\xb2\xd1\x8c\x56\x28\x86\x35\x7d\x0c\xb2\x3a\x52\x37\x6f\x37\xe7\xd7\xc7\x4b\xed\xb4\xaa\x8f\x40\x0c\x06\x24\x46\x0f\x75\x47\x5e\xa0\x1e\xd7\xc1\xb7\x4a\x9b\x62\x00\x1b\x73\xda\xdb\xd8\x56\xcf\x7e\x28\x0c\xe1\x14\xf3\x04\xe2\x28\x9c\x77\xe0\x30\xf9\x38\x52\x38\xaf\xf0\x4c\x70\xc5\x12\x68\x98\xc2\x19\x4c\x4a\x9e\xac\x29\xf4\x79\xbf\x12\xbb\x26\xac\x0d\x93\xc3\x8d\x80\xb4\x1e\x01\x7c\xb3\x42\x59\x0e\x45\x07\x03\x49\xf3\x6c\xd2\x8c\x16\xa9\x47\x30\x90\xba\xda\x93\xdd\x00\x68\x1b\x1d\x1e\x2f\x35\xdc\xe7\x2e\x68\x35\x4d\x4d\xde\xf6\xf4\x84\x20\x0d\x31\xc4\x80\xbb\x49\x63\x71\xe0\xc4\x3f\x38\xe0\xc6\xe4\xad\x46\x78\x26\x71\x5f\x60\x91\x98\x6e\x14\x6d\x66\xb4\x5a\x44\x3f\xdc\xd7\x7c\x95\x65\xbc\x8f\x43\x11\xdd\xa3\x8f\x09\x33\x83\x44\x70\x78\xa2\x50\x28\x23\xe5\x35\x83\xb9\x34\x97\xba\xec\xee\x56\x05\xc1\xd3\x09\xed\x68\x3d\x82\x61\x28\x59\xd8\x41\x46\xd7\xd9\xa2\x57\x1a\x04\xa1\x16\xe7\x53\x3c\xf5\x98\x1f\x6e\x55\xb7\x18\x84\x41\x9a\x1c\xbb\x73\x03\xa6\xdc\x51\x26\x2e\x96\x5c\x8e\x49\x68\xc4\xd4\x1e\x61\x88\xf9\xe9\xe4\xe3\xb0\xae\xfc\x3a\x09\xe9\x62\x69\x33\x19\x9c\xb7\xb7\xc8\x5c\x56\xeb\x4e\x64\x12\x57\x3e\x8f\x8f\x29\x53\x6b\xf2\x58\x7d\xf6\x86\xaa\x6a\x53\xb3\xe3\xef\xc4\x24\xf0\x32\x4e\x2b\xb3\x0a\xdc\x72\xd8\x20\xdc\xe7\xc3\x68\x63\x70\x85\xd1\x26\xf8\x86\xdd\x30\xec\xef\x30\x74\xd1\xb2\xea\xb2\x7f\xc1\x14\x07\x70\xd1\x76\x25\xd7\x53\x69\x5f\xe3\xb8\x4a\xa8\x56\x4b\xa3\xb8\x4e\x9c\x62\x94\x4d\x57\xdb\x78\xec\xe3\x09\xc6\xd8\x41\x63\x7a\x84\xbf\x3b\xe4\xf9\x7a\x99\x3a\x76\x72\xf5\xdf\x0e\xd2\x6c\x9a\xa9\x67\x5a\x81\x8e\xc1\x48\xb1\xc9\xff\xb5\x10\x47\x6c\x3b\xe6\xfd\x6b\xad\x04\x3e\xcc\x01\xc5\xb2\xdf\xc5\xdc\xb5\x7c\x23\xef\x55\xc3\x1c\x35\xb7\xc6\xfb\xe3\x97\x36\xa6\xf1\x6b\x78\xf7\xe6\xdd\x1b\xb8\xc2\xee\xe0\x63\xb0\x7b\xad\xe6\x90\x4d\x66\xd6\x99\xd0\xca\x51\x3f\xbf\x14\xf3\xfb\xa0\xd5\xfc\x1c\xfe\x17\x00\x00\xff\xff\x1c\xa1\x43\x21\x26\x07\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 1830, mode: os.FileMode(420), modTime: time.Unix(1602670288, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _styleCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x6f\x6f\xdb\x36\x13\x7f\x9f\x4f\x41\x38\x78\x00\xfb\x81\xe8\xc8\xb2\xad\xb8\xca\x9b\x6e\x1d\x8a\x0d\x58\x37\xa0\x41\x5f\x17\x94\x74\x92\xb9\x52\xa4\x40\x52\x89\x9d\xa1\xdf\x7d\x20\x29\xc9\x92\x2c\x39\x4e\x87\x01\xa9\x6b\x1e\x8f\x3f\xde\x7f\xde\x39\x92\x42\x68\xf4\xf7\x0d\x42\x18\x6b\x38\xe8\x08\xdd\xc2\x06\xb6\x70\xff\xd0\x92\x70\x51\x69\x48\x23\x74\xfb\x6e\xf5\x6e\x47\x56\x6e\x23\x26\xc9\xb7\x5c\x8a\x8a\x9b\x0d\xdf\xf7\x6b\xaa\x24\x8e\xb0\x49\xc2\x24\x70\xb4\x3d\x90\x94\x51\x0e\x11\xba\xcd\xb2\xec\xe1\xc6\x31\x56\x5a\x0b\x8e\x4b\x49\x0b\x22\x8f\x11\xba\x5d\x6d\xc3\xb5\xd9\x3d\xdf\xc4\x7b\xf1\x04\x32\x42\xb7\xeb\xdd\x3d\x99\x60\x21\x89\xa6\x4f\x70\x19\xa6\xd6\x2e\x9b\xd8\x8e\x85\x4c\xa7\xae\x51\x90\x08\x9e\x3a\x41\xb7\xc1\xf6\x3e\x5c\x8d\x6f\xb7\xa2\x86\x41\xb8\xbb\x5f\x4f\x30\xb5\xc2\x5e\x84\x6a\x9c\x11\x03\x64\xc1\x04\x4f\x2b\x73\x98\xdd\x87\xbb\xe0\xe1\xe6\xfb\xcd\xcd\xff\xad\x33\x0b\x22\x73\xca\x23\x64\xfd\x52\x92\x34\xa5\x3c\xaf\x57\xb1\x38\x60\x45\x5f\x2c\xc1\x01\xe0\x58\x1c\xec\xd9\xbd\x2e\x98\x77\x13\x8b\xf4\xe8\x40\x28\xc7\x7b\xa0\xf9\x5e\x47\x68\xe5\xfb\x4f\x7b\xcb\xf4\x5e\x55\x65\x29\xa4\x56\x68\x8e\x9f\x21\xfe\x46\x35\xd6\xa2\x4a\xf6\x38\x21\x8c\x89\x4a\x47\x88\x0b\x0e\x0b\x8b\xd0\x42\xf5\xc1\x9a\x73\x19\x65\x0c\x93\x27\x42\x19\x89\x19\x18\xe1\xbe\x9b\xf0\x30\x62\xbc\xe9\x14\x42\xd7\x20\x7f\xbf\x39\xa9\x96\x52\x55\x32\x72\x8c\x50\xc6\xe0\x60\xb6\xcd\xff\x38\xa5\x12\x12\x4d\x05\x8f\x50\x22\x58\x55\x70\xbb\x23\xb8\xc6\x19\x29\x28\x3b\x46\xe8\x67\x46\xf9\xb7\x4f\x24\x79\x3c\x2a\x0d\xc5\x47\xc1\xb5\x87\x30\x29\x4b\x06\x58\x59\x92\x87\x66\x8f\x90\x0b\x40\x5f\x7e\x9b\x79\x68\xf6\x59\xc4\x42\x0b\xf3\xed\xcf\xc3\x31\x07\x3e\xf3\xac\xb8\xb3\x2f\x71\xc5\x75\x65\xe8\x1f\x08\xd7\x44\x02\x63\x66\xf1\x91\x4a\x82\x1e\x09\x57\x66\xf1\x8b\x14\x34\x6d\x57\xbf\x02\x7b\x02\x4d\x13\x82\xfe\x80\x0a\x1a\x9c\x96\x6a\x58\x7e\x92\x94\x18\x18\x45\xb8\xc2\x0a\x24\xcd\x5a\xf9\x15\x7d\x81\x08\xad\x36\xa5\x55\xd6\xa4\x63\x6b\xd6\xa0\x26\x26\x82\x09\x19\xa1\x27\x22\xe7\x2e\xef\x17\x36\x5a\x3a\x79\xee\xb6\x4e\x94\xc5\x43\x63\xd3\xe5\x9e\x28\x0c\x52\x0a\x69\xad\x6b\xab\x06\x61\x34\x37\x86\x04\xae\x41\x8e\x71\x2e\x13\xc1\x35\xa1\x1c\x64\x14\xc5\x90\x09\x09\xde\x25\x16\x92\x69\x70\xf0\x19\x65\xda\x84\xbd\x22\xba\x92\x44\xc3\xdc\xb7\xa2\x8a\x92\x24\x54\x1f\x23\xe4\x2f\xb7\x66\xfd\x82\x29\x4f\xe1\x50\x87\x7d\x41\x0e\xf8\x99\xa6\x7a\xef\x62\xf9\xf9\x3a\x89\xec\x7d\x86\x0a\x5c\x47\x68\x36\xb3\xe9\x24\x14\x75\x41\x42\x62\x25\x58\xa5\x6d\x7c\x69\x51\xd6\x37\x31\xc8\x74\xfd\xb5\xbe\x70\xed\xd7\x36\x6e\x6c\xbe\x0d\xb6\x8e\xd0\x35\x6f\x25\xd9\xfc\xee\xeb\xd7\xfd\x0b\xbf\x53\x9a\x68\x9a\xdc\xd1\x82\xe4\xa0\xee\x4a\xa2\x35\x48\x8e\x35\x5b\xaa\xa7\x7c\x81\xb8\xc0\x12\x4a\x20\xda\x5c\x6a\xaf\x7b\x4d\x99\x93\xed\xae\xd2\x25\x16\x5a\x8b\xa2\xd6\x41\x3a\x91\xbb\xfa\x04\xbb\x6d\x5f\x9f\xd0\xf7\x7f\x40\x9f\x58\x0e\xf5\x71\x17\xbb\x2b\x47\x75\x62\x22\x17\x88\x16\xf9\x59\xa4\x64\x42\x18\x15\x69\x91\x4f\x85\x08\x8a\x2d\x2c\x07\xa5\xe6\xfe\x72\xe3\x82\x97\xd4\x46\xb1\xa1\x4f\xf9\x1e\x24\x75\x17\x9f\xac\x67\x39\x4e\x76\x92\xc0\x88\xa9\xdf\x0f\x6f\xac\x22\xcc\x44\xe2\xaa\x57\x8e\x43\xbf\x3c\xb8\x8f\xcd\x7f\x64\xbe\xd1\x70\xa8\x1f\x88\x61\x3a\xf4\x6f\x37\x35\xdc\x42\x28\xa7\xcb\x9b\xab\xa6\xd9\xc9\xa5\x78\xae\x95\xee\xdc\xb7\x0d\x6a\x6d\x5b\x43\x6c\x76\xe5\x01\xf9\xc8\xd1\xfb\x62\x77\xaf\x1f\x77\x42\x07\x79\xb3\x3b\x43\xf6\x2d\x72\x63\xdf\xf6\x59\x44\xa4\xd2\xa2\x57\x24\xac\x94\xb6\x66\x61\xaa\xa1\x50\xa7\xca\x85\xd0\x5f\x95\xd2\x34\x3b\xe2\x36\x79\x3a\x45\xad\x11\x70\x69\xe5\xc5\x34\x99\xb2\xd5\x5b\xb1\xdb\x6c\x6b\x94\x6a\x92\xad\x59\xd7\x8f\xb7\x24\x29\xad\x94\x75\xe3\xff\x4e\xe4\x08\xad\xca\x03\x52\x82\xd1\x14\xc9\x3c\x26\xf3\xd5\xbb\x9d\x87\x36\xf6\xcf\x5f\x6e\xcf\x6a\xfb\x39\xcf\x6a\xbb\xe8\x29\xb8\x5f\x75\x73\xc5\xbd\x05\x4d\x6f\xb7\x18\x3e\x34\x3b\x27\xa2\x25\x3d\xd7\x72\x6f\x4c\x97\x38\xee\xdd\x1a\xbb\xc7\x1e\xfa\xfe\x98\x2b\x77\x75\x8c\x74\x8e\x12\xaf\xbb\x8a\x27\xa0\x3a\x67\x4a\x17\x4e\x0e\x19\xdb\xca\xbd\x0e\xa6\x63\x6f\x84\x7d\x15\x0c\xc4\x20\x8a\xa6\x70\x6e\xa0\x53\xff\x7c\x66\xa2\x4d\x37\x24\xbb\x42\x74\x74\x36\x79\xb1\x0a\x47\xdd\x1d\x9c\x57\x0c\xeb\xc3\xf5\xc6\x43\xcd\x3f\x7f\xb9\x1b\x38\xd1\x89\xd9\x53\xc8\x96\xf6\x33\x96\x44\xd4\xea\xf4\xda\x9f\xd9\xe3\xc7\x4f\x82\x0b\xfc\x19\xf2\x8a\x11\x39\xf3\xd0\x07\xc1\x95\x60\x44\x79\x68\xf6\x3b\x8d\x41\x12\x8b\x61\x98\x66\x1e\xfa\x04\x9c\x09\xc3\x53\x49\x0a\xd2\xb5\x2c\x85\xe0\x42\x95\x24\x81\xa1\x3d\xd6\x03\xdd\x03\x53\x17\x87\x69\x1b\x8c\xda\x62\x3d\x61\x8b\x60\xbb\xf5\xd0\xe9\xe3\x3c\xa6\xcb\x25\xb1\x5f\xd4\xc5\xfa\xe2\x2e\xc7\xc3\xc8\x23\x4b\xd7\x90\x9f\xcc\xd4\xf7\x6c\x2f\x04\xb7\x2e\x9a\xdb\xaa\x40\xb9\x6d\xc2\x7e\xbc\x38\x4c\x74\xf8\xaf\x84\x8b\x8d\xc7\x14\x12\xe1\x1c\xd5\xd4\x79\x84\x9e\xf7\x54\x03\xb6\x8e\x31\xc4\x67\x49\xca\x87\xc1\x08\xb0\x0e\xfb\xde\x98\xb2\x07\x6e\x66\xaa\xf3\x74\x18\x19\xc9\xa6\xba\xcc\x1e\xe7\x62\xbc\xb0\x8d\x82\x3a\xb6\x45\xab\xad\xda\x93\xd4\x3c\x43\xbe\x3d\xe8\xbb\xc8\xf0\x3d\x54\xff\x2d\xd7\x8b\xcb\x5a\x44\x76\xa8\x73\xe3\xcc\x2b\x62\xba\xf9\xef\x35\x3c\x37\xff\x5d\x07\xe8\x78\xa7\x10\xdb\x49\x70\xd2\xd2\xfd\x79\xf2\xb2\xad\x5b\xde\x6b\xac\x3d\x1c\x42\x5f\x15\xf1\x1a\x33\x0e\x06\xe9\xd7\x31\xaf\x31\xe5\x70\xf0\x76\xa8\x75\xbf\x38\x9d\xf6\x97\xca\x78\xb7\x69\x38\x61\x8d\x3c\x13\x41\x5b\xc0\x4e\x3d\x4a\xdb\xe5\xd4\xc7\x54\x41\x18\x3b\xab\x21\xcd\xfb\xf2\xbe\x80\x94\x12\x24\x38\x3b\x22\x95\x48\x00\x8e\x08\x4f\xd1\xbc\x83\x68\x9b\x6f\x37\x6f\x0f\x9a\xbc\xe1\xeb\xb9\xae\x3b\x87\xbe\xb5\x4c\x21\x22\x12\xe7\xa6\x54\x00\xd7\xf3\x61\x82\x84\x0b\xef\x2c\x69\xc2\xc5\xc2\x95\x73\xf4\x6f\xfb\xd4\x1a\x05\x8d\x4d\x97\xf5\xef\x01\xd3\x5d\xec\x40\xc1\xd1\x13\xcd\xc8\x50\x1f\x68\x47\xb0\xb0\xc3\xdf\xed\x32\x3b\x98\x6b\xd7\x72\xac\x26\xa0\x2f\x9e\xba\x74\xa0\x6e\x77\xba\x8f\x5d\xa7\xb9\xa9\xcf\x5d\x31\x2d\x5f\x64\x3a\xcd\x7c\xbd\xd1\x78\xdd\xfc\x18\xf2\x4f\x00\x00\x00\xff\xff\xc7\xb4\x87\x01\xfa\x13\x00\x00")

func styleCssBytes() ([]byte, error) {
	return bindataRead(
		_styleCss,
		"style.css",
	)
}

func styleCss() (*asset, error) {
	bytes, err := styleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "style.css", size: 5114, mode: os.FileMode(420), modTime: time.Unix(1602670249, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"error.html":            errorHtml,
	"error_limit.html":      error_limitHtml,
	"images/error.svg":      imagesErrorSvg,
	"images/hashi.svg":      imagesHashiSvg,
	"images/logo.svg":       imagesLogoSvg,
	"images/pattern-br.svg": imagesPatternBrSvg,
	"images/pattern-tl.svg": imagesPatternTlSvg,
	"index.html":            indexHtml,
	"style.css":             styleCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"error.html":       &bintree{errorHtml, map[string]*bintree{}},
	"error_limit.html": &bintree{error_limitHtml, map[string]*bintree{}},
	"images": &bintree{nil, map[string]*bintree{
		"error.svg":      &bintree{imagesErrorSvg, map[string]*bintree{}},
		"hashi.svg":      &bintree{imagesHashiSvg, map[string]*bintree{}},
		"logo.svg":       &bintree{imagesLogoSvg, map[string]*bintree{}},
		"pattern-br.svg": &bintree{imagesPatternBrSvg, map[string]*bintree{}},
		"pattern-tl.svg": &bintree{imagesPatternTlSvg, map[string]*bintree{}},
	}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"style.css":  &bintree{styleCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
