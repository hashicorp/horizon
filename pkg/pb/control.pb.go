// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: control.proto

package pb

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ServiceRequest struct {
	Account  *Account  `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Hub      *ULID     `protobuf:"bytes,2,opt,name=hub,proto3" json:"hub,omitempty"`
	Id       *ULID     `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Type     string    `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Labels   *LabelSet `protobuf:"bytes,5,opt,name=labels,proto3" json:"labels,omitempty"`
	Metadata []*KVPair `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *ServiceRequest) Reset()      { *m = ServiceRequest{} }
func (*ServiceRequest) ProtoMessage() {}
func (*ServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{0}
}
func (m *ServiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceRequest.Merge(m, src)
}
func (m *ServiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *ServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceRequest proto.InternalMessageInfo

func (m *ServiceRequest) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *ServiceRequest) GetHub() *ULID {
	if m != nil {
		return m.Hub
	}
	return nil
}

func (m *ServiceRequest) GetId() *ULID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ServiceRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ServiceRequest) GetLabels() *LabelSet {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ServiceRequest) GetMetadata() []*KVPair {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type ServiceResponse struct {
}

func (m *ServiceResponse) Reset()      { *m = ServiceResponse{} }
func (*ServiceResponse) ProtoMessage() {}
func (*ServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{1}
}
func (m *ServiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceResponse.Merge(m, src)
}
func (m *ServiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *ServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceResponse proto.InternalMessageInfo

type LabelLink struct {
	Account *Account        `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Labels  *LabelSet       `protobuf:"bytes,2,opt,name=labels,proto3" json:"labels,omitempty"`
	Target  *LabelSet       `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Limits  *Account_Limits `protobuf:"bytes,4,opt,name=limits,proto3" json:"limits,omitempty"`
}

func (m *LabelLink) Reset()      { *m = LabelLink{} }
func (*LabelLink) ProtoMessage() {}
func (*LabelLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{2}
}
func (m *LabelLink) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LabelLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LabelLink.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LabelLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelLink.Merge(m, src)
}
func (m *LabelLink) XXX_Size() int {
	return m.Size()
}
func (m *LabelLink) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelLink.DiscardUnknown(m)
}

var xxx_messageInfo_LabelLink proto.InternalMessageInfo

func (m *LabelLink) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *LabelLink) GetLabels() *LabelSet {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *LabelLink) GetTarget() *LabelSet {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *LabelLink) GetLimits() *Account_Limits {
	if m != nil {
		return m.Limits
	}
	return nil
}

type LabelLinks struct {
	LabelLinks []*LabelLink `protobuf:"bytes,1,rep,name=label_links,json=labelLinks,proto3" json:"label_links,omitempty"`
}

func (m *LabelLinks) Reset()      { *m = LabelLinks{} }
func (*LabelLinks) ProtoMessage() {}
func (*LabelLinks) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{3}
}
func (m *LabelLinks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LabelLinks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LabelLinks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LabelLinks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelLinks.Merge(m, src)
}
func (m *LabelLinks) XXX_Size() int {
	return m.Size()
}
func (m *LabelLinks) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelLinks.DiscardUnknown(m)
}

var xxx_messageInfo_LabelLinks proto.InternalMessageInfo

func (m *LabelLinks) GetLabelLinks() []*LabelLink {
	if m != nil {
		return m.LabelLinks
	}
	return nil
}

type ServiceRoute struct {
	Hub    *ULID     `protobuf:"bytes,1,opt,name=hub,proto3" json:"hub,omitempty"`
	Id     *ULID     `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Type   string    `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Labels *LabelSet `protobuf:"bytes,4,opt,name=labels,proto3" json:"labels,omitempty"`
}

func (m *ServiceRoute) Reset()      { *m = ServiceRoute{} }
func (*ServiceRoute) ProtoMessage() {}
func (*ServiceRoute) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{4}
}
func (m *ServiceRoute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceRoute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceRoute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceRoute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceRoute.Merge(m, src)
}
func (m *ServiceRoute) XXX_Size() int {
	return m.Size()
}
func (m *ServiceRoute) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceRoute.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceRoute proto.InternalMessageInfo

func (m *ServiceRoute) GetHub() *ULID {
	if m != nil {
		return m.Hub
	}
	return nil
}

func (m *ServiceRoute) GetId() *ULID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ServiceRoute) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ServiceRoute) GetLabels() *LabelSet {
	if m != nil {
		return m.Labels
	}
	return nil
}

type AccountServices struct {
	Account  *Account        `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Services []*ServiceRoute `protobuf:"bytes,2,rep,name=services,proto3" json:"services,omitempty"`
}

func (m *AccountServices) Reset()      { *m = AccountServices{} }
func (*AccountServices) ProtoMessage() {}
func (*AccountServices) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{5}
}
func (m *AccountServices) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountServices) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountServices.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountServices) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountServices.Merge(m, src)
}
func (m *AccountServices) XXX_Size() int {
	return m.Size()
}
func (m *AccountServices) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountServices.DiscardUnknown(m)
}

var xxx_messageInfo_AccountServices proto.InternalMessageInfo

func (m *AccountServices) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *AccountServices) GetServices() []*ServiceRoute {
	if m != nil {
		return m.Services
	}
	return nil
}

type ActivityEntry struct {
	RouteAdded   *AccountServices `protobuf:"bytes,1,opt,name=route_added,json=routeAdded,proto3" json:"route_added,omitempty"`
	RouteRemoved *ULID            `protobuf:"bytes,2,opt,name=route_removed,json=routeRemoved,proto3" json:"route_removed,omitempty"`
}

func (m *ActivityEntry) Reset()      { *m = ActivityEntry{} }
func (*ActivityEntry) ProtoMessage() {}
func (*ActivityEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{6}
}
func (m *ActivityEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityEntry.Merge(m, src)
}
func (m *ActivityEntry) XXX_Size() int {
	return m.Size()
}
func (m *ActivityEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityEntry.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityEntry proto.InternalMessageInfo

func (m *ActivityEntry) GetRouteAdded() *AccountServices {
	if m != nil {
		return m.RouteAdded
	}
	return nil
}

func (m *ActivityEntry) GetRouteRemoved() *ULID {
	if m != nil {
		return m.RouteRemoved
	}
	return nil
}

type ConfigRequest struct {
	StableId   *ULID              `protobuf:"bytes,1,opt,name=stable_id,json=stableId,proto3" json:"stable_id,omitempty"`
	InstanceId *ULID              `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Locations  []*NetworkLocation `protobuf:"bytes,3,rep,name=locations,proto3" json:"locations,omitempty"`
}

func (m *ConfigRequest) Reset()      { *m = ConfigRequest{} }
func (*ConfigRequest) ProtoMessage() {}
func (*ConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{7}
}
func (m *ConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigRequest.Merge(m, src)
}
func (m *ConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigRequest proto.InternalMessageInfo

func (m *ConfigRequest) GetStableId() *ULID {
	if m != nil {
		return m.StableId
	}
	return nil
}

func (m *ConfigRequest) GetInstanceId() *ULID {
	if m != nil {
		return m.InstanceId
	}
	return nil
}

func (m *ConfigRequest) GetLocations() []*NetworkLocation {
	if m != nil {
		return m.Locations
	}
	return nil
}

type ConfigResponse struct {
	TlsKey      []byte `protobuf:"bytes,1,opt,name=tls_key,json=tlsKey,proto3" json:"tls_key,omitempty"`
	TlsCert     []byte `protobuf:"bytes,2,opt,name=tls_cert,json=tlsCert,proto3" json:"tls_cert,omitempty"`
	TokenPub    []byte `protobuf:"bytes,3,opt,name=token_pub,json=tokenPub,proto3" json:"token_pub,omitempty"`
	S3AccessKey string `protobuf:"bytes,4,opt,name=s3_access_key,json=s3AccessKey,proto3" json:"s3_access_key,omitempty"`
	S3SecretKey string `protobuf:"bytes,5,opt,name=s3_secret_key,json=s3SecretKey,proto3" json:"s3_secret_key,omitempty"`
	S3Bucket    string `protobuf:"bytes,6,opt,name=s3_bucket,json=s3Bucket,proto3" json:"s3_bucket,omitempty"`
	ImageTag    string `protobuf:"bytes,7,opt,name=image_tag,json=imageTag,proto3" json:"image_tag,omitempty"`
}

func (m *ConfigResponse) Reset()      { *m = ConfigResponse{} }
func (*ConfigResponse) ProtoMessage() {}
func (*ConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{8}
}
func (m *ConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigResponse.Merge(m, src)
}
func (m *ConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *ConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigResponse proto.InternalMessageInfo

func (m *ConfigResponse) GetTlsKey() []byte {
	if m != nil {
		return m.TlsKey
	}
	return nil
}

func (m *ConfigResponse) GetTlsCert() []byte {
	if m != nil {
		return m.TlsCert
	}
	return nil
}

func (m *ConfigResponse) GetTokenPub() []byte {
	if m != nil {
		return m.TokenPub
	}
	return nil
}

func (m *ConfigResponse) GetS3AccessKey() string {
	if m != nil {
		return m.S3AccessKey
	}
	return ""
}

func (m *ConfigResponse) GetS3SecretKey() string {
	if m != nil {
		return m.S3SecretKey
	}
	return ""
}

func (m *ConfigResponse) GetS3Bucket() string {
	if m != nil {
		return m.S3Bucket
	}
	return ""
}

func (m *ConfigResponse) GetImageTag() string {
	if m != nil {
		return m.ImageTag
	}
	return ""
}

type HubChange struct {
	OldId *ULID `protobuf:"bytes,1,opt,name=old_id,json=oldId,proto3" json:"old_id,omitempty"`
	NewId *ULID `protobuf:"bytes,2,opt,name=new_id,json=newId,proto3" json:"new_id,omitempty"`
}

func (m *HubChange) Reset()      { *m = HubChange{} }
func (*HubChange) ProtoMessage() {}
func (*HubChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{9}
}
func (m *HubChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HubChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HubChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HubChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HubChange.Merge(m, src)
}
func (m *HubChange) XXX_Size() int {
	return m.Size()
}
func (m *HubChange) XXX_DiscardUnknown() {
	xxx_messageInfo_HubChange.DiscardUnknown(m)
}

var xxx_messageInfo_HubChange proto.InternalMessageInfo

func (m *HubChange) GetOldId() *ULID {
	if m != nil {
		return m.OldId
	}
	return nil
}

func (m *HubChange) GetNewId() *ULID {
	if m != nil {
		return m.NewId
	}
	return nil
}

type CentralActivity struct {
	AccountServices []*AccountServices `protobuf:"bytes,1,rep,name=account_services,json=accountServices,proto3" json:"account_services,omitempty"`
	RequestStats    bool               `protobuf:"varint,2,opt,name=request_stats,json=requestStats,proto3" json:"request_stats,omitempty"`
	NewLabelLinks   *LabelLinks        `protobuf:"bytes,3,opt,name=new_label_links,json=newLabelLinks,proto3" json:"new_label_links,omitempty"`
	HubChange       *HubChange         `protobuf:"bytes,4,opt,name=hub_change,json=hubChange,proto3" json:"hub_change,omitempty"`
}

func (m *CentralActivity) Reset()      { *m = CentralActivity{} }
func (*CentralActivity) ProtoMessage() {}
func (*CentralActivity) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{10}
}
func (m *CentralActivity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CentralActivity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CentralActivity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CentralActivity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CentralActivity.Merge(m, src)
}
func (m *CentralActivity) XXX_Size() int {
	return m.Size()
}
func (m *CentralActivity) XXX_DiscardUnknown() {
	xxx_messageInfo_CentralActivity.DiscardUnknown(m)
}

var xxx_messageInfo_CentralActivity proto.InternalMessageInfo

func (m *CentralActivity) GetAccountServices() []*AccountServices {
	if m != nil {
		return m.AccountServices
	}
	return nil
}

func (m *CentralActivity) GetRequestStats() bool {
	if m != nil {
		return m.RequestStats
	}
	return false
}

func (m *CentralActivity) GetNewLabelLinks() *LabelLinks {
	if m != nil {
		return m.NewLabelLinks
	}
	return nil
}

func (m *CentralActivity) GetHubChange() *HubChange {
	if m != nil {
		return m.HubChange
	}
	return nil
}

type HubActivity struct {
	HubReg *HubActivity_HubRegistration `protobuf:"bytes,1,opt,name=hub_reg,json=hubReg,proto3" json:"hub_reg,omitempty"`
	SentAt *Timestamp                   `protobuf:"bytes,2,opt,name=sent_at,json=sentAt,proto3" json:"sent_at,omitempty"`
	Stats  *HubActivity_HubStats        `protobuf:"bytes,3,opt,name=stats,proto3" json:"stats,omitempty"`
	Flow   []*FlowRecord                `protobuf:"bytes,4,rep,name=flow,proto3" json:"flow,omitempty"`
}

func (m *HubActivity) Reset()      { *m = HubActivity{} }
func (*HubActivity) ProtoMessage() {}
func (*HubActivity) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{11}
}
func (m *HubActivity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HubActivity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HubActivity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HubActivity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HubActivity.Merge(m, src)
}
func (m *HubActivity) XXX_Size() int {
	return m.Size()
}
func (m *HubActivity) XXX_DiscardUnknown() {
	xxx_messageInfo_HubActivity.DiscardUnknown(m)
}

var xxx_messageInfo_HubActivity proto.InternalMessageInfo

func (m *HubActivity) GetHubReg() *HubActivity_HubRegistration {
	if m != nil {
		return m.HubReg
	}
	return nil
}

func (m *HubActivity) GetSentAt() *Timestamp {
	if m != nil {
		return m.SentAt
	}
	return nil
}

func (m *HubActivity) GetStats() *HubActivity_HubStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *HubActivity) GetFlow() []*FlowRecord {
	if m != nil {
		return m.Flow
	}
	return nil
}

type HubActivity_HubRegistration struct {
	Hub       *ULID              `protobuf:"bytes,1,opt,name=hub,proto3" json:"hub,omitempty"`
	StableHub *ULID              `protobuf:"bytes,2,opt,name=stable_hub,json=stableHub,proto3" json:"stable_hub,omitempty"`
	Locations []*NetworkLocation `protobuf:"bytes,3,rep,name=locations,proto3" json:"locations,omitempty"`
}

func (m *HubActivity_HubRegistration) Reset()      { *m = HubActivity_HubRegistration{} }
func (*HubActivity_HubRegistration) ProtoMessage() {}
func (*HubActivity_HubRegistration) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{11, 0}
}
func (m *HubActivity_HubRegistration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HubActivity_HubRegistration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HubActivity_HubRegistration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HubActivity_HubRegistration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HubActivity_HubRegistration.Merge(m, src)
}
func (m *HubActivity_HubRegistration) XXX_Size() int {
	return m.Size()
}
func (m *HubActivity_HubRegistration) XXX_DiscardUnknown() {
	xxx_messageInfo_HubActivity_HubRegistration.DiscardUnknown(m)
}

var xxx_messageInfo_HubActivity_HubRegistration proto.InternalMessageInfo

func (m *HubActivity_HubRegistration) GetHub() *ULID {
	if m != nil {
		return m.Hub
	}
	return nil
}

func (m *HubActivity_HubRegistration) GetStableHub() *ULID {
	if m != nil {
		return m.StableHub
	}
	return nil
}

func (m *HubActivity_HubRegistration) GetLocations() []*NetworkLocation {
	if m != nil {
		return m.Locations
	}
	return nil
}

type HubActivity_HubStats struct {
	AgentConnections     int64      `protobuf:"varint,1,opt,name=agent_connections,json=agentConnections,proto3" json:"agent_connections,omitempty"`
	AccountsSeen         int64      `protobuf:"varint,2,opt,name=accounts_seen,json=accountsSeen,proto3" json:"accounts_seen,omitempty"`
	AccountsCached       int64      `protobuf:"varint,3,opt,name=accounts_cached,json=accountsCached,proto3" json:"accounts_cached,omitempty"`
	CachedBytes          int64      `protobuf:"varint,4,opt,name=cached_bytes,json=cachedBytes,proto3" json:"cached_bytes,omitempty"`
	LastSuccessfulUpdate *Timestamp `protobuf:"bytes,5,opt,name=last_successful_update,json=lastSuccessfulUpdate,proto3" json:"last_successful_update,omitempty"`
	LastAttemptedUpdate  *Timestamp `protobuf:"bytes,6,opt,name=last_attempted_update,json=lastAttemptedUpdate,proto3" json:"last_attempted_update,omitempty"`
}

func (m *HubActivity_HubStats) Reset()      { *m = HubActivity_HubStats{} }
func (*HubActivity_HubStats) ProtoMessage() {}
func (*HubActivity_HubStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{11, 1}
}
func (m *HubActivity_HubStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HubActivity_HubStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HubActivity_HubStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HubActivity_HubStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HubActivity_HubStats.Merge(m, src)
}
func (m *HubActivity_HubStats) XXX_Size() int {
	return m.Size()
}
func (m *HubActivity_HubStats) XXX_DiscardUnknown() {
	xxx_messageInfo_HubActivity_HubStats.DiscardUnknown(m)
}

var xxx_messageInfo_HubActivity_HubStats proto.InternalMessageInfo

func (m *HubActivity_HubStats) GetAgentConnections() int64 {
	if m != nil {
		return m.AgentConnections
	}
	return 0
}

func (m *HubActivity_HubStats) GetAccountsSeen() int64 {
	if m != nil {
		return m.AccountsSeen
	}
	return 0
}

func (m *HubActivity_HubStats) GetAccountsCached() int64 {
	if m != nil {
		return m.AccountsCached
	}
	return 0
}

func (m *HubActivity_HubStats) GetCachedBytes() int64 {
	if m != nil {
		return m.CachedBytes
	}
	return 0
}

func (m *HubActivity_HubStats) GetLastSuccessfulUpdate() *Timestamp {
	if m != nil {
		return m.LastSuccessfulUpdate
	}
	return nil
}

func (m *HubActivity_HubStats) GetLastAttemptedUpdate() *Timestamp {
	if m != nil {
		return m.LastAttemptedUpdate
	}
	return nil
}

type HubInfo struct {
	Id        *ULID              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Locations []*NetworkLocation `protobuf:"bytes,2,rep,name=locations,proto3" json:"locations,omitempty"`
}

func (m *HubInfo) Reset()      { *m = HubInfo{} }
func (*HubInfo) ProtoMessage() {}
func (*HubInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{12}
}
func (m *HubInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HubInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HubInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HubInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HubInfo.Merge(m, src)
}
func (m *HubInfo) XXX_Size() int {
	return m.Size()
}
func (m *HubInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HubInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HubInfo proto.InternalMessageInfo

func (m *HubInfo) GetId() *ULID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *HubInfo) GetLocations() []*NetworkLocation {
	if m != nil {
		return m.Locations
	}
	return nil
}

type ListOfHubs struct {
	Hubs []*HubInfo `protobuf:"bytes,1,rep,name=hubs,proto3" json:"hubs,omitempty"`
}

func (m *ListOfHubs) Reset()      { *m = ListOfHubs{} }
func (*ListOfHubs) ProtoMessage() {}
func (*ListOfHubs) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{13}
}
func (m *ListOfHubs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListOfHubs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListOfHubs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListOfHubs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListOfHubs.Merge(m, src)
}
func (m *ListOfHubs) XXX_Size() int {
	return m.Size()
}
func (m *ListOfHubs) XXX_DiscardUnknown() {
	xxx_messageInfo_ListOfHubs.DiscardUnknown(m)
}

var xxx_messageInfo_ListOfHubs proto.InternalMessageInfo

func (m *ListOfHubs) GetHubs() []*HubInfo {
	if m != nil {
		return m.Hubs
	}
	return nil
}

type HubSync struct {
	Id       *ULID             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StableId *ULID             `protobuf:"bytes,2,opt,name=stable_id,json=stableId,proto3" json:"stable_id,omitempty"`
	Services []*ServiceRequest `protobuf:"bytes,3,rep,name=services,proto3" json:"services,omitempty"`
}

func (m *HubSync) Reset()      { *m = HubSync{} }
func (*HubSync) ProtoMessage() {}
func (*HubSync) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{14}
}
func (m *HubSync) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HubSync) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HubSync.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HubSync) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HubSync.Merge(m, src)
}
func (m *HubSync) XXX_Size() int {
	return m.Size()
}
func (m *HubSync) XXX_DiscardUnknown() {
	xxx_messageInfo_HubSync.DiscardUnknown(m)
}

var xxx_messageInfo_HubSync proto.InternalMessageInfo

func (m *HubSync) GetId() *ULID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *HubSync) GetStableId() *ULID {
	if m != nil {
		return m.StableId
	}
	return nil
}

func (m *HubSync) GetServices() []*ServiceRequest {
	if m != nil {
		return m.Services
	}
	return nil
}

type HubSyncResponse struct {
	ServiceCount int64 `protobuf:"varint,1,opt,name=service_count,json=serviceCount,proto3" json:"service_count,omitempty"`
}

func (m *HubSyncResponse) Reset()      { *m = HubSyncResponse{} }
func (*HubSyncResponse) ProtoMessage() {}
func (*HubSyncResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{15}
}
func (m *HubSyncResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HubSyncResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HubSyncResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HubSyncResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HubSyncResponse.Merge(m, src)
}
func (m *HubSyncResponse) XXX_Size() int {
	return m.Size()
}
func (m *HubSyncResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HubSyncResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HubSyncResponse proto.InternalMessageInfo

func (m *HubSyncResponse) GetServiceCount() int64 {
	if m != nil {
		return m.ServiceCount
	}
	return 0
}

type HubRegisterRequest struct {
	StableId   *ULID              `protobuf:"bytes,1,opt,name=stable_id,json=stableId,proto3" json:"stable_id,omitempty"`
	InstanceId *ULID              `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Locations  []*NetworkLocation `protobuf:"bytes,3,rep,name=locations,proto3" json:"locations,omitempty"`
}

func (m *HubRegisterRequest) Reset()      { *m = HubRegisterRequest{} }
func (*HubRegisterRequest) ProtoMessage() {}
func (*HubRegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{16}
}
func (m *HubRegisterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HubRegisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HubRegisterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HubRegisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HubRegisterRequest.Merge(m, src)
}
func (m *HubRegisterRequest) XXX_Size() int {
	return m.Size()
}
func (m *HubRegisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HubRegisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HubRegisterRequest proto.InternalMessageInfo

func (m *HubRegisterRequest) GetStableId() *ULID {
	if m != nil {
		return m.StableId
	}
	return nil
}

func (m *HubRegisterRequest) GetInstanceId() *ULID {
	if m != nil {
		return m.InstanceId
	}
	return nil
}

func (m *HubRegisterRequest) GetLocations() []*NetworkLocation {
	if m != nil {
		return m.Locations
	}
	return nil
}

type HubRegisterResponse struct {
	ControlTime *Timestamp `protobuf:"bytes,1,opt,name=control_time,json=controlTime,proto3" json:"control_time,omitempty"`
}

func (m *HubRegisterResponse) Reset()      { *m = HubRegisterResponse{} }
func (*HubRegisterResponse) ProtoMessage() {}
func (*HubRegisterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{17}
}
func (m *HubRegisterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HubRegisterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HubRegisterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HubRegisterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HubRegisterResponse.Merge(m, src)
}
func (m *HubRegisterResponse) XXX_Size() int {
	return m.Size()
}
func (m *HubRegisterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HubRegisterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HubRegisterResponse proto.InternalMessageInfo

func (m *HubRegisterResponse) GetControlTime() *Timestamp {
	if m != nil {
		return m.ControlTime
	}
	return nil
}

type HubDisconnectRequest struct {
	StableId   *ULID `protobuf:"bytes,1,opt,name=stable_id,json=stableId,proto3" json:"stable_id,omitempty"`
	InstanceId *ULID `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (m *HubDisconnectRequest) Reset()      { *m = HubDisconnectRequest{} }
func (*HubDisconnectRequest) ProtoMessage() {}
func (*HubDisconnectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{18}
}
func (m *HubDisconnectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HubDisconnectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HubDisconnectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HubDisconnectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HubDisconnectRequest.Merge(m, src)
}
func (m *HubDisconnectRequest) XXX_Size() int {
	return m.Size()
}
func (m *HubDisconnectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HubDisconnectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HubDisconnectRequest proto.InternalMessageInfo

func (m *HubDisconnectRequest) GetStableId() *ULID {
	if m != nil {
		return m.StableId
	}
	return nil
}

func (m *HubDisconnectRequest) GetInstanceId() *ULID {
	if m != nil {
		return m.InstanceId
	}
	return nil
}

type ServiceTokenRequest struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *ServiceTokenRequest) Reset()      { *m = ServiceTokenRequest{} }
func (*ServiceTokenRequest) ProtoMessage() {}
func (*ServiceTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{19}
}
func (m *ServiceTokenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceTokenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceTokenRequest.Merge(m, src)
}
func (m *ServiceTokenRequest) XXX_Size() int {
	return m.Size()
}
func (m *ServiceTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceTokenRequest proto.InternalMessageInfo

func (m *ServiceTokenRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type ServiceTokenResponse struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *ServiceTokenResponse) Reset()      { *m = ServiceTokenResponse{} }
func (*ServiceTokenResponse) ProtoMessage() {}
func (*ServiceTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{20}
}
func (m *ServiceTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceTokenResponse.Merge(m, src)
}
func (m *ServiceTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *ServiceTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceTokenResponse proto.InternalMessageInfo

func (m *ServiceTokenResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type ListServicesRequest struct {
	Account *Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *ListServicesRequest) Reset()      { *m = ListServicesRequest{} }
func (*ListServicesRequest) ProtoMessage() {}
func (*ListServicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{21}
}
func (m *ListServicesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListServicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListServicesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListServicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServicesRequest.Merge(m, src)
}
func (m *ListServicesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListServicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListServicesRequest proto.InternalMessageInfo

func (m *ListServicesRequest) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

type ListServicesResponse struct {
	Services []*Service `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
}

func (m *ListServicesResponse) Reset()      { *m = ListServicesResponse{} }
func (*ListServicesResponse) ProtoMessage() {}
func (*ListServicesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{22}
}
func (m *ListServicesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListServicesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListServicesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListServicesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServicesResponse.Merge(m, src)
}
func (m *ListServicesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListServicesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServicesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListServicesResponse proto.InternalMessageInfo

func (m *ListServicesResponse) GetServices() []*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

type Service struct {
	Id       *ULID     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Hub      *ULID     `protobuf:"bytes,2,opt,name=hub,proto3" json:"hub,omitempty"`
	Type     string    `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Labels   *LabelSet `protobuf:"bytes,4,opt,name=labels,proto3" json:"labels,omitempty"`
	Metadata []*KVPair `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *Service) Reset()      { *m = Service{} }
func (*Service) ProtoMessage() {}
func (*Service) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{23}
}
func (m *Service) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Service) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Service.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Service) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service.Merge(m, src)
}
func (m *Service) XXX_Size() int {
	return m.Size()
}
func (m *Service) XXX_DiscardUnknown() {
	xxx_messageInfo_Service.DiscardUnknown(m)
}

var xxx_messageInfo_Service proto.InternalMessageInfo

func (m *Service) GetId() *ULID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Service) GetHub() *ULID {
	if m != nil {
		return m.Hub
	}
	return nil
}

func (m *Service) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Service) GetLabels() *LabelSet {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Service) GetMetadata() []*KVPair {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type AddAccountRequest struct {
	Account *Account        `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Limits  *Account_Limits `protobuf:"bytes,2,opt,name=limits,proto3" json:"limits,omitempty"`
}

func (m *AddAccountRequest) Reset()      { *m = AddAccountRequest{} }
func (*AddAccountRequest) ProtoMessage() {}
func (*AddAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{24}
}
func (m *AddAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddAccountRequest.Merge(m, src)
}
func (m *AddAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddAccountRequest proto.InternalMessageInfo

func (m *AddAccountRequest) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *AddAccountRequest) GetLimits() *Account_Limits {
	if m != nil {
		return m.Limits
	}
	return nil
}

type AddLabelLinkRequest struct {
	Labels  *LabelSet `protobuf:"bytes,1,opt,name=labels,proto3" json:"labels,omitempty"`
	Account *Account  `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	Target  *LabelSet `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
}

func (m *AddLabelLinkRequest) Reset()      { *m = AddLabelLinkRequest{} }
func (*AddLabelLinkRequest) ProtoMessage() {}
func (*AddLabelLinkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{25}
}
func (m *AddLabelLinkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddLabelLinkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddLabelLinkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddLabelLinkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddLabelLinkRequest.Merge(m, src)
}
func (m *AddLabelLinkRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddLabelLinkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddLabelLinkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddLabelLinkRequest proto.InternalMessageInfo

func (m *AddLabelLinkRequest) GetLabels() *LabelSet {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *AddLabelLinkRequest) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *AddLabelLinkRequest) GetTarget() *LabelSet {
	if m != nil {
		return m.Target
	}
	return nil
}

type Noop struct {
}

func (m *Noop) Reset()      { *m = Noop{} }
func (*Noop) ProtoMessage() {}
func (*Noop) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{26}
}
func (m *Noop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Noop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Noop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Noop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Noop.Merge(m, src)
}
func (m *Noop) XXX_Size() int {
	return m.Size()
}
func (m *Noop) XXX_DiscardUnknown() {
	xxx_messageInfo_Noop.DiscardUnknown(m)
}

var xxx_messageInfo_Noop proto.InternalMessageInfo

type RemoveLabelLinkRequest struct {
	Labels  *LabelSet `protobuf:"bytes,1,opt,name=labels,proto3" json:"labels,omitempty"`
	Account *Account  `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *RemoveLabelLinkRequest) Reset()      { *m = RemoveLabelLinkRequest{} }
func (*RemoveLabelLinkRequest) ProtoMessage() {}
func (*RemoveLabelLinkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{27}
}
func (m *RemoveLabelLinkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveLabelLinkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveLabelLinkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveLabelLinkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveLabelLinkRequest.Merge(m, src)
}
func (m *RemoveLabelLinkRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveLabelLinkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveLabelLinkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveLabelLinkRequest proto.InternalMessageInfo

func (m *RemoveLabelLinkRequest) GetLabels() *LabelSet {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *RemoveLabelLinkRequest) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

type CreateTokenRequest struct {
	Account       *Account          `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Capabilities  []TokenCapability `protobuf:"bytes,2,rep,name=capabilities,proto3" json:"capabilities"`
	ValidDuration *Timestamp        `protobuf:"bytes,3,opt,name=valid_duration,json=validDuration,proto3" json:"valid_duration,omitempty"`
}

func (m *CreateTokenRequest) Reset()      { *m = CreateTokenRequest{} }
func (*CreateTokenRequest) ProtoMessage() {}
func (*CreateTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{28}
}
func (m *CreateTokenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTokenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTokenRequest.Merge(m, src)
}
func (m *CreateTokenRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTokenRequest proto.InternalMessageInfo

func (m *CreateTokenRequest) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *CreateTokenRequest) GetCapabilities() []TokenCapability {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

func (m *CreateTokenRequest) GetValidDuration() *Timestamp {
	if m != nil {
		return m.ValidDuration
	}
	return nil
}

type CreateTokenResponse struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *CreateTokenResponse) Reset()      { *m = CreateTokenResponse{} }
func (*CreateTokenResponse) ProtoMessage() {}
func (*CreateTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{29}
}
func (m *CreateTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTokenResponse.Merge(m, src)
}
func (m *CreateTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTokenResponse proto.InternalMessageInfo

func (m *CreateTokenResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type ControlRegister struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *ControlRegister) Reset()      { *m = ControlRegister{} }
func (*ControlRegister) ProtoMessage() {}
func (*ControlRegister) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{30}
}
func (m *ControlRegister) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ControlRegister) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ControlRegister.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ControlRegister) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlRegister.Merge(m, src)
}
func (m *ControlRegister) XXX_Size() int {
	return m.Size()
}
func (m *ControlRegister) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlRegister.DiscardUnknown(m)
}

var xxx_messageInfo_ControlRegister proto.InternalMessageInfo

func (m *ControlRegister) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type ControlToken struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *ControlToken) Reset()      { *m = ControlToken{} }
func (*ControlToken) ProtoMessage() {}
func (*ControlToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{31}
}
func (m *ControlToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ControlToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ControlToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ControlToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlToken.Merge(m, src)
}
func (m *ControlToken) XXX_Size() int {
	return m.Size()
}
func (m *ControlToken) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlToken.DiscardUnknown(m)
}

var xxx_messageInfo_ControlToken proto.InternalMessageInfo

func (m *ControlToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type TokenInfo struct {
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (m *TokenInfo) Reset()      { *m = TokenInfo{} }
func (*TokenInfo) ProtoMessage() {}
func (*TokenInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{32}
}
func (m *TokenInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenInfo.Merge(m, src)
}
func (m *TokenInfo) XXX_Size() int {
	return m.Size()
}
func (m *TokenInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TokenInfo proto.InternalMessageInfo

func (m *TokenInfo) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

type ListAccountsRequest struct {
	Limit  int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Marker []byte `protobuf:"bytes,2,opt,name=marker,proto3" json:"marker,omitempty"`
}

func (m *ListAccountsRequest) Reset()      { *m = ListAccountsRequest{} }
func (*ListAccountsRequest) ProtoMessage() {}
func (*ListAccountsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{33}
}
func (m *ListAccountsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAccountsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAccountsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAccountsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAccountsRequest.Merge(m, src)
}
func (m *ListAccountsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListAccountsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAccountsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListAccountsRequest proto.InternalMessageInfo

func (m *ListAccountsRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListAccountsRequest) GetMarker() []byte {
	if m != nil {
		return m.Marker
	}
	return nil
}

type ListAccountsResponse struct {
	Accounts   []*Account `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
	NextMarker []byte     `protobuf:"bytes,2,opt,name=next_marker,json=nextMarker,proto3" json:"next_marker,omitempty"`
}

func (m *ListAccountsResponse) Reset()      { *m = ListAccountsResponse{} }
func (*ListAccountsResponse) ProtoMessage() {}
func (*ListAccountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c5120591600887d, []int{34}
}
func (m *ListAccountsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAccountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAccountsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAccountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAccountsResponse.Merge(m, src)
}
func (m *ListAccountsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListAccountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAccountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListAccountsResponse proto.InternalMessageInfo

func (m *ListAccountsResponse) GetAccounts() []*Account {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *ListAccountsResponse) GetNextMarker() []byte {
	if m != nil {
		return m.NextMarker
	}
	return nil
}

func init() {
	proto.RegisterType((*ServiceRequest)(nil), "pb.ServiceRequest")
	proto.RegisterType((*ServiceResponse)(nil), "pb.ServiceResponse")
	proto.RegisterType((*LabelLink)(nil), "pb.LabelLink")
	proto.RegisterType((*LabelLinks)(nil), "pb.LabelLinks")
	proto.RegisterType((*ServiceRoute)(nil), "pb.ServiceRoute")
	proto.RegisterType((*AccountServices)(nil), "pb.AccountServices")
	proto.RegisterType((*ActivityEntry)(nil), "pb.ActivityEntry")
	proto.RegisterType((*ConfigRequest)(nil), "pb.ConfigRequest")
	proto.RegisterType((*ConfigResponse)(nil), "pb.ConfigResponse")
	proto.RegisterType((*HubChange)(nil), "pb.HubChange")
	proto.RegisterType((*CentralActivity)(nil), "pb.CentralActivity")
	proto.RegisterType((*HubActivity)(nil), "pb.HubActivity")
	proto.RegisterType((*HubActivity_HubRegistration)(nil), "pb.HubActivity.HubRegistration")
	proto.RegisterType((*HubActivity_HubStats)(nil), "pb.HubActivity.HubStats")
	proto.RegisterType((*HubInfo)(nil), "pb.HubInfo")
	proto.RegisterType((*ListOfHubs)(nil), "pb.ListOfHubs")
	proto.RegisterType((*HubSync)(nil), "pb.HubSync")
	proto.RegisterType((*HubSyncResponse)(nil), "pb.HubSyncResponse")
	proto.RegisterType((*HubRegisterRequest)(nil), "pb.HubRegisterRequest")
	proto.RegisterType((*HubRegisterResponse)(nil), "pb.HubRegisterResponse")
	proto.RegisterType((*HubDisconnectRequest)(nil), "pb.HubDisconnectRequest")
	proto.RegisterType((*ServiceTokenRequest)(nil), "pb.ServiceTokenRequest")
	proto.RegisterType((*ServiceTokenResponse)(nil), "pb.ServiceTokenResponse")
	proto.RegisterType((*ListServicesRequest)(nil), "pb.ListServicesRequest")
	proto.RegisterType((*ListServicesResponse)(nil), "pb.ListServicesResponse")
	proto.RegisterType((*Service)(nil), "pb.Service")
	proto.RegisterType((*AddAccountRequest)(nil), "pb.AddAccountRequest")
	proto.RegisterType((*AddLabelLinkRequest)(nil), "pb.AddLabelLinkRequest")
	proto.RegisterType((*Noop)(nil), "pb.Noop")
	proto.RegisterType((*RemoveLabelLinkRequest)(nil), "pb.RemoveLabelLinkRequest")
	proto.RegisterType((*CreateTokenRequest)(nil), "pb.CreateTokenRequest")
	proto.RegisterType((*CreateTokenResponse)(nil), "pb.CreateTokenResponse")
	proto.RegisterType((*ControlRegister)(nil), "pb.ControlRegister")
	proto.RegisterType((*ControlToken)(nil), "pb.ControlToken")
	proto.RegisterType((*TokenInfo)(nil), "pb.TokenInfo")
	proto.RegisterType((*ListAccountsRequest)(nil), "pb.ListAccountsRequest")
	proto.RegisterType((*ListAccountsResponse)(nil), "pb.ListAccountsResponse")
}

func init() { proto.RegisterFile("control.proto", fileDescriptor_0c5120591600887d) }

var fileDescriptor_0c5120591600887d = []byte{
	// 1880 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xcd, 0x93, 0x1b, 0x47,
	0x15, 0xd7, 0x48, 0x2b, 0xad, 0xf4, 0x24, 0xad, 0xbc, 0xad, 0x8d, 0x2d, 0x14, 0xd0, 0x9a, 0x8e,
	0x89, 0x4d, 0x62, 0xaf, 0xc3, 0xae, 0x31, 0x1f, 0x65, 0x3e, 0x64, 0x99, 0x64, 0x17, 0xaf, 0x43,
	0x6a, 0xd6, 0xc9, 0x75, 0xe8, 0x99, 0xe9, 0x95, 0xa6, 0x76, 0x34, 0x23, 0xa6, 0x7b, 0x76, 0x11,
	0x07, 0x8a, 0xe2, 0x04, 0x37, 0x0e, 0x5c, 0xe0, 0xc6, 0x8d, 0xe2, 0x94, 0x3f, 0x23, 0x37, 0x7c,
	0xa2, 0x72, 0xa0, 0x28, 0xbc, 0xbe, 0x70, 0xcc, 0x9f, 0x40, 0xf5, 0xc7, 0x7c, 0x69, 0x65, 0xd9,
	0x71, 0x95, 0xab, 0x72, 0x53, 0xbf, 0xf7, 0x7b, 0xaf, 0xdf, 0x7b, 0xfd, 0xbe, 0x46, 0xd0, 0x76,
	0xc2, 0x80, 0x47, 0xa1, 0xbf, 0x33, 0x8b, 0x42, 0x1e, 0xa2, 0xf2, 0xcc, 0xee, 0x77, 0x5c, 0x7a,
	0xcc, 0x6e, 0x8f, 0xc3, 0x71, 0xa8, 0x88, 0xfd, 0xfa, 0xc9, 0xa9, 0xfe, 0xd5, 0xf4, 0x89, 0x4d,
	0x35, 0xb6, 0xdf, 0x26, 0x8e, 0x13, 0xc6, 0x01, 0xd7, 0x47, 0x88, 0x7d, 0xcf, 0x4d, 0x70, 0x3c,
	0x3c, 0xa1, 0x81, 0x3e, 0x74, 0xb8, 0x37, 0xa5, 0x8c, 0x93, 0xe9, 0x2c, 0x41, 0x1e, 0xfb, 0xe1,
	0x59, 0xa2, 0x24, 0xa0, 0xfc, 0x2c, 0x8c, 0x4e, 0xd4, 0x11, 0xff, 0xd3, 0x80, 0x8d, 0x23, 0x1a,
	0x9d, 0x7a, 0x0e, 0x35, 0xe9, 0xaf, 0x62, 0xca, 0x38, 0xfa, 0x16, 0xac, 0xeb, 0x8b, 0x7a, 0xc6,
	0x55, 0xe3, 0x46, 0x73, 0xb7, 0xb9, 0x33, 0xb3, 0x77, 0x86, 0x8a, 0x64, 0x26, 0x3c, 0xd4, 0x87,
	0xca, 0x24, 0xb6, 0x7b, 0x65, 0x09, 0xa9, 0x0b, 0xc8, 0xc7, 0x87, 0x07, 0x0f, 0x4c, 0x41, 0x44,
	0x3d, 0x28, 0x7b, 0x6e, 0xaf, 0xb2, 0xc0, 0x2a, 0x7b, 0x2e, 0x42, 0xb0, 0xc6, 0xe7, 0x33, 0xda,
	0x5b, 0xbb, 0x6a, 0xdc, 0x68, 0x98, 0xf2, 0x37, 0xba, 0x06, 0x35, 0xe9, 0x26, 0xeb, 0x55, 0xa5,
	0x44, 0x4b, 0x48, 0x1c, 0x0a, 0xca, 0x11, 0xe5, 0xa6, 0xe6, 0xa1, 0xb7, 0xa1, 0x3e, 0xa5, 0x9c,
	0xb8, 0x84, 0x93, 0x5e, 0xed, 0x6a, 0xe5, 0x46, 0x73, 0x17, 0x04, 0xee, 0xe1, 0x27, 0x1f, 0x11,
	0x2f, 0x32, 0x53, 0x1e, 0xde, 0x84, 0x4e, 0xea, 0x10, 0x9b, 0x85, 0x01, 0xa3, 0xf8, 0x1f, 0x06,
	0x34, 0xa4, 0xbe, 0x43, 0x2f, 0x38, 0x79, 0x59, 0xff, 0x32, 0xab, 0xca, 0x2b, 0xac, 0xba, 0x06,
	0x35, 0x4e, 0xa2, 0x31, 0xe5, 0xda, 0xdb, 0x05, 0x94, 0xe2, 0xa1, 0x77, 0xa0, 0xe6, 0x7b, 0x53,
	0x8f, 0x33, 0xe9, 0x77, 0x73, 0x17, 0xe5, 0x6e, 0xdc, 0x39, 0x94, 0x1c, 0x53, 0x23, 0xf0, 0x3d,
	0x80, 0xd4, 0x56, 0x86, 0x76, 0x40, 0xa5, 0x80, 0xe5, 0x8b, 0x63, 0xcf, 0x90, 0x8e, 0xb7, 0xd3,
	0x4b, 0x04, 0xc8, 0x04, 0x3f, 0xc5, 0xe3, 0xdf, 0x42, 0x2b, 0xf1, 0x3e, 0x8c, 0x39, 0x4d, 0x5e,
	0xc9, 0x78, 0xfe, 0x2b, 0x95, 0x57, 0xbc, 0x52, 0x65, 0xe9, 0x2b, 0xad, 0x3d, 0x3f, 0x1e, 0xf8,
	0x18, 0x3a, 0xda, 0x2f, 0x6d, 0x06, 0x7b, 0xd9, 0x78, 0xdf, 0x84, 0x3a, 0xd3, 0x22, 0xbd, 0xb2,
	0x74, 0xf3, 0x92, 0xc0, 0xe5, 0xbd, 0x31, 0x53, 0x04, 0xe6, 0xd0, 0x1e, 0x3a, 0xdc, 0x3b, 0xf5,
	0xf8, 0xfc, 0x67, 0x01, 0x8f, 0xe6, 0xe8, 0x0e, 0x34, 0x23, 0x81, 0xb1, 0x88, 0xeb, 0x52, 0x57,
	0xdf, 0xd4, 0xcd, 0xdd, 0x94, 0xd8, 0x63, 0x82, 0xc4, 0x0d, 0x05, 0x0c, 0xdd, 0x82, 0xb6, 0x92,
	0x8a, 0xe8, 0x34, 0x3c, 0xa5, 0x17, 0xa3, 0xd1, 0x92, 0x6c, 0x53, 0x71, 0xf1, 0x9f, 0x0d, 0x68,
	0x8f, 0xc2, 0xe0, 0xd8, 0x1b, 0x67, 0xc5, 0xd2, 0x60, 0x9c, 0xd8, 0x3e, 0xb5, 0x3c, 0xf7, 0x42,
	0x94, 0xeb, 0x8a, 0x75, 0xe0, 0xa2, 0x6f, 0x43, 0xd3, 0x0b, 0x18, 0x27, 0x81, 0x23, 0x81, 0x8b,
	0xb7, 0x40, 0xc2, 0x3c, 0x70, 0xd1, 0x77, 0xa0, 0xe1, 0x87, 0x0e, 0xe1, 0x5e, 0x18, 0xb0, 0x5e,
	0x45, 0x06, 0x42, 0xba, 0xf1, 0xa1, 0xaa, 0xdb, 0x43, 0xcd, 0x33, 0x33, 0x14, 0x7e, 0x66, 0xc0,
	0x46, 0x62, 0x96, 0x4a, 0x79, 0x74, 0x05, 0xd6, 0xb9, 0xcf, 0xac, 0x13, 0x3a, 0x97, 0x56, 0xb5,
	0xcc, 0x1a, 0xf7, 0xd9, 0x43, 0x3a, 0x47, 0x5f, 0x83, 0xba, 0x60, 0x38, 0x34, 0xe2, 0xd2, 0x8c,
	0x96, 0x29, 0x80, 0x23, 0x1a, 0x71, 0xf4, 0x26, 0x34, 0x64, 0x1b, 0xb1, 0x66, 0xb1, 0x2d, 0x9f,
	0xbe, 0x65, 0xd6, 0x25, 0xe1, 0xa3, 0xd8, 0x46, 0x18, 0xda, 0x6c, 0xcf, 0x22, 0x8e, 0x43, 0x99,
	0x52, 0xab, 0x2a, 0xb8, 0xc9, 0xf6, 0x86, 0x92, 0x26, 0x74, 0x2b, 0x0c, 0xa3, 0x4e, 0x44, 0xb9,
	0xc4, 0x54, 0x13, 0xcc, 0x91, 0xa4, 0x09, 0xcc, 0x9b, 0xd0, 0x60, 0x7b, 0x96, 0x1d, 0x3b, 0x27,
	0x94, 0xf7, 0x6a, 0x92, 0x5f, 0x67, 0x7b, 0xf7, 0xe5, 0x59, 0x30, 0xbd, 0x29, 0x19, 0x53, 0x8b,
	0x93, 0x71, 0x6f, 0x5d, 0x31, 0x25, 0xe1, 0x31, 0x19, 0xe3, 0x47, 0xd0, 0xd8, 0x8f, 0xed, 0xd1,
	0x84, 0x04, 0x63, 0x8a, 0xb6, 0xa1, 0x16, 0xfa, 0xee, 0xb2, 0xa0, 0x57, 0x43, 0xdf, 0x3d, 0x70,
	0x05, 0x20, 0xa0, 0x67, 0xcb, 0x82, 0x5d, 0x0d, 0xe8, 0xd9, 0x81, 0x8b, 0xff, 0x6d, 0x40, 0x67,
	0x44, 0x03, 0x1e, 0x11, 0x3f, 0xc9, 0x24, 0xf4, 0x63, 0xb8, 0xa4, 0xd3, 0xd1, 0x4a, 0x73, 0xd1,
	0xc8, 0x9e, 0x60, 0x31, 0x93, 0x3a, 0x64, 0x21, 0xd5, 0xdf, 0x82, 0x76, 0xa4, 0x12, 0xc3, 0x62,
	0x9c, 0x70, 0xd5, 0x3a, 0xea, 0x66, 0x4b, 0x13, 0x8f, 0x04, 0x0d, 0xdd, 0x85, 0x8e, 0xb0, 0x2c,
	0x5f, 0xd6, 0xaa, 0x77, 0x6c, 0x14, 0xca, 0x9a, 0x99, 0xed, 0x80, 0x9e, 0xe5, 0x5a, 0xc1, 0x4d,
	0x80, 0x49, 0x6c, 0x5b, 0x8e, 0x0c, 0x80, 0x2e, 0x42, 0xd9, 0x09, 0xd2, 0xa8, 0x98, 0x8d, 0x49,
	0xf2, 0x13, 0xff, 0xbe, 0x0a, 0xcd, 0xfd, 0xd8, 0x4e, 0x5d, 0xfb, 0x3e, 0xac, 0x0b, 0xe9, 0x88,
	0x8e, 0x75, 0xc4, 0xb6, 0xb5, 0x68, 0x82, 0x10, 0xbf, 0x4d, 0x3a, 0xf6, 0x18, 0x8f, 0x54, 0x82,
	0xd5, 0x26, 0x92, 0x80, 0xde, 0x86, 0x75, 0x46, 0x03, 0x6e, 0x11, 0xae, 0x43, 0x29, 0x2f, 0x7d,
	0x9c, 0xcc, 0x18, 0xb3, 0x26, 0xb8, 0x43, 0x8e, 0x76, 0xa0, 0xaa, 0x9c, 0x56, 0xde, 0xf4, 0x96,
	0xe8, 0x97, 0x01, 0x30, 0x15, 0x0c, 0x61, 0x58, 0x13, 0x73, 0xa9, 0xb7, 0x26, 0x03, 0x2c, 0x9d,
	0x7f, 0xdf, 0x0f, 0xcf, 0x4c, 0xea, 0x84, 0x91, 0x6b, 0x4a, 0x5e, 0xff, 0x8f, 0x06, 0x74, 0x16,
	0xec, 0x5a, 0xd9, 0xd2, 0xae, 0x03, 0xe8, 0x72, 0x5c, 0x36, 0x9b, 0x74, 0xa9, 0xee, 0xc7, 0xf6,
	0x2b, 0x54, 0x59, 0xff, 0xd3, 0x32, 0xd4, 0x13, 0x1f, 0xd0, 0xbb, 0xb0, 0x49, 0xc6, 0x22, 0x2a,
	0x4e, 0x18, 0x04, 0xd4, 0x51, 0x7a, 0x84, 0x49, 0x15, 0xf3, 0x92, 0x64, 0x8c, 0x32, 0xba, 0x48,
	0x0b, 0x9d, 0x29, 0xcc, 0x62, 0x94, 0x06, 0xd2, 0xb0, 0x8a, 0xd9, 0x4a, 0x88, 0x47, 0x94, 0x06,
	0xe8, 0x3a, 0x74, 0x52, 0x90, 0x43, 0x9c, 0x09, 0x55, 0x03, 0xb4, 0x62, 0x6e, 0x24, 0xe4, 0x91,
	0xa4, 0xa2, 0x6f, 0x42, 0x4b, 0xf1, 0x2d, 0x7b, 0xce, 0xa9, 0x6a, 0xc7, 0x15, 0xb3, 0xa9, 0x68,
	0xf7, 0x05, 0x09, 0x8d, 0xe0, 0xb2, 0x4f, 0x44, 0x12, 0xc6, 0xb2, 0x36, 0x8f, 0x63, 0xdf, 0x8a,
	0x67, 0x2e, 0xe1, 0x54, 0x4f, 0xd8, 0x85, 0x17, 0xdc, 0x12, 0xe0, 0xa3, 0x14, 0xfb, 0xb1, 0x84,
	0xa2, 0x21, 0xbc, 0x21, 0x95, 0x10, 0xce, 0xe9, 0x74, 0xc6, 0xa9, 0x9b, 0xe8, 0xa8, 0x2d, 0xd3,
	0xd1, 0x15, 0xd8, 0x61, 0x02, 0x55, 0x2a, 0xf0, 0x27, 0xb0, 0xbe, 0x1f, 0xdb, 0x07, 0xc1, 0x71,
	0xa8, 0x87, 0x8d, 0xb1, 0x64, 0xd8, 0x14, 0x9e, 0xa2, 0xfc, 0x52, 0x0d, 0xef, 0x16, 0xc0, 0xa1,
	0xc7, 0xf8, 0x2f, 0x8e, 0xf7, 0x63, 0x9b, 0xa1, 0x6d, 0x58, 0x9b, 0xc4, 0x76, 0x52, 0xa9, 0x4d,
	0x9d, 0x77, 0xe2, 0x56, 0x53, 0x32, 0xf0, 0x6f, 0xa4, 0x19, 0x47, 0xf3, 0xc0, 0x59, 0x61, 0x46,
	0xa1, 0x93, 0x97, 0x9f, 0xdb, 0xc9, 0x77, 0x72, 0x63, 0x4a, 0xe5, 0x0d, 0xca, 0x8f, 0x29, 0x55,
	0xe8, 0xb9, 0x41, 0x75, 0x57, 0x26, 0xb0, 0xb8, 0x3b, 0xed, 0xcd, 0x6f, 0x41, 0x5b, 0xb3, 0xad,
	0x6c, 0x2c, 0x56, 0xcc, 0x96, 0x26, 0x8e, 0x04, 0x0d, 0xff, 0xc5, 0x00, 0x94, 0x66, 0x3e, 0x8d,
	0xbe, 0x52, 0xf3, 0xe6, 0x03, 0xe8, 0x16, 0x4c, 0xd3, 0x7e, 0xbd, 0x07, 0x2d, 0xbd, 0xdc, 0x5a,
	0x62, 0x03, 0xd5, 0xe6, 0x2d, 0xe4, 0x49, 0x53, 0x43, 0x04, 0x05, 0x4f, 0x60, 0x6b, 0x3f, 0xb6,
	0x1f, 0x78, 0x4c, 0x57, 0xd1, 0x6b, 0xf3, 0x12, 0xef, 0x41, 0x57, 0x3f, 0xd1, 0x63, 0x31, 0xd1,
	0x92, 0x8b, 0xbe, 0x0e, 0x8d, 0x80, 0x4c, 0x29, 0x9b, 0x11, 0x47, 0xd9, 0xdb, 0x30, 0x33, 0x02,
	0xbe, 0x09, 0x5b, 0x45, 0x21, 0xed, 0xe8, 0x16, 0x54, 0xe5, 0x5c, 0xd4, 0x12, 0xea, 0x80, 0xef,
	0x41, 0x57, 0x24, 0x65, 0x3a, 0x1d, 0xbe, 0xd4, 0x3a, 0x8d, 0x7f, 0x02, 0x5b, 0x45, 0x69, 0x7d,
	0xd7, 0xf5, 0x5c, 0xbe, 0xe5, 0x12, 0x3c, 0xc9, 0xb7, 0x2c, 0xd1, 0xfe, 0x66, 0xc0, 0xba, 0xa6,
	0xae, 0xc8, 0xf2, 0x55, 0x5b, 0xfb, 0x2b, 0x6f, 0x7d, 0x85, 0xdd, 0xbc, 0xba, 0x62, 0x37, 0x3f,
	0x86, 0xcd, 0xa1, 0xeb, 0x26, 0xbe, 0x7f, 0xb9, 0xef, 0x8d, 0x6c, 0x87, 0x2e, 0xbf, 0x70, 0x87,
	0xfe, 0x83, 0x01, 0xdd, 0xa1, 0xeb, 0x66, 0x2b, 0xb2, 0xbe, 0x2a, 0xf3, 0xc6, 0x58, 0xe1, 0x4d,
	0xce, 0xa0, 0xf2, 0xea, 0x0f, 0x84, 0x17, 0xaf, 0xfe, 0xb8, 0x06, 0x6b, 0x1f, 0x86, 0xe1, 0x0c,
	0x53, 0xb8, 0xac, 0xb6, 0xc8, 0xd7, 0x6a, 0x14, 0xfe, 0xd4, 0x00, 0x34, 0x8a, 0x28, 0xe1, 0xc5,
	0x3c, 0x7f, 0xc9, 0x18, 0xff, 0x48, 0x8c, 0x96, 0x19, 0xb1, 0x3d, 0xdf, 0xe3, 0x1e, 0x2d, 0x74,
	0x63, 0xa9, 0x6e, 0x94, 0x30, 0xe7, 0xf7, 0xd7, 0x3e, 0xfb, 0xcf, 0x76, 0xc9, 0x2c, 0xc0, 0xd1,
	0x1d, 0xd8, 0x38, 0x25, 0xbe, 0xe7, 0x5a, 0x6e, 0xac, 0x66, 0xb5, 0x8e, 0xcc, 0x42, 0x0b, 0x68,
	0x4b, 0xd0, 0x03, 0x8d, 0xc1, 0xef, 0x42, 0xb7, 0x60, 0xf1, 0xca, 0x22, 0xbb, 0x0d, 0x9d, 0x91,
	0x6a, 0x20, 0x49, 0xfb, 0x79, 0x41, 0x0d, 0x5f, 0x83, 0x96, 0x16, 0x90, 0xea, 0x9f, 0xa3, 0xf6,
	0x1d, 0x68, 0x48, 0xb6, 0x1c, 0x55, 0xdf, 0x00, 0x98, 0xc5, 0xb6, 0xef, 0x39, 0xb9, 0xf5, 0xb9,
	0xa1, 0x28, 0x0f, 0xe9, 0x1c, 0x8f, 0x54, 0x9d, 0xeb, 0xe0, 0xa5, 0x75, 0xbe, 0x05, 0x55, 0x99,
	0x7d, 0x52, 0xa0, 0x6a, 0xaa, 0x03, 0xba, 0x0c, 0xb5, 0x29, 0x89, 0x4e, 0x68, 0xa4, 0x97, 0x6d,
	0x7d, 0xc2, 0xbf, 0x54, 0xe5, 0x9e, 0x29, 0xc9, 0xca, 0x3d, 0x19, 0xf7, 0xf9, 0x72, 0x4f, 0x5e,
	0x2a, 0x65, 0xa2, 0x6d, 0x68, 0x06, 0xf4, 0xd7, 0xdc, 0x2a, 0x68, 0x07, 0x41, 0x7a, 0x24, 0x29,
	0xbb, 0x7f, 0x5d, 0x4b, 0x43, 0x95, 0xee, 0xa7, 0xdf, 0x03, 0x18, 0xba, 0x6e, 0xd2, 0x25, 0x96,
	0x0c, 0xae, 0x7e, 0xb7, 0x40, 0xd3, 0xdf, 0xcf, 0x25, 0xf4, 0x43, 0x68, 0xab, 0xec, 0x7d, 0x05,
	0xd9, 0x11, 0xb4, 0xf2, 0x9d, 0x0d, 0x5d, 0x91, 0xf9, 0x7d, 0xb1, 0x53, 0xf6, 0x7b, 0x17, 0x19,
	0xa9, 0x92, 0xbb, 0xd0, 0x7c, 0x9f, 0x72, 0x67, 0xa2, 0x3e, 0x73, 0xd0, 0xa6, 0x80, 0x16, 0xbe,
	0xc4, 0xfa, 0x28, 0x4f, 0x4a, 0xe5, 0xee, 0xc1, 0xc6, 0x11, 0x8f, 0x28, 0x99, 0xa6, 0x8b, 0x70,
	0x67, 0x61, 0x2f, 0x55, 0x66, 0x2f, 0x7c, 0x09, 0xe0, 0xd2, 0x0d, 0xe3, 0x3d, 0x03, 0xdd, 0x82,
	0x75, 0x31, 0xb9, 0xc5, 0xc2, 0x98, 0xac, 0x15, 0xe2, 0xac, 0x44, 0x16, 0xc6, 0x3a, 0x2e, 0xa1,
	0xef, 0x42, 0xbb, 0x30, 0xce, 0x50, 0xb2, 0x03, 0x5f, 0x98, 0x70, 0x7d, 0xd9, 0x7a, 0x65, 0x63,
	0x28, 0x89, 0xe2, 0x1c, 0xfa, 0xbe, 0x5c, 0x65, 0x52, 0x72, 0x7f, 0x23, 0x09, 0x86, 0x5a, 0x72,
	0x70, 0x09, 0xfd, 0x1c, 0xba, 0x5a, 0x3a, 0x3f, 0x94, 0x54, 0x38, 0x97, 0xcc, 0x36, 0x15, 0xce,
	0x65, 0xf3, 0x0b, 0x97, 0x76, 0xff, 0x55, 0x81, 0x4d, 0x9d, 0x1c, 0x8f, 0x48, 0x40, 0xc6, 0x74,
	0x4a, 0x03, 0x8e, 0xf6, 0xa0, 0x9e, 0x56, 0x55, 0x57, 0x87, 0x33, 0x5f, 0x6a, 0xfd, 0x4b, 0x39,
	0xa2, 0x54, 0x89, 0x4b, 0xe8, 0xb6, 0xcc, 0x29, 0x9d, 0xa0, 0xe8, 0x0d, 0x99, 0xad, 0x8b, 0x3d,
	0xbe, 0xe0, 0xee, 0x1e, 0xb4, 0xf2, 0xbd, 0x59, 0x39, 0xb0, 0xa4, 0x5b, 0x17, 0x84, 0x7e, 0x00,
	0x9d, 0x85, 0xf6, 0x89, 0xfa, 0x82, 0xbd, 0xbc, 0xa7, 0x16, 0x44, 0x7f, 0x0a, 0xcd, 0x5c, 0x7f,
	0x41, 0x97, 0xa5, 0x0f, 0x17, 0x5a, 0x64, 0xff, 0xca, 0x05, 0x7a, 0xfa, 0xae, 0x77, 0xa0, 0x7d,
	0xc0, 0x58, 0x2c, 0x3e, 0x1c, 0x94, 0x8e, 0xec, 0x99, 0x56, 0x48, 0xed, 0xc0, 0xe6, 0x07, 0x94,
	0x3f, 0xd6, 0x1f, 0xd0, 0xaa, 0x79, 0xe4, 0x24, 0xdb, 0x69, 0x57, 0x15, 0x4d, 0x27, 0xab, 0x93,
	0xa4, 0x25, 0x64, 0x75, 0xb2, 0xd0, 0x69, 0xb2, 0x3a, 0x59, 0xec, 0x1e, 0xb8, 0x74, 0xff, 0xce,
	0x93, 0xa7, 0x83, 0xd2, 0xe7, 0x4f, 0x07, 0xa5, 0x2f, 0x9e, 0x0e, 0x8c, 0xdf, 0x9d, 0x0f, 0x8c,
	0xbf, 0x9f, 0x0f, 0x8c, 0xcf, 0xce, 0x07, 0xc6, 0x93, 0xf3, 0x81, 0xf1, 0xdf, 0xf3, 0x81, 0xf1,
	0xbf, 0xf3, 0x41, 0xe9, 0x8b, 0xf3, 0x81, 0xf1, 0xa7, 0x67, 0x83, 0xd2, 0x93, 0x67, 0x83, 0xd2,
	0xe7, 0xcf, 0x06, 0x25, 0xbb, 0x26, 0xff, 0x0c, 0xdc, 0xfb, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x58, 0x5f, 0x88, 0x84, 0x9d, 0x14, 0x00, 0x00,
}

func (this *ServiceRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceRequest)
	if !ok {
		that2, ok := that.(ServiceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Account.Equal(that1.Account) {
		return false
	}
	if !this.Hub.Equal(that1.Hub) {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.Labels.Equal(that1.Labels) {
		return false
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return false
	}
	for i := range this.Metadata {
		if !this.Metadata[i].Equal(that1.Metadata[i]) {
			return false
		}
	}
	return true
}
func (this *ServiceResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceResponse)
	if !ok {
		that2, ok := that.(ServiceResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *LabelLink) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LabelLink)
	if !ok {
		that2, ok := that.(LabelLink)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Account.Equal(that1.Account) {
		return false
	}
	if !this.Labels.Equal(that1.Labels) {
		return false
	}
	if !this.Target.Equal(that1.Target) {
		return false
	}
	if !this.Limits.Equal(that1.Limits) {
		return false
	}
	return true
}
func (this *LabelLinks) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LabelLinks)
	if !ok {
		that2, ok := that.(LabelLinks)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.LabelLinks) != len(that1.LabelLinks) {
		return false
	}
	for i := range this.LabelLinks {
		if !this.LabelLinks[i].Equal(that1.LabelLinks[i]) {
			return false
		}
	}
	return true
}
func (this *ServiceRoute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceRoute)
	if !ok {
		that2, ok := that.(ServiceRoute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Hub.Equal(that1.Hub) {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.Labels.Equal(that1.Labels) {
		return false
	}
	return true
}
func (this *AccountServices) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AccountServices)
	if !ok {
		that2, ok := that.(AccountServices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Account.Equal(that1.Account) {
		return false
	}
	if len(this.Services) != len(that1.Services) {
		return false
	}
	for i := range this.Services {
		if !this.Services[i].Equal(that1.Services[i]) {
			return false
		}
	}
	return true
}
func (this *ActivityEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivityEntry)
	if !ok {
		that2, ok := that.(ActivityEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RouteAdded.Equal(that1.RouteAdded) {
		return false
	}
	if !this.RouteRemoved.Equal(that1.RouteRemoved) {
		return false
	}
	return true
}
func (this *ConfigRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConfigRequest)
	if !ok {
		that2, ok := that.(ConfigRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StableId.Equal(that1.StableId) {
		return false
	}
	if !this.InstanceId.Equal(that1.InstanceId) {
		return false
	}
	if len(this.Locations) != len(that1.Locations) {
		return false
	}
	for i := range this.Locations {
		if !this.Locations[i].Equal(that1.Locations[i]) {
			return false
		}
	}
	return true
}
func (this *ConfigResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConfigResponse)
	if !ok {
		that2, ok := that.(ConfigResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.TlsKey, that1.TlsKey) {
		return false
	}
	if !bytes.Equal(this.TlsCert, that1.TlsCert) {
		return false
	}
	if !bytes.Equal(this.TokenPub, that1.TokenPub) {
		return false
	}
	if this.S3AccessKey != that1.S3AccessKey {
		return false
	}
	if this.S3SecretKey != that1.S3SecretKey {
		return false
	}
	if this.S3Bucket != that1.S3Bucket {
		return false
	}
	if this.ImageTag != that1.ImageTag {
		return false
	}
	return true
}
func (this *HubChange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HubChange)
	if !ok {
		that2, ok := that.(HubChange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OldId.Equal(that1.OldId) {
		return false
	}
	if !this.NewId.Equal(that1.NewId) {
		return false
	}
	return true
}
func (this *CentralActivity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CentralActivity)
	if !ok {
		that2, ok := that.(CentralActivity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AccountServices) != len(that1.AccountServices) {
		return false
	}
	for i := range this.AccountServices {
		if !this.AccountServices[i].Equal(that1.AccountServices[i]) {
			return false
		}
	}
	if this.RequestStats != that1.RequestStats {
		return false
	}
	if !this.NewLabelLinks.Equal(that1.NewLabelLinks) {
		return false
	}
	if !this.HubChange.Equal(that1.HubChange) {
		return false
	}
	return true
}
func (this *HubActivity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HubActivity)
	if !ok {
		that2, ok := that.(HubActivity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HubReg.Equal(that1.HubReg) {
		return false
	}
	if !this.SentAt.Equal(that1.SentAt) {
		return false
	}
	if !this.Stats.Equal(that1.Stats) {
		return false
	}
	if len(this.Flow) != len(that1.Flow) {
		return false
	}
	for i := range this.Flow {
		if !this.Flow[i].Equal(that1.Flow[i]) {
			return false
		}
	}
	return true
}
func (this *HubActivity_HubRegistration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HubActivity_HubRegistration)
	if !ok {
		that2, ok := that.(HubActivity_HubRegistration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Hub.Equal(that1.Hub) {
		return false
	}
	if !this.StableHub.Equal(that1.StableHub) {
		return false
	}
	if len(this.Locations) != len(that1.Locations) {
		return false
	}
	for i := range this.Locations {
		if !this.Locations[i].Equal(that1.Locations[i]) {
			return false
		}
	}
	return true
}
func (this *HubActivity_HubStats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HubActivity_HubStats)
	if !ok {
		that2, ok := that.(HubActivity_HubStats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AgentConnections != that1.AgentConnections {
		return false
	}
	if this.AccountsSeen != that1.AccountsSeen {
		return false
	}
	if this.AccountsCached != that1.AccountsCached {
		return false
	}
	if this.CachedBytes != that1.CachedBytes {
		return false
	}
	if !this.LastSuccessfulUpdate.Equal(that1.LastSuccessfulUpdate) {
		return false
	}
	if !this.LastAttemptedUpdate.Equal(that1.LastAttemptedUpdate) {
		return false
	}
	return true
}
func (this *HubInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HubInfo)
	if !ok {
		that2, ok := that.(HubInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if len(this.Locations) != len(that1.Locations) {
		return false
	}
	for i := range this.Locations {
		if !this.Locations[i].Equal(that1.Locations[i]) {
			return false
		}
	}
	return true
}
func (this *ListOfHubs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListOfHubs)
	if !ok {
		that2, ok := that.(ListOfHubs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Hubs) != len(that1.Hubs) {
		return false
	}
	for i := range this.Hubs {
		if !this.Hubs[i].Equal(that1.Hubs[i]) {
			return false
		}
	}
	return true
}
func (this *HubSync) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HubSync)
	if !ok {
		that2, ok := that.(HubSync)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if !this.StableId.Equal(that1.StableId) {
		return false
	}
	if len(this.Services) != len(that1.Services) {
		return false
	}
	for i := range this.Services {
		if !this.Services[i].Equal(that1.Services[i]) {
			return false
		}
	}
	return true
}
func (this *HubSyncResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HubSyncResponse)
	if !ok {
		that2, ok := that.(HubSyncResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServiceCount != that1.ServiceCount {
		return false
	}
	return true
}
func (this *HubRegisterRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HubRegisterRequest)
	if !ok {
		that2, ok := that.(HubRegisterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StableId.Equal(that1.StableId) {
		return false
	}
	if !this.InstanceId.Equal(that1.InstanceId) {
		return false
	}
	if len(this.Locations) != len(that1.Locations) {
		return false
	}
	for i := range this.Locations {
		if !this.Locations[i].Equal(that1.Locations[i]) {
			return false
		}
	}
	return true
}
func (this *HubRegisterResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HubRegisterResponse)
	if !ok {
		that2, ok := that.(HubRegisterResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ControlTime.Equal(that1.ControlTime) {
		return false
	}
	return true
}
func (this *HubDisconnectRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HubDisconnectRequest)
	if !ok {
		that2, ok := that.(HubDisconnectRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StableId.Equal(that1.StableId) {
		return false
	}
	if !this.InstanceId.Equal(that1.InstanceId) {
		return false
	}
	return true
}
func (this *ServiceTokenRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceTokenRequest)
	if !ok {
		that2, ok := that.(ServiceTokenRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	return true
}
func (this *ServiceTokenResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceTokenResponse)
	if !ok {
		that2, ok := that.(ServiceTokenResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *ListServicesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListServicesRequest)
	if !ok {
		that2, ok := that.(ListServicesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Account.Equal(that1.Account) {
		return false
	}
	return true
}
func (this *ListServicesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListServicesResponse)
	if !ok {
		that2, ok := that.(ListServicesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Services) != len(that1.Services) {
		return false
	}
	for i := range this.Services {
		if !this.Services[i].Equal(that1.Services[i]) {
			return false
		}
	}
	return true
}
func (this *Service) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Service)
	if !ok {
		that2, ok := that.(Service)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if !this.Hub.Equal(that1.Hub) {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.Labels.Equal(that1.Labels) {
		return false
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return false
	}
	for i := range this.Metadata {
		if !this.Metadata[i].Equal(that1.Metadata[i]) {
			return false
		}
	}
	return true
}
func (this *AddAccountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddAccountRequest)
	if !ok {
		that2, ok := that.(AddAccountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Account.Equal(that1.Account) {
		return false
	}
	if !this.Limits.Equal(that1.Limits) {
		return false
	}
	return true
}
func (this *AddLabelLinkRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddLabelLinkRequest)
	if !ok {
		that2, ok := that.(AddLabelLinkRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Labels.Equal(that1.Labels) {
		return false
	}
	if !this.Account.Equal(that1.Account) {
		return false
	}
	if !this.Target.Equal(that1.Target) {
		return false
	}
	return true
}
func (this *Noop) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Noop)
	if !ok {
		that2, ok := that.(Noop)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RemoveLabelLinkRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveLabelLinkRequest)
	if !ok {
		that2, ok := that.(RemoveLabelLinkRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Labels.Equal(that1.Labels) {
		return false
	}
	if !this.Account.Equal(that1.Account) {
		return false
	}
	return true
}
func (this *CreateTokenRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateTokenRequest)
	if !ok {
		that2, ok := that.(CreateTokenRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Account.Equal(that1.Account) {
		return false
	}
	if len(this.Capabilities) != len(that1.Capabilities) {
		return false
	}
	for i := range this.Capabilities {
		if !this.Capabilities[i].Equal(&that1.Capabilities[i]) {
			return false
		}
	}
	if !this.ValidDuration.Equal(that1.ValidDuration) {
		return false
	}
	return true
}
func (this *CreateTokenResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateTokenResponse)
	if !ok {
		that2, ok := that.(CreateTokenResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *ControlRegister) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ControlRegister)
	if !ok {
		that2, ok := that.(ControlRegister)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	return true
}
func (this *ControlToken) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ControlToken)
	if !ok {
		that2, ok := that.(ControlToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *TokenInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TokenInfo)
	if !ok {
		that2, ok := that.(TokenInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.PublicKey, that1.PublicKey) {
		return false
	}
	return true
}
func (this *ListAccountsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListAccountsRequest)
	if !ok {
		that2, ok := that.(ListAccountsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if !bytes.Equal(this.Marker, that1.Marker) {
		return false
	}
	return true
}
func (this *ListAccountsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListAccountsResponse)
	if !ok {
		that2, ok := that.(ListAccountsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Accounts) != len(that1.Accounts) {
		return false
	}
	for i := range this.Accounts {
		if !this.Accounts[i].Equal(that1.Accounts[i]) {
			return false
		}
	}
	if !bytes.Equal(this.NextMarker, that1.NextMarker) {
		return false
	}
	return true
}
func (this *ServiceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.ServiceRequest{")
	if this.Account != nil {
		s = append(s, "Account: "+fmt.Sprintf("%#v", this.Account)+",\n")
	}
	if this.Hub != nil {
		s = append(s, "Hub: "+fmt.Sprintf("%#v", this.Hub)+",\n")
	}
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Labels != nil {
		s = append(s, "Labels: "+fmt.Sprintf("%#v", this.Labels)+",\n")
	}
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.ServiceResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LabelLink) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.LabelLink{")
	if this.Account != nil {
		s = append(s, "Account: "+fmt.Sprintf("%#v", this.Account)+",\n")
	}
	if this.Labels != nil {
		s = append(s, "Labels: "+fmt.Sprintf("%#v", this.Labels)+",\n")
	}
	if this.Target != nil {
		s = append(s, "Target: "+fmt.Sprintf("%#v", this.Target)+",\n")
	}
	if this.Limits != nil {
		s = append(s, "Limits: "+fmt.Sprintf("%#v", this.Limits)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LabelLinks) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.LabelLinks{")
	if this.LabelLinks != nil {
		s = append(s, "LabelLinks: "+fmt.Sprintf("%#v", this.LabelLinks)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceRoute) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.ServiceRoute{")
	if this.Hub != nil {
		s = append(s, "Hub: "+fmt.Sprintf("%#v", this.Hub)+",\n")
	}
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Labels != nil {
		s = append(s, "Labels: "+fmt.Sprintf("%#v", this.Labels)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AccountServices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.AccountServices{")
	if this.Account != nil {
		s = append(s, "Account: "+fmt.Sprintf("%#v", this.Account)+",\n")
	}
	if this.Services != nil {
		s = append(s, "Services: "+fmt.Sprintf("%#v", this.Services)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActivityEntry) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.ActivityEntry{")
	if this.RouteAdded != nil {
		s = append(s, "RouteAdded: "+fmt.Sprintf("%#v", this.RouteAdded)+",\n")
	}
	if this.RouteRemoved != nil {
		s = append(s, "RouteRemoved: "+fmt.Sprintf("%#v", this.RouteRemoved)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConfigRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.ConfigRequest{")
	if this.StableId != nil {
		s = append(s, "StableId: "+fmt.Sprintf("%#v", this.StableId)+",\n")
	}
	if this.InstanceId != nil {
		s = append(s, "InstanceId: "+fmt.Sprintf("%#v", this.InstanceId)+",\n")
	}
	if this.Locations != nil {
		s = append(s, "Locations: "+fmt.Sprintf("%#v", this.Locations)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConfigResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.ConfigResponse{")
	s = append(s, "TlsKey: "+fmt.Sprintf("%#v", this.TlsKey)+",\n")
	s = append(s, "TlsCert: "+fmt.Sprintf("%#v", this.TlsCert)+",\n")
	s = append(s, "TokenPub: "+fmt.Sprintf("%#v", this.TokenPub)+",\n")
	s = append(s, "S3AccessKey: "+fmt.Sprintf("%#v", this.S3AccessKey)+",\n")
	s = append(s, "S3SecretKey: "+fmt.Sprintf("%#v", this.S3SecretKey)+",\n")
	s = append(s, "S3Bucket: "+fmt.Sprintf("%#v", this.S3Bucket)+",\n")
	s = append(s, "ImageTag: "+fmt.Sprintf("%#v", this.ImageTag)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HubChange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.HubChange{")
	if this.OldId != nil {
		s = append(s, "OldId: "+fmt.Sprintf("%#v", this.OldId)+",\n")
	}
	if this.NewId != nil {
		s = append(s, "NewId: "+fmt.Sprintf("%#v", this.NewId)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CentralActivity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.CentralActivity{")
	if this.AccountServices != nil {
		s = append(s, "AccountServices: "+fmt.Sprintf("%#v", this.AccountServices)+",\n")
	}
	s = append(s, "RequestStats: "+fmt.Sprintf("%#v", this.RequestStats)+",\n")
	if this.NewLabelLinks != nil {
		s = append(s, "NewLabelLinks: "+fmt.Sprintf("%#v", this.NewLabelLinks)+",\n")
	}
	if this.HubChange != nil {
		s = append(s, "HubChange: "+fmt.Sprintf("%#v", this.HubChange)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HubActivity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.HubActivity{")
	if this.HubReg != nil {
		s = append(s, "HubReg: "+fmt.Sprintf("%#v", this.HubReg)+",\n")
	}
	if this.SentAt != nil {
		s = append(s, "SentAt: "+fmt.Sprintf("%#v", this.SentAt)+",\n")
	}
	if this.Stats != nil {
		s = append(s, "Stats: "+fmt.Sprintf("%#v", this.Stats)+",\n")
	}
	if this.Flow != nil {
		s = append(s, "Flow: "+fmt.Sprintf("%#v", this.Flow)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HubActivity_HubRegistration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.HubActivity_HubRegistration{")
	if this.Hub != nil {
		s = append(s, "Hub: "+fmt.Sprintf("%#v", this.Hub)+",\n")
	}
	if this.StableHub != nil {
		s = append(s, "StableHub: "+fmt.Sprintf("%#v", this.StableHub)+",\n")
	}
	if this.Locations != nil {
		s = append(s, "Locations: "+fmt.Sprintf("%#v", this.Locations)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HubActivity_HubStats) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.HubActivity_HubStats{")
	s = append(s, "AgentConnections: "+fmt.Sprintf("%#v", this.AgentConnections)+",\n")
	s = append(s, "AccountsSeen: "+fmt.Sprintf("%#v", this.AccountsSeen)+",\n")
	s = append(s, "AccountsCached: "+fmt.Sprintf("%#v", this.AccountsCached)+",\n")
	s = append(s, "CachedBytes: "+fmt.Sprintf("%#v", this.CachedBytes)+",\n")
	if this.LastSuccessfulUpdate != nil {
		s = append(s, "LastSuccessfulUpdate: "+fmt.Sprintf("%#v", this.LastSuccessfulUpdate)+",\n")
	}
	if this.LastAttemptedUpdate != nil {
		s = append(s, "LastAttemptedUpdate: "+fmt.Sprintf("%#v", this.LastAttemptedUpdate)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HubInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.HubInfo{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	if this.Locations != nil {
		s = append(s, "Locations: "+fmt.Sprintf("%#v", this.Locations)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListOfHubs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ListOfHubs{")
	if this.Hubs != nil {
		s = append(s, "Hubs: "+fmt.Sprintf("%#v", this.Hubs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HubSync) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.HubSync{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	if this.StableId != nil {
		s = append(s, "StableId: "+fmt.Sprintf("%#v", this.StableId)+",\n")
	}
	if this.Services != nil {
		s = append(s, "Services: "+fmt.Sprintf("%#v", this.Services)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HubSyncResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.HubSyncResponse{")
	s = append(s, "ServiceCount: "+fmt.Sprintf("%#v", this.ServiceCount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HubRegisterRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.HubRegisterRequest{")
	if this.StableId != nil {
		s = append(s, "StableId: "+fmt.Sprintf("%#v", this.StableId)+",\n")
	}
	if this.InstanceId != nil {
		s = append(s, "InstanceId: "+fmt.Sprintf("%#v", this.InstanceId)+",\n")
	}
	if this.Locations != nil {
		s = append(s, "Locations: "+fmt.Sprintf("%#v", this.Locations)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HubRegisterResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.HubRegisterResponse{")
	if this.ControlTime != nil {
		s = append(s, "ControlTime: "+fmt.Sprintf("%#v", this.ControlTime)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HubDisconnectRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.HubDisconnectRequest{")
	if this.StableId != nil {
		s = append(s, "StableId: "+fmt.Sprintf("%#v", this.StableId)+",\n")
	}
	if this.InstanceId != nil {
		s = append(s, "InstanceId: "+fmt.Sprintf("%#v", this.InstanceId)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceTokenRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ServiceTokenRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceTokenResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ServiceTokenResponse{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListServicesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ListServicesRequest{")
	if this.Account != nil {
		s = append(s, "Account: "+fmt.Sprintf("%#v", this.Account)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListServicesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ListServicesResponse{")
	if this.Services != nil {
		s = append(s, "Services: "+fmt.Sprintf("%#v", this.Services)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Service) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.Service{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	if this.Hub != nil {
		s = append(s, "Hub: "+fmt.Sprintf("%#v", this.Hub)+",\n")
	}
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Labels != nil {
		s = append(s, "Labels: "+fmt.Sprintf("%#v", this.Labels)+",\n")
	}
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddAccountRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.AddAccountRequest{")
	if this.Account != nil {
		s = append(s, "Account: "+fmt.Sprintf("%#v", this.Account)+",\n")
	}
	if this.Limits != nil {
		s = append(s, "Limits: "+fmt.Sprintf("%#v", this.Limits)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddLabelLinkRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.AddLabelLinkRequest{")
	if this.Labels != nil {
		s = append(s, "Labels: "+fmt.Sprintf("%#v", this.Labels)+",\n")
	}
	if this.Account != nil {
		s = append(s, "Account: "+fmt.Sprintf("%#v", this.Account)+",\n")
	}
	if this.Target != nil {
		s = append(s, "Target: "+fmt.Sprintf("%#v", this.Target)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Noop) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.Noop{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoveLabelLinkRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.RemoveLabelLinkRequest{")
	if this.Labels != nil {
		s = append(s, "Labels: "+fmt.Sprintf("%#v", this.Labels)+",\n")
	}
	if this.Account != nil {
		s = append(s, "Account: "+fmt.Sprintf("%#v", this.Account)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateTokenRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.CreateTokenRequest{")
	if this.Account != nil {
		s = append(s, "Account: "+fmt.Sprintf("%#v", this.Account)+",\n")
	}
	if this.Capabilities != nil {
		vs := make([]TokenCapability, len(this.Capabilities))
		for i := range vs {
			vs[i] = this.Capabilities[i]
		}
		s = append(s, "Capabilities: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	if this.ValidDuration != nil {
		s = append(s, "ValidDuration: "+fmt.Sprintf("%#v", this.ValidDuration)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateTokenResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CreateTokenResponse{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ControlRegister) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ControlRegister{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ControlToken) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ControlToken{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TokenInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.TokenInfo{")
	s = append(s, "PublicKey: "+fmt.Sprintf("%#v", this.PublicKey)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListAccountsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.ListAccountsRequest{")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Marker: "+fmt.Sprintf("%#v", this.Marker)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListAccountsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.ListAccountsResponse{")
	if this.Accounts != nil {
		s = append(s, "Accounts: "+fmt.Sprintf("%#v", this.Accounts)+",\n")
	}
	s = append(s, "NextMarker: "+fmt.Sprintf("%#v", this.NextMarker)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringControl(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ControlServicesClient is the client API for ControlServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControlServicesClient interface {
	AddService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*ServiceResponse, error)
	RemoveService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*ServiceResponse, error)
	ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error)
	FetchConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
	StreamActivity(ctx context.Context, opts ...grpc.CallOption) (ControlServices_StreamActivityClient, error)
	SyncHub(ctx context.Context, in *HubSync, opts ...grpc.CallOption) (*HubSyncResponse, error)
	HubDisconnect(ctx context.Context, in *HubDisconnectRequest, opts ...grpc.CallOption) (*Noop, error)
	AllHubs(ctx context.Context, in *Noop, opts ...grpc.CallOption) (*ListOfHubs, error)
	RequestServiceToken(ctx context.Context, in *ServiceTokenRequest, opts ...grpc.CallOption) (*ServiceTokenResponse, error)
}

type controlServicesClient struct {
	cc *grpc.ClientConn
}

func NewControlServicesClient(cc *grpc.ClientConn) ControlServicesClient {
	return &controlServicesClient{cc}
}

func (c *controlServicesClient) AddService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/pb.ControlServices/AddService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServicesClient) RemoveService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/pb.ControlServices/RemoveService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServicesClient) ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error) {
	out := new(ListServicesResponse)
	err := c.cc.Invoke(ctx, "/pb.ControlServices/ListServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServicesClient) FetchConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, "/pb.ControlServices/FetchConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServicesClient) StreamActivity(ctx context.Context, opts ...grpc.CallOption) (ControlServices_StreamActivityClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ControlServices_serviceDesc.Streams[0], "/pb.ControlServices/StreamActivity", opts...)
	if err != nil {
		return nil, err
	}
	x := &controlServicesStreamActivityClient{stream}
	return x, nil
}

type ControlServices_StreamActivityClient interface {
	Send(*HubActivity) error
	Recv() (*CentralActivity, error)
	grpc.ClientStream
}

type controlServicesStreamActivityClient struct {
	grpc.ClientStream
}

func (x *controlServicesStreamActivityClient) Send(m *HubActivity) error {
	return x.ClientStream.SendMsg(m)
}

func (x *controlServicesStreamActivityClient) Recv() (*CentralActivity, error) {
	m := new(CentralActivity)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controlServicesClient) SyncHub(ctx context.Context, in *HubSync, opts ...grpc.CallOption) (*HubSyncResponse, error) {
	out := new(HubSyncResponse)
	err := c.cc.Invoke(ctx, "/pb.ControlServices/SyncHub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServicesClient) HubDisconnect(ctx context.Context, in *HubDisconnectRequest, opts ...grpc.CallOption) (*Noop, error) {
	out := new(Noop)
	err := c.cc.Invoke(ctx, "/pb.ControlServices/HubDisconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServicesClient) AllHubs(ctx context.Context, in *Noop, opts ...grpc.CallOption) (*ListOfHubs, error) {
	out := new(ListOfHubs)
	err := c.cc.Invoke(ctx, "/pb.ControlServices/AllHubs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServicesClient) RequestServiceToken(ctx context.Context, in *ServiceTokenRequest, opts ...grpc.CallOption) (*ServiceTokenResponse, error) {
	out := new(ServiceTokenResponse)
	err := c.cc.Invoke(ctx, "/pb.ControlServices/RequestServiceToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlServicesServer is the server API for ControlServices service.
type ControlServicesServer interface {
	AddService(context.Context, *ServiceRequest) (*ServiceResponse, error)
	RemoveService(context.Context, *ServiceRequest) (*ServiceResponse, error)
	ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error)
	FetchConfig(context.Context, *ConfigRequest) (*ConfigResponse, error)
	StreamActivity(ControlServices_StreamActivityServer) error
	SyncHub(context.Context, *HubSync) (*HubSyncResponse, error)
	HubDisconnect(context.Context, *HubDisconnectRequest) (*Noop, error)
	AllHubs(context.Context, *Noop) (*ListOfHubs, error)
	RequestServiceToken(context.Context, *ServiceTokenRequest) (*ServiceTokenResponse, error)
}

// UnimplementedControlServicesServer can be embedded to have forward compatible implementations.
type UnimplementedControlServicesServer struct {
}

func (*UnimplementedControlServicesServer) AddService(ctx context.Context, req *ServiceRequest) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddService not implemented")
}
func (*UnimplementedControlServicesServer) RemoveService(ctx context.Context, req *ServiceRequest) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveService not implemented")
}
func (*UnimplementedControlServicesServer) ListServices(ctx context.Context, req *ListServicesRequest) (*ListServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (*UnimplementedControlServicesServer) FetchConfig(ctx context.Context, req *ConfigRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchConfig not implemented")
}
func (*UnimplementedControlServicesServer) StreamActivity(srv ControlServices_StreamActivityServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamActivity not implemented")
}
func (*UnimplementedControlServicesServer) SyncHub(ctx context.Context, req *HubSync) (*HubSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncHub not implemented")
}
func (*UnimplementedControlServicesServer) HubDisconnect(ctx context.Context, req *HubDisconnectRequest) (*Noop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HubDisconnect not implemented")
}
func (*UnimplementedControlServicesServer) AllHubs(ctx context.Context, req *Noop) (*ListOfHubs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllHubs not implemented")
}
func (*UnimplementedControlServicesServer) RequestServiceToken(ctx context.Context, req *ServiceTokenRequest) (*ServiceTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestServiceToken not implemented")
}

func RegisterControlServicesServer(s *grpc.Server, srv ControlServicesServer) {
	s.RegisterService(&_ControlServices_serviceDesc, srv)
}

func _ControlServices_AddService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServicesServer).AddService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControlServices/AddService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServicesServer).AddService(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlServices_RemoveService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServicesServer).RemoveService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControlServices/RemoveService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServicesServer).RemoveService(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlServices_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServicesServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControlServices/ListServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServicesServer).ListServices(ctx, req.(*ListServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlServices_FetchConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServicesServer).FetchConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControlServices/FetchConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServicesServer).FetchConfig(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlServices_StreamActivity_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ControlServicesServer).StreamActivity(&controlServicesStreamActivityServer{stream})
}

type ControlServices_StreamActivityServer interface {
	Send(*CentralActivity) error
	Recv() (*HubActivity, error)
	grpc.ServerStream
}

type controlServicesStreamActivityServer struct {
	grpc.ServerStream
}

func (x *controlServicesStreamActivityServer) Send(m *CentralActivity) error {
	return x.ServerStream.SendMsg(m)
}

func (x *controlServicesStreamActivityServer) Recv() (*HubActivity, error) {
	m := new(HubActivity)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ControlServices_SyncHub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HubSync)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServicesServer).SyncHub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControlServices/SyncHub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServicesServer).SyncHub(ctx, req.(*HubSync))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlServices_HubDisconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HubDisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServicesServer).HubDisconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControlServices/HubDisconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServicesServer).HubDisconnect(ctx, req.(*HubDisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlServices_AllHubs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Noop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServicesServer).AllHubs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControlServices/AllHubs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServicesServer).AllHubs(ctx, req.(*Noop))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlServices_RequestServiceToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServicesServer).RequestServiceToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControlServices/RequestServiceToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServicesServer).RequestServiceToken(ctx, req.(*ServiceTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ControlServices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ControlServices",
	HandlerType: (*ControlServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddService",
			Handler:    _ControlServices_AddService_Handler,
		},
		{
			MethodName: "RemoveService",
			Handler:    _ControlServices_RemoveService_Handler,
		},
		{
			MethodName: "ListServices",
			Handler:    _ControlServices_ListServices_Handler,
		},
		{
			MethodName: "FetchConfig",
			Handler:    _ControlServices_FetchConfig_Handler,
		},
		{
			MethodName: "SyncHub",
			Handler:    _ControlServices_SyncHub_Handler,
		},
		{
			MethodName: "HubDisconnect",
			Handler:    _ControlServices_HubDisconnect_Handler,
		},
		{
			MethodName: "AllHubs",
			Handler:    _ControlServices_AllHubs_Handler,
		},
		{
			MethodName: "RequestServiceToken",
			Handler:    _ControlServices_RequestServiceToken_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamActivity",
			Handler:       _ControlServices_StreamActivity_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "control.proto",
}

// ControlManagementClient is the client API for ControlManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControlManagementClient interface {
	Register(ctx context.Context, in *ControlRegister, opts ...grpc.CallOption) (*ControlToken, error)
	AddAccount(ctx context.Context, in *AddAccountRequest, opts ...grpc.CallOption) (*Noop, error)
	AddLabelLink(ctx context.Context, in *AddLabelLinkRequest, opts ...grpc.CallOption) (*Noop, error)
	RemoveLabelLink(ctx context.Context, in *RemoveLabelLinkRequest, opts ...grpc.CallOption) (*Noop, error)
	CreateToken(ctx context.Context, in *CreateTokenRequest, opts ...grpc.CallOption) (*CreateTokenResponse, error)
	IssueHubToken(ctx context.Context, in *Noop, opts ...grpc.CallOption) (*CreateTokenResponse, error)
	GetTokenPublicKey(ctx context.Context, in *Noop, opts ...grpc.CallOption) (*TokenInfo, error)
	ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error)
}

type controlManagementClient struct {
	cc *grpc.ClientConn
}

func NewControlManagementClient(cc *grpc.ClientConn) ControlManagementClient {
	return &controlManagementClient{cc}
}

func (c *controlManagementClient) Register(ctx context.Context, in *ControlRegister, opts ...grpc.CallOption) (*ControlToken, error) {
	out := new(ControlToken)
	err := c.cc.Invoke(ctx, "/pb.ControlManagement/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlManagementClient) AddAccount(ctx context.Context, in *AddAccountRequest, opts ...grpc.CallOption) (*Noop, error) {
	out := new(Noop)
	err := c.cc.Invoke(ctx, "/pb.ControlManagement/AddAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlManagementClient) AddLabelLink(ctx context.Context, in *AddLabelLinkRequest, opts ...grpc.CallOption) (*Noop, error) {
	out := new(Noop)
	err := c.cc.Invoke(ctx, "/pb.ControlManagement/AddLabelLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlManagementClient) RemoveLabelLink(ctx context.Context, in *RemoveLabelLinkRequest, opts ...grpc.CallOption) (*Noop, error) {
	out := new(Noop)
	err := c.cc.Invoke(ctx, "/pb.ControlManagement/RemoveLabelLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlManagementClient) CreateToken(ctx context.Context, in *CreateTokenRequest, opts ...grpc.CallOption) (*CreateTokenResponse, error) {
	out := new(CreateTokenResponse)
	err := c.cc.Invoke(ctx, "/pb.ControlManagement/CreateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlManagementClient) IssueHubToken(ctx context.Context, in *Noop, opts ...grpc.CallOption) (*CreateTokenResponse, error) {
	out := new(CreateTokenResponse)
	err := c.cc.Invoke(ctx, "/pb.ControlManagement/IssueHubToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlManagementClient) GetTokenPublicKey(ctx context.Context, in *Noop, opts ...grpc.CallOption) (*TokenInfo, error) {
	out := new(TokenInfo)
	err := c.cc.Invoke(ctx, "/pb.ControlManagement/GetTokenPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlManagementClient) ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error) {
	out := new(ListAccountsResponse)
	err := c.cc.Invoke(ctx, "/pb.ControlManagement/ListAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlManagementServer is the server API for ControlManagement service.
type ControlManagementServer interface {
	Register(context.Context, *ControlRegister) (*ControlToken, error)
	AddAccount(context.Context, *AddAccountRequest) (*Noop, error)
	AddLabelLink(context.Context, *AddLabelLinkRequest) (*Noop, error)
	RemoveLabelLink(context.Context, *RemoveLabelLinkRequest) (*Noop, error)
	CreateToken(context.Context, *CreateTokenRequest) (*CreateTokenResponse, error)
	IssueHubToken(context.Context, *Noop) (*CreateTokenResponse, error)
	GetTokenPublicKey(context.Context, *Noop) (*TokenInfo, error)
	ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error)
}

// UnimplementedControlManagementServer can be embedded to have forward compatible implementations.
type UnimplementedControlManagementServer struct {
}

func (*UnimplementedControlManagementServer) Register(ctx context.Context, req *ControlRegister) (*ControlToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedControlManagementServer) AddAccount(ctx context.Context, req *AddAccountRequest) (*Noop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAccount not implemented")
}
func (*UnimplementedControlManagementServer) AddLabelLink(ctx context.Context, req *AddLabelLinkRequest) (*Noop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLabelLink not implemented")
}
func (*UnimplementedControlManagementServer) RemoveLabelLink(ctx context.Context, req *RemoveLabelLinkRequest) (*Noop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLabelLink not implemented")
}
func (*UnimplementedControlManagementServer) CreateToken(ctx context.Context, req *CreateTokenRequest) (*CreateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (*UnimplementedControlManagementServer) IssueHubToken(ctx context.Context, req *Noop) (*CreateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueHubToken not implemented")
}
func (*UnimplementedControlManagementServer) GetTokenPublicKey(ctx context.Context, req *Noop) (*TokenInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenPublicKey not implemented")
}
func (*UnimplementedControlManagementServer) ListAccounts(ctx context.Context, req *ListAccountsRequest) (*ListAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccounts not implemented")
}

func RegisterControlManagementServer(s *grpc.Server, srv ControlManagementServer) {
	s.RegisterService(&_ControlManagement_serviceDesc, srv)
}

func _ControlManagement_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlRegister)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlManagementServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControlManagement/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlManagementServer).Register(ctx, req.(*ControlRegister))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlManagement_AddAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlManagementServer).AddAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControlManagement/AddAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlManagementServer).AddAccount(ctx, req.(*AddAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlManagement_AddLabelLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLabelLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlManagementServer).AddLabelLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControlManagement/AddLabelLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlManagementServer).AddLabelLink(ctx, req.(*AddLabelLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlManagement_RemoveLabelLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLabelLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlManagementServer).RemoveLabelLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControlManagement/RemoveLabelLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlManagementServer).RemoveLabelLink(ctx, req.(*RemoveLabelLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlManagement_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlManagementServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControlManagement/CreateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlManagementServer).CreateToken(ctx, req.(*CreateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlManagement_IssueHubToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Noop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlManagementServer).IssueHubToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControlManagement/IssueHubToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlManagementServer).IssueHubToken(ctx, req.(*Noop))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlManagement_GetTokenPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Noop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlManagementServer).GetTokenPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControlManagement/GetTokenPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlManagementServer).GetTokenPublicKey(ctx, req.(*Noop))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlManagement_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlManagementServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControlManagement/ListAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlManagementServer).ListAccounts(ctx, req.(*ListAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ControlManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ControlManagement",
	HandlerType: (*ControlManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _ControlManagement_Register_Handler,
		},
		{
			MethodName: "AddAccount",
			Handler:    _ControlManagement_AddAccount_Handler,
		},
		{
			MethodName: "AddLabelLink",
			Handler:    _ControlManagement_AddLabelLink_Handler,
		},
		{
			MethodName: "RemoveLabelLink",
			Handler:    _ControlManagement_RemoveLabelLink_Handler,
		},
		{
			MethodName: "CreateToken",
			Handler:    _ControlManagement_CreateToken_Handler,
		},
		{
			MethodName: "IssueHubToken",
			Handler:    _ControlManagement_IssueHubToken_Handler,
		},
		{
			MethodName: "GetTokenPublicKey",
			Handler:    _ControlManagement_GetTokenPublicKey_Handler,
		},
		{
			MethodName: "ListAccounts",
			Handler:    _ControlManagement_ListAccounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "control.proto",
}

func (m *ServiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		for iNdEx := len(m.Metadata) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Metadata[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintControl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Labels != nil {
		{
			size, err := m.Labels.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintControl(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x22
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Hub != nil {
		{
			size, err := m.Hub.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *LabelLink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelLink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LabelLink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limits != nil {
		{
			size, err := m.Limits.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Target != nil {
		{
			size, err := m.Target.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Labels != nil {
		{
			size, err := m.Labels.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LabelLinks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelLinks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LabelLinks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LabelLinks) > 0 {
		for iNdEx := len(m.LabelLinks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LabelLinks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintControl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ServiceRoute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceRoute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceRoute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Labels != nil {
		{
			size, err := m.Labels.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintControl(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Hub != nil {
		{
			size, err := m.Hub.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountServices) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Services) > 0 {
		for iNdEx := len(m.Services) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Services[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintControl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActivityEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RouteRemoved != nil {
		{
			size, err := m.RouteRemoved.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RouteAdded != nil {
		{
			size, err := m.RouteAdded.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Locations) > 0 {
		for iNdEx := len(m.Locations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintControl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.InstanceId != nil {
		{
			size, err := m.InstanceId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.StableId != nil {
		{
			size, err := m.StableId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ImageTag) > 0 {
		i -= len(m.ImageTag)
		copy(dAtA[i:], m.ImageTag)
		i = encodeVarintControl(dAtA, i, uint64(len(m.ImageTag)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.S3Bucket) > 0 {
		i -= len(m.S3Bucket)
		copy(dAtA[i:], m.S3Bucket)
		i = encodeVarintControl(dAtA, i, uint64(len(m.S3Bucket)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.S3SecretKey) > 0 {
		i -= len(m.S3SecretKey)
		copy(dAtA[i:], m.S3SecretKey)
		i = encodeVarintControl(dAtA, i, uint64(len(m.S3SecretKey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.S3AccessKey) > 0 {
		i -= len(m.S3AccessKey)
		copy(dAtA[i:], m.S3AccessKey)
		i = encodeVarintControl(dAtA, i, uint64(len(m.S3AccessKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenPub) > 0 {
		i -= len(m.TokenPub)
		copy(dAtA[i:], m.TokenPub)
		i = encodeVarintControl(dAtA, i, uint64(len(m.TokenPub)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TlsCert) > 0 {
		i -= len(m.TlsCert)
		copy(dAtA[i:], m.TlsCert)
		i = encodeVarintControl(dAtA, i, uint64(len(m.TlsCert)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TlsKey) > 0 {
		i -= len(m.TlsKey)
		copy(dAtA[i:], m.TlsKey)
		i = encodeVarintControl(dAtA, i, uint64(len(m.TlsKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HubChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HubChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HubChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewId != nil {
		{
			size, err := m.NewId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.OldId != nil {
		{
			size, err := m.OldId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CentralActivity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CentralActivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CentralActivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HubChange != nil {
		{
			size, err := m.HubChange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.NewLabelLinks != nil {
		{
			size, err := m.NewLabelLinks.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.RequestStats {
		i--
		if m.RequestStats {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.AccountServices) > 0 {
		for iNdEx := len(m.AccountServices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccountServices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintControl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *HubActivity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HubActivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HubActivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Flow) > 0 {
		for iNdEx := len(m.Flow) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Flow[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintControl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Stats != nil {
		{
			size, err := m.Stats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SentAt != nil {
		{
			size, err := m.SentAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.HubReg != nil {
		{
			size, err := m.HubReg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HubActivity_HubRegistration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HubActivity_HubRegistration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HubActivity_HubRegistration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Locations) > 0 {
		for iNdEx := len(m.Locations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintControl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.StableHub != nil {
		{
			size, err := m.StableHub.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Hub != nil {
		{
			size, err := m.Hub.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HubActivity_HubStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HubActivity_HubStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HubActivity_HubStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastAttemptedUpdate != nil {
		{
			size, err := m.LastAttemptedUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.LastSuccessfulUpdate != nil {
		{
			size, err := m.LastSuccessfulUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.CachedBytes != 0 {
		i = encodeVarintControl(dAtA, i, uint64(m.CachedBytes))
		i--
		dAtA[i] = 0x20
	}
	if m.AccountsCached != 0 {
		i = encodeVarintControl(dAtA, i, uint64(m.AccountsCached))
		i--
		dAtA[i] = 0x18
	}
	if m.AccountsSeen != 0 {
		i = encodeVarintControl(dAtA, i, uint64(m.AccountsSeen))
		i--
		dAtA[i] = 0x10
	}
	if m.AgentConnections != 0 {
		i = encodeVarintControl(dAtA, i, uint64(m.AgentConnections))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HubInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HubInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HubInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Locations) > 0 {
		for iNdEx := len(m.Locations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintControl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListOfHubs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListOfHubs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListOfHubs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hubs) > 0 {
		for iNdEx := len(m.Hubs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Hubs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintControl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *HubSync) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HubSync) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HubSync) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Services) > 0 {
		for iNdEx := len(m.Services) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Services[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintControl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.StableId != nil {
		{
			size, err := m.StableId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HubSyncResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HubSyncResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HubSyncResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServiceCount != 0 {
		i = encodeVarintControl(dAtA, i, uint64(m.ServiceCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HubRegisterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HubRegisterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HubRegisterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Locations) > 0 {
		for iNdEx := len(m.Locations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintControl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.InstanceId != nil {
		{
			size, err := m.InstanceId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.StableId != nil {
		{
			size, err := m.StableId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HubRegisterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HubRegisterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HubRegisterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ControlTime != nil {
		{
			size, err := m.ControlTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HubDisconnectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HubDisconnectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HubDisconnectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InstanceId != nil {
		{
			size, err := m.InstanceId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.StableId != nil {
		{
			size, err := m.StableId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceTokenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintControl(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintControl(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListServicesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListServicesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServicesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListServicesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListServicesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListServicesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Services) > 0 {
		for iNdEx := len(m.Services) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Services[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintControl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Service) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Service) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Service) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		for iNdEx := len(m.Metadata) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Metadata[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintControl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Labels != nil {
		{
			size, err := m.Labels.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintControl(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Hub != nil {
		{
			size, err := m.Hub.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limits != nil {
		{
			size, err := m.Limits.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddLabelLinkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddLabelLinkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddLabelLinkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Target != nil {
		{
			size, err := m.Target.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Labels != nil {
		{
			size, err := m.Labels.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Noop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Noop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Noop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RemoveLabelLinkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveLabelLinkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveLabelLinkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Labels != nil {
		{
			size, err := m.Labels.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateTokenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValidDuration != nil {
		{
			size, err := m.ValidDuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Capabilities) > 0 {
		for iNdEx := len(m.Capabilities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Capabilities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintControl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintControl(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ControlRegister) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ControlRegister) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ControlRegister) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintControl(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ControlToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ControlToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ControlToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintControl(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TokenInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintControl(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListAccountsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAccountsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAccountsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Marker) > 0 {
		i -= len(m.Marker)
		copy(dAtA[i:], m.Marker)
		i = encodeVarintControl(dAtA, i, uint64(len(m.Marker)))
		i--
		dAtA[i] = 0x12
	}
	if m.Limit != 0 {
		i = encodeVarintControl(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListAccountsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAccountsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAccountsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NextMarker) > 0 {
		i -= len(m.NextMarker)
		copy(dAtA[i:], m.NextMarker)
		i = encodeVarintControl(dAtA, i, uint64(len(m.NextMarker)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Accounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintControl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintControl(dAtA []byte, offset int, v uint64) int {
	offset -= sovControl(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ServiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	if m.Hub != nil {
		l = m.Hub.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	if m.Labels != nil {
		l = m.Labels.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	if len(m.Metadata) > 0 {
		for _, e := range m.Metadata {
			l = e.Size()
			n += 1 + l + sovControl(uint64(l))
		}
	}
	return n
}

func (m *ServiceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LabelLink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	if m.Labels != nil {
		l = m.Labels.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	if m.Limits != nil {
		l = m.Limits.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	return n
}

func (m *LabelLinks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LabelLinks) > 0 {
		for _, e := range m.LabelLinks {
			l = e.Size()
			n += 1 + l + sovControl(uint64(l))
		}
	}
	return n
}

func (m *ServiceRoute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hub != nil {
		l = m.Hub.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	if m.Labels != nil {
		l = m.Labels.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	return n
}

func (m *AccountServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	if len(m.Services) > 0 {
		for _, e := range m.Services {
			l = e.Size()
			n += 1 + l + sovControl(uint64(l))
		}
	}
	return n
}

func (m *ActivityEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RouteAdded != nil {
		l = m.RouteAdded.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	if m.RouteRemoved != nil {
		l = m.RouteRemoved.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	return n
}

func (m *ConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StableId != nil {
		l = m.StableId.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	if m.InstanceId != nil {
		l = m.InstanceId.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	if len(m.Locations) > 0 {
		for _, e := range m.Locations {
			l = e.Size()
			n += 1 + l + sovControl(uint64(l))
		}
	}
	return n
}

func (m *ConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TlsKey)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	l = len(m.TlsCert)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	l = len(m.TokenPub)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	l = len(m.S3AccessKey)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	l = len(m.S3SecretKey)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	l = len(m.S3Bucket)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	l = len(m.ImageTag)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	return n
}

func (m *HubChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OldId != nil {
		l = m.OldId.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	if m.NewId != nil {
		l = m.NewId.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	return n
}

func (m *CentralActivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AccountServices) > 0 {
		for _, e := range m.AccountServices {
			l = e.Size()
			n += 1 + l + sovControl(uint64(l))
		}
	}
	if m.RequestStats {
		n += 2
	}
	if m.NewLabelLinks != nil {
		l = m.NewLabelLinks.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	if m.HubChange != nil {
		l = m.HubChange.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	return n
}

func (m *HubActivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HubReg != nil {
		l = m.HubReg.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	if m.SentAt != nil {
		l = m.SentAt.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	if len(m.Flow) > 0 {
		for _, e := range m.Flow {
			l = e.Size()
			n += 1 + l + sovControl(uint64(l))
		}
	}
	return n
}

func (m *HubActivity_HubRegistration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hub != nil {
		l = m.Hub.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	if m.StableHub != nil {
		l = m.StableHub.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	if len(m.Locations) > 0 {
		for _, e := range m.Locations {
			l = e.Size()
			n += 1 + l + sovControl(uint64(l))
		}
	}
	return n
}

func (m *HubActivity_HubStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AgentConnections != 0 {
		n += 1 + sovControl(uint64(m.AgentConnections))
	}
	if m.AccountsSeen != 0 {
		n += 1 + sovControl(uint64(m.AccountsSeen))
	}
	if m.AccountsCached != 0 {
		n += 1 + sovControl(uint64(m.AccountsCached))
	}
	if m.CachedBytes != 0 {
		n += 1 + sovControl(uint64(m.CachedBytes))
	}
	if m.LastSuccessfulUpdate != nil {
		l = m.LastSuccessfulUpdate.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	if m.LastAttemptedUpdate != nil {
		l = m.LastAttemptedUpdate.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	return n
}

func (m *HubInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	if len(m.Locations) > 0 {
		for _, e := range m.Locations {
			l = e.Size()
			n += 1 + l + sovControl(uint64(l))
		}
	}
	return n
}

func (m *ListOfHubs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Hubs) > 0 {
		for _, e := range m.Hubs {
			l = e.Size()
			n += 1 + l + sovControl(uint64(l))
		}
	}
	return n
}

func (m *HubSync) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	if m.StableId != nil {
		l = m.StableId.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	if len(m.Services) > 0 {
		for _, e := range m.Services {
			l = e.Size()
			n += 1 + l + sovControl(uint64(l))
		}
	}
	return n
}

func (m *HubSyncResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceCount != 0 {
		n += 1 + sovControl(uint64(m.ServiceCount))
	}
	return n
}

func (m *HubRegisterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StableId != nil {
		l = m.StableId.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	if m.InstanceId != nil {
		l = m.InstanceId.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	if len(m.Locations) > 0 {
		for _, e := range m.Locations {
			l = e.Size()
			n += 1 + l + sovControl(uint64(l))
		}
	}
	return n
}

func (m *HubRegisterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ControlTime != nil {
		l = m.ControlTime.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	return n
}

func (m *HubDisconnectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StableId != nil {
		l = m.StableId.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	if m.InstanceId != nil {
		l = m.InstanceId.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	return n
}

func (m *ServiceTokenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	return n
}

func (m *ServiceTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	return n
}

func (m *ListServicesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	return n
}

func (m *ListServicesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Services) > 0 {
		for _, e := range m.Services {
			l = e.Size()
			n += 1 + l + sovControl(uint64(l))
		}
	}
	return n
}

func (m *Service) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	if m.Hub != nil {
		l = m.Hub.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	if m.Labels != nil {
		l = m.Labels.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	if len(m.Metadata) > 0 {
		for _, e := range m.Metadata {
			l = e.Size()
			n += 1 + l + sovControl(uint64(l))
		}
	}
	return n
}

func (m *AddAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	if m.Limits != nil {
		l = m.Limits.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	return n
}

func (m *AddLabelLinkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Labels != nil {
		l = m.Labels.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	return n
}

func (m *Noop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RemoveLabelLinkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Labels != nil {
		l = m.Labels.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	return n
}

func (m *CreateTokenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	if len(m.Capabilities) > 0 {
		for _, e := range m.Capabilities {
			l = e.Size()
			n += 1 + l + sovControl(uint64(l))
		}
	}
	if m.ValidDuration != nil {
		l = m.ValidDuration.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	return n
}

func (m *CreateTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	return n
}

func (m *ControlRegister) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	return n
}

func (m *ControlToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	return n
}

func (m *TokenInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	return n
}

func (m *ListAccountsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovControl(uint64(m.Limit))
	}
	l = len(m.Marker)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	return n
}

func (m *ListAccountsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, e := range m.Accounts {
			l = e.Size()
			n += 1 + l + sovControl(uint64(l))
		}
	}
	l = len(m.NextMarker)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	return n
}

func sovControl(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozControl(x uint64) (n int) {
	return sovControl(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ServiceRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMetadata := "[]*KVPair{"
	for _, f := range this.Metadata {
		repeatedStringForMetadata += strings.Replace(fmt.Sprintf("%v", f), "KVPair", "KVPair", 1) + ","
	}
	repeatedStringForMetadata += "}"
	s := strings.Join([]string{`&ServiceRequest{`,
		`Account:` + strings.Replace(fmt.Sprintf("%v", this.Account), "Account", "Account", 1) + `,`,
		`Hub:` + strings.Replace(fmt.Sprintf("%v", this.Hub), "ULID", "ULID", 1) + `,`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "ULID", "ULID", 1) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Labels:` + strings.Replace(fmt.Sprintf("%v", this.Labels), "LabelSet", "LabelSet", 1) + `,`,
		`Metadata:` + repeatedStringForMetadata + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceResponse{`,
		`}`,
	}, "")
	return s
}
func (this *LabelLink) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LabelLink{`,
		`Account:` + strings.Replace(fmt.Sprintf("%v", this.Account), "Account", "Account", 1) + `,`,
		`Labels:` + strings.Replace(fmt.Sprintf("%v", this.Labels), "LabelSet", "LabelSet", 1) + `,`,
		`Target:` + strings.Replace(fmt.Sprintf("%v", this.Target), "LabelSet", "LabelSet", 1) + `,`,
		`Limits:` + strings.Replace(fmt.Sprintf("%v", this.Limits), "Account_Limits", "Account_Limits", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LabelLinks) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLabelLinks := "[]*LabelLink{"
	for _, f := range this.LabelLinks {
		repeatedStringForLabelLinks += strings.Replace(f.String(), "LabelLink", "LabelLink", 1) + ","
	}
	repeatedStringForLabelLinks += "}"
	s := strings.Join([]string{`&LabelLinks{`,
		`LabelLinks:` + repeatedStringForLabelLinks + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceRoute) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceRoute{`,
		`Hub:` + strings.Replace(fmt.Sprintf("%v", this.Hub), "ULID", "ULID", 1) + `,`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "ULID", "ULID", 1) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Labels:` + strings.Replace(fmt.Sprintf("%v", this.Labels), "LabelSet", "LabelSet", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AccountServices) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForServices := "[]*ServiceRoute{"
	for _, f := range this.Services {
		repeatedStringForServices += strings.Replace(f.String(), "ServiceRoute", "ServiceRoute", 1) + ","
	}
	repeatedStringForServices += "}"
	s := strings.Join([]string{`&AccountServices{`,
		`Account:` + strings.Replace(fmt.Sprintf("%v", this.Account), "Account", "Account", 1) + `,`,
		`Services:` + repeatedStringForServices + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActivityEntry) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActivityEntry{`,
		`RouteAdded:` + strings.Replace(this.RouteAdded.String(), "AccountServices", "AccountServices", 1) + `,`,
		`RouteRemoved:` + strings.Replace(fmt.Sprintf("%v", this.RouteRemoved), "ULID", "ULID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConfigRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLocations := "[]*NetworkLocation{"
	for _, f := range this.Locations {
		repeatedStringForLocations += strings.Replace(fmt.Sprintf("%v", f), "NetworkLocation", "NetworkLocation", 1) + ","
	}
	repeatedStringForLocations += "}"
	s := strings.Join([]string{`&ConfigRequest{`,
		`StableId:` + strings.Replace(fmt.Sprintf("%v", this.StableId), "ULID", "ULID", 1) + `,`,
		`InstanceId:` + strings.Replace(fmt.Sprintf("%v", this.InstanceId), "ULID", "ULID", 1) + `,`,
		`Locations:` + repeatedStringForLocations + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConfigResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConfigResponse{`,
		`TlsKey:` + fmt.Sprintf("%v", this.TlsKey) + `,`,
		`TlsCert:` + fmt.Sprintf("%v", this.TlsCert) + `,`,
		`TokenPub:` + fmt.Sprintf("%v", this.TokenPub) + `,`,
		`S3AccessKey:` + fmt.Sprintf("%v", this.S3AccessKey) + `,`,
		`S3SecretKey:` + fmt.Sprintf("%v", this.S3SecretKey) + `,`,
		`S3Bucket:` + fmt.Sprintf("%v", this.S3Bucket) + `,`,
		`ImageTag:` + fmt.Sprintf("%v", this.ImageTag) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HubChange) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HubChange{`,
		`OldId:` + strings.Replace(fmt.Sprintf("%v", this.OldId), "ULID", "ULID", 1) + `,`,
		`NewId:` + strings.Replace(fmt.Sprintf("%v", this.NewId), "ULID", "ULID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CentralActivity) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAccountServices := "[]*AccountServices{"
	for _, f := range this.AccountServices {
		repeatedStringForAccountServices += strings.Replace(f.String(), "AccountServices", "AccountServices", 1) + ","
	}
	repeatedStringForAccountServices += "}"
	s := strings.Join([]string{`&CentralActivity{`,
		`AccountServices:` + repeatedStringForAccountServices + `,`,
		`RequestStats:` + fmt.Sprintf("%v", this.RequestStats) + `,`,
		`NewLabelLinks:` + strings.Replace(this.NewLabelLinks.String(), "LabelLinks", "LabelLinks", 1) + `,`,
		`HubChange:` + strings.Replace(this.HubChange.String(), "HubChange", "HubChange", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HubActivity) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFlow := "[]*FlowRecord{"
	for _, f := range this.Flow {
		repeatedStringForFlow += strings.Replace(fmt.Sprintf("%v", f), "FlowRecord", "FlowRecord", 1) + ","
	}
	repeatedStringForFlow += "}"
	s := strings.Join([]string{`&HubActivity{`,
		`HubReg:` + strings.Replace(fmt.Sprintf("%v", this.HubReg), "HubActivity_HubRegistration", "HubActivity_HubRegistration", 1) + `,`,
		`SentAt:` + strings.Replace(fmt.Sprintf("%v", this.SentAt), "Timestamp", "Timestamp", 1) + `,`,
		`Stats:` + strings.Replace(fmt.Sprintf("%v", this.Stats), "HubActivity_HubStats", "HubActivity_HubStats", 1) + `,`,
		`Flow:` + repeatedStringForFlow + `,`,
		`}`,
	}, "")
	return s
}
func (this *HubActivity_HubRegistration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLocations := "[]*NetworkLocation{"
	for _, f := range this.Locations {
		repeatedStringForLocations += strings.Replace(fmt.Sprintf("%v", f), "NetworkLocation", "NetworkLocation", 1) + ","
	}
	repeatedStringForLocations += "}"
	s := strings.Join([]string{`&HubActivity_HubRegistration{`,
		`Hub:` + strings.Replace(fmt.Sprintf("%v", this.Hub), "ULID", "ULID", 1) + `,`,
		`StableHub:` + strings.Replace(fmt.Sprintf("%v", this.StableHub), "ULID", "ULID", 1) + `,`,
		`Locations:` + repeatedStringForLocations + `,`,
		`}`,
	}, "")
	return s
}
func (this *HubActivity_HubStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HubActivity_HubStats{`,
		`AgentConnections:` + fmt.Sprintf("%v", this.AgentConnections) + `,`,
		`AccountsSeen:` + fmt.Sprintf("%v", this.AccountsSeen) + `,`,
		`AccountsCached:` + fmt.Sprintf("%v", this.AccountsCached) + `,`,
		`CachedBytes:` + fmt.Sprintf("%v", this.CachedBytes) + `,`,
		`LastSuccessfulUpdate:` + strings.Replace(fmt.Sprintf("%v", this.LastSuccessfulUpdate), "Timestamp", "Timestamp", 1) + `,`,
		`LastAttemptedUpdate:` + strings.Replace(fmt.Sprintf("%v", this.LastAttemptedUpdate), "Timestamp", "Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HubInfo) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLocations := "[]*NetworkLocation{"
	for _, f := range this.Locations {
		repeatedStringForLocations += strings.Replace(fmt.Sprintf("%v", f), "NetworkLocation", "NetworkLocation", 1) + ","
	}
	repeatedStringForLocations += "}"
	s := strings.Join([]string{`&HubInfo{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "ULID", "ULID", 1) + `,`,
		`Locations:` + repeatedStringForLocations + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListOfHubs) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHubs := "[]*HubInfo{"
	for _, f := range this.Hubs {
		repeatedStringForHubs += strings.Replace(f.String(), "HubInfo", "HubInfo", 1) + ","
	}
	repeatedStringForHubs += "}"
	s := strings.Join([]string{`&ListOfHubs{`,
		`Hubs:` + repeatedStringForHubs + `,`,
		`}`,
	}, "")
	return s
}
func (this *HubSync) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForServices := "[]*ServiceRequest{"
	for _, f := range this.Services {
		repeatedStringForServices += strings.Replace(f.String(), "ServiceRequest", "ServiceRequest", 1) + ","
	}
	repeatedStringForServices += "}"
	s := strings.Join([]string{`&HubSync{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "ULID", "ULID", 1) + `,`,
		`StableId:` + strings.Replace(fmt.Sprintf("%v", this.StableId), "ULID", "ULID", 1) + `,`,
		`Services:` + repeatedStringForServices + `,`,
		`}`,
	}, "")
	return s
}
func (this *HubSyncResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HubSyncResponse{`,
		`ServiceCount:` + fmt.Sprintf("%v", this.ServiceCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HubRegisterRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLocations := "[]*NetworkLocation{"
	for _, f := range this.Locations {
		repeatedStringForLocations += strings.Replace(fmt.Sprintf("%v", f), "NetworkLocation", "NetworkLocation", 1) + ","
	}
	repeatedStringForLocations += "}"
	s := strings.Join([]string{`&HubRegisterRequest{`,
		`StableId:` + strings.Replace(fmt.Sprintf("%v", this.StableId), "ULID", "ULID", 1) + `,`,
		`InstanceId:` + strings.Replace(fmt.Sprintf("%v", this.InstanceId), "ULID", "ULID", 1) + `,`,
		`Locations:` + repeatedStringForLocations + `,`,
		`}`,
	}, "")
	return s
}
func (this *HubRegisterResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HubRegisterResponse{`,
		`ControlTime:` + strings.Replace(fmt.Sprintf("%v", this.ControlTime), "Timestamp", "Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HubDisconnectRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HubDisconnectRequest{`,
		`StableId:` + strings.Replace(fmt.Sprintf("%v", this.StableId), "ULID", "ULID", 1) + `,`,
		`InstanceId:` + strings.Replace(fmt.Sprintf("%v", this.InstanceId), "ULID", "ULID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceTokenRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceTokenRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceTokenResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceTokenResponse{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListServicesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListServicesRequest{`,
		`Account:` + strings.Replace(fmt.Sprintf("%v", this.Account), "Account", "Account", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListServicesResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForServices := "[]*Service{"
	for _, f := range this.Services {
		repeatedStringForServices += strings.Replace(f.String(), "Service", "Service", 1) + ","
	}
	repeatedStringForServices += "}"
	s := strings.Join([]string{`&ListServicesResponse{`,
		`Services:` + repeatedStringForServices + `,`,
		`}`,
	}, "")
	return s
}
func (this *Service) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMetadata := "[]*KVPair{"
	for _, f := range this.Metadata {
		repeatedStringForMetadata += strings.Replace(fmt.Sprintf("%v", f), "KVPair", "KVPair", 1) + ","
	}
	repeatedStringForMetadata += "}"
	s := strings.Join([]string{`&Service{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "ULID", "ULID", 1) + `,`,
		`Hub:` + strings.Replace(fmt.Sprintf("%v", this.Hub), "ULID", "ULID", 1) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Labels:` + strings.Replace(fmt.Sprintf("%v", this.Labels), "LabelSet", "LabelSet", 1) + `,`,
		`Metadata:` + repeatedStringForMetadata + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddAccountRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddAccountRequest{`,
		`Account:` + strings.Replace(fmt.Sprintf("%v", this.Account), "Account", "Account", 1) + `,`,
		`Limits:` + strings.Replace(fmt.Sprintf("%v", this.Limits), "Account_Limits", "Account_Limits", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddLabelLinkRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddLabelLinkRequest{`,
		`Labels:` + strings.Replace(fmt.Sprintf("%v", this.Labels), "LabelSet", "LabelSet", 1) + `,`,
		`Account:` + strings.Replace(fmt.Sprintf("%v", this.Account), "Account", "Account", 1) + `,`,
		`Target:` + strings.Replace(fmt.Sprintf("%v", this.Target), "LabelSet", "LabelSet", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Noop) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Noop{`,
		`}`,
	}, "")
	return s
}
func (this *RemoveLabelLinkRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveLabelLinkRequest{`,
		`Labels:` + strings.Replace(fmt.Sprintf("%v", this.Labels), "LabelSet", "LabelSet", 1) + `,`,
		`Account:` + strings.Replace(fmt.Sprintf("%v", this.Account), "Account", "Account", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateTokenRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCapabilities := "[]TokenCapability{"
	for _, f := range this.Capabilities {
		repeatedStringForCapabilities += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForCapabilities += "}"
	s := strings.Join([]string{`&CreateTokenRequest{`,
		`Account:` + strings.Replace(fmt.Sprintf("%v", this.Account), "Account", "Account", 1) + `,`,
		`Capabilities:` + repeatedStringForCapabilities + `,`,
		`ValidDuration:` + strings.Replace(fmt.Sprintf("%v", this.ValidDuration), "Timestamp", "Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateTokenResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateTokenResponse{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ControlRegister) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ControlRegister{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ControlToken) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ControlToken{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TokenInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TokenInfo{`,
		`PublicKey:` + fmt.Sprintf("%v", this.PublicKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListAccountsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListAccountsRequest{`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Marker:` + fmt.Sprintf("%v", this.Marker) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListAccountsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAccounts := "[]*Account{"
	for _, f := range this.Accounts {
		repeatedStringForAccounts += strings.Replace(fmt.Sprintf("%v", f), "Account", "Account", 1) + ","
	}
	repeatedStringForAccounts += "}"
	s := strings.Join([]string{`&ListAccountsResponse{`,
		`Accounts:` + repeatedStringForAccounts + `,`,
		`NextMarker:` + fmt.Sprintf("%v", this.NextMarker) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringControl(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ServiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hub", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hub == nil {
				m.Hub = &ULID{}
			}
			if err := m.Hub.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &ULID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = &LabelSet{}
			}
			if err := m.Labels.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata, &KVPair{})
			if err := m.Metadata[len(m.Metadata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelLink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = &LabelSet{}
			}
			if err := m.Labels.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &LabelSet{}
			}
			if err := m.Target.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Limits == nil {
				m.Limits = &Account_Limits{}
			}
			if err := m.Limits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelLinks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelLinks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelLinks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelLinks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelLinks = append(m.LabelLinks, &LabelLink{})
			if err := m.LabelLinks[len(m.LabelLinks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceRoute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceRoute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceRoute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hub", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hub == nil {
				m.Hub = &ULID{}
			}
			if err := m.Hub.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &ULID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = &LabelSet{}
			}
			if err := m.Labels.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountServices) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountServices: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountServices: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Services = append(m.Services, &ServiceRoute{})
			if err := m.Services[len(m.Services)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteAdded", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RouteAdded == nil {
				m.RouteAdded = &AccountServices{}
			}
			if err := m.RouteAdded.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteRemoved", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RouteRemoved == nil {
				m.RouteRemoved = &ULID{}
			}
			if err := m.RouteRemoved.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StableId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StableId == nil {
				m.StableId = &ULID{}
			}
			if err := m.StableId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InstanceId == nil {
				m.InstanceId = &ULID{}
			}
			if err := m.InstanceId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locations = append(m.Locations, &NetworkLocation{})
			if err := m.Locations[len(m.Locations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlsKey = append(m.TlsKey[:0], dAtA[iNdEx:postIndex]...)
			if m.TlsKey == nil {
				m.TlsKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsCert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlsCert = append(m.TlsCert[:0], dAtA[iNdEx:postIndex]...)
			if m.TlsCert == nil {
				m.TlsCert = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenPub", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenPub = append(m.TokenPub[:0], dAtA[iNdEx:postIndex]...)
			if m.TokenPub == nil {
				m.TokenPub = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S3AccessKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.S3AccessKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S3SecretKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.S3SecretKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S3Bucket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.S3Bucket = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HubChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HubChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HubChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OldId == nil {
				m.OldId = &ULID{}
			}
			if err := m.OldId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewId == nil {
				m.NewId = &ULID{}
			}
			if err := m.NewId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CentralActivity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CentralActivity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CentralActivity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountServices = append(m.AccountServices, &AccountServices{})
			if err := m.AccountServices[len(m.AccountServices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestStats", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequestStats = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewLabelLinks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewLabelLinks == nil {
				m.NewLabelLinks = &LabelLinks{}
			}
			if err := m.NewLabelLinks.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HubChange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HubChange == nil {
				m.HubChange = &HubChange{}
			}
			if err := m.HubChange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HubActivity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HubActivity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HubActivity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HubReg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HubReg == nil {
				m.HubReg = &HubActivity_HubRegistration{}
			}
			if err := m.HubReg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SentAt == nil {
				m.SentAt = &Timestamp{}
			}
			if err := m.SentAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &HubActivity_HubStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flow = append(m.Flow, &FlowRecord{})
			if err := m.Flow[len(m.Flow)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HubActivity_HubRegistration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HubRegistration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HubRegistration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hub", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hub == nil {
				m.Hub = &ULID{}
			}
			if err := m.Hub.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StableHub", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StableHub == nil {
				m.StableHub = &ULID{}
			}
			if err := m.StableHub.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locations = append(m.Locations, &NetworkLocation{})
			if err := m.Locations[len(m.Locations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HubActivity_HubStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HubStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HubStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentConnections", wireType)
			}
			m.AgentConnections = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgentConnections |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountsSeen", wireType)
			}
			m.AccountsSeen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountsSeen |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountsCached", wireType)
			}
			m.AccountsCached = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountsCached |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CachedBytes", wireType)
			}
			m.CachedBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CachedBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSuccessfulUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastSuccessfulUpdate == nil {
				m.LastSuccessfulUpdate = &Timestamp{}
			}
			if err := m.LastSuccessfulUpdate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastAttemptedUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastAttemptedUpdate == nil {
				m.LastAttemptedUpdate = &Timestamp{}
			}
			if err := m.LastAttemptedUpdate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HubInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HubInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HubInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &ULID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locations = append(m.Locations, &NetworkLocation{})
			if err := m.Locations[len(m.Locations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListOfHubs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListOfHubs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListOfHubs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hubs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hubs = append(m.Hubs, &HubInfo{})
			if err := m.Hubs[len(m.Hubs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HubSync) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HubSync: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HubSync: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &ULID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StableId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StableId == nil {
				m.StableId = &ULID{}
			}
			if err := m.StableId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Services = append(m.Services, &ServiceRequest{})
			if err := m.Services[len(m.Services)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HubSyncResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HubSyncResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HubSyncResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceCount", wireType)
			}
			m.ServiceCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HubRegisterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HubRegisterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HubRegisterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StableId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StableId == nil {
				m.StableId = &ULID{}
			}
			if err := m.StableId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InstanceId == nil {
				m.InstanceId = &ULID{}
			}
			if err := m.InstanceId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locations = append(m.Locations, &NetworkLocation{})
			if err := m.Locations[len(m.Locations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HubRegisterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HubRegisterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HubRegisterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControlTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ControlTime == nil {
				m.ControlTime = &Timestamp{}
			}
			if err := m.ControlTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HubDisconnectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HubDisconnectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HubDisconnectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StableId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StableId == nil {
				m.StableId = &ULID{}
			}
			if err := m.StableId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InstanceId == nil {
				m.InstanceId = &ULID{}
			}
			if err := m.InstanceId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListServicesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListServicesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListServicesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListServicesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListServicesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListServicesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Services = append(m.Services, &Service{})
			if err := m.Services[len(m.Services)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Service) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Service: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Service: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &ULID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hub", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hub == nil {
				m.Hub = &ULID{}
			}
			if err := m.Hub.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = &LabelSet{}
			}
			if err := m.Labels.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata, &KVPair{})
			if err := m.Metadata[len(m.Metadata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Limits == nil {
				m.Limits = &Account_Limits{}
			}
			if err := m.Limits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddLabelLinkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddLabelLinkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddLabelLinkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = &LabelSet{}
			}
			if err := m.Labels.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &LabelSet{}
			}
			if err := m.Target.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Noop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Noop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Noop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveLabelLinkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveLabelLinkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveLabelLinkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = &LabelSet{}
			}
			if err := m.Labels.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capabilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Capabilities = append(m.Capabilities, TokenCapability{})
			if err := m.Capabilities[len(m.Capabilities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValidDuration == nil {
				m.ValidDuration = &Timestamp{}
			}
			if err := m.ValidDuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ControlRegister) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ControlRegister: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ControlRegister: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ControlToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ControlToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ControlToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAccountsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAccountsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAccountsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Marker", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Marker = append(m.Marker[:0], dAtA[iNdEx:postIndex]...)
			if m.Marker == nil {
				m.Marker = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAccountsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAccountsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAccountsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, &Account{})
			if err := m.Accounts[len(m.Accounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextMarker", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextMarker = append(m.NextMarker[:0], dAtA[iNdEx:postIndex]...)
			if m.NextMarker == nil {
				m.NextMarker = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipControl(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowControl
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowControl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowControl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthControl
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupControl
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthControl
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthControl        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowControl          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupControl = fmt.Errorf("proto: unexpected end of group")
)
