// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: edge.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LookupEndpointsRequest struct {
	Account *Account  `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Labels  *LabelSet `protobuf:"bytes,2,opt,name=labels,proto3" json:"labels,omitempty"`
}

func (m *LookupEndpointsRequest) Reset()      { *m = LookupEndpointsRequest{} }
func (*LookupEndpointsRequest) ProtoMessage() {}
func (*LookupEndpointsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab1176173a95651, []int{0}
}
func (m *LookupEndpointsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupEndpointsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LookupEndpointsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LookupEndpointsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupEndpointsRequest.Merge(m, src)
}
func (m *LookupEndpointsRequest) XXX_Size() int {
	return m.Size()
}
func (m *LookupEndpointsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupEndpointsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LookupEndpointsRequest proto.InternalMessageInfo

func (m *LookupEndpointsRequest) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *LookupEndpointsRequest) GetLabels() *LabelSet {
	if m != nil {
		return m.Labels
	}
	return nil
}

type LookupEndpointsResponse struct {
	Routes    []*ServiceRoute `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
	CacheTime int64           `protobuf:"varint,2,opt,name=cache_time,json=cacheTime,proto3" json:"cache_time,omitempty"`
}

func (m *LookupEndpointsResponse) Reset()      { *m = LookupEndpointsResponse{} }
func (*LookupEndpointsResponse) ProtoMessage() {}
func (*LookupEndpointsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab1176173a95651, []int{1}
}
func (m *LookupEndpointsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupEndpointsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LookupEndpointsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LookupEndpointsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupEndpointsResponse.Merge(m, src)
}
func (m *LookupEndpointsResponse) XXX_Size() int {
	return m.Size()
}
func (m *LookupEndpointsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupEndpointsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LookupEndpointsResponse proto.InternalMessageInfo

func (m *LookupEndpointsResponse) GetRoutes() []*ServiceRoute {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *LookupEndpointsResponse) GetCacheTime() int64 {
	if m != nil {
		return m.CacheTime
	}
	return 0
}

type ResolveLabelLinkRequest struct {
	Labels *LabelSet `protobuf:"bytes,1,opt,name=labels,proto3" json:"labels,omitempty"`
}

func (m *ResolveLabelLinkRequest) Reset()      { *m = ResolveLabelLinkRequest{} }
func (*ResolveLabelLinkRequest) ProtoMessage() {}
func (*ResolveLabelLinkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab1176173a95651, []int{2}
}
func (m *ResolveLabelLinkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResolveLabelLinkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResolveLabelLinkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResolveLabelLinkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolveLabelLinkRequest.Merge(m, src)
}
func (m *ResolveLabelLinkRequest) XXX_Size() int {
	return m.Size()
}
func (m *ResolveLabelLinkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolveLabelLinkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResolveLabelLinkRequest proto.InternalMessageInfo

func (m *ResolveLabelLinkRequest) GetLabels() *LabelSet {
	if m != nil {
		return m.Labels
	}
	return nil
}

type ResolveLabelLinkResponse struct {
	Account   *Account        `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Labels    *LabelSet       `protobuf:"bytes,2,opt,name=labels,proto3" json:"labels,omitempty"`
	Limits    *Account_Limits `protobuf:"bytes,3,opt,name=limits,proto3" json:"limits,omitempty"`
	CacheTime int64           `protobuf:"varint,4,opt,name=cache_time,json=cacheTime,proto3" json:"cache_time,omitempty"`
}

func (m *ResolveLabelLinkResponse) Reset()      { *m = ResolveLabelLinkResponse{} }
func (*ResolveLabelLinkResponse) ProtoMessage() {}
func (*ResolveLabelLinkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cab1176173a95651, []int{3}
}
func (m *ResolveLabelLinkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResolveLabelLinkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResolveLabelLinkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResolveLabelLinkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolveLabelLinkResponse.Merge(m, src)
}
func (m *ResolveLabelLinkResponse) XXX_Size() int {
	return m.Size()
}
func (m *ResolveLabelLinkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolveLabelLinkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResolveLabelLinkResponse proto.InternalMessageInfo

func (m *ResolveLabelLinkResponse) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *ResolveLabelLinkResponse) GetLabels() *LabelSet {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ResolveLabelLinkResponse) GetLimits() *Account_Limits {
	if m != nil {
		return m.Limits
	}
	return nil
}

func (m *ResolveLabelLinkResponse) GetCacheTime() int64 {
	if m != nil {
		return m.CacheTime
	}
	return 0
}

func init() {
	proto.RegisterType((*LookupEndpointsRequest)(nil), "pb.LookupEndpointsRequest")
	proto.RegisterType((*LookupEndpointsResponse)(nil), "pb.LookupEndpointsResponse")
	proto.RegisterType((*ResolveLabelLinkRequest)(nil), "pb.ResolveLabelLinkRequest")
	proto.RegisterType((*ResolveLabelLinkResponse)(nil), "pb.ResolveLabelLinkResponse")
}

func init() { proto.RegisterFile("edge.proto", fileDescriptor_cab1176173a95651) }

var fileDescriptor_cab1176173a95651 = []byte{
	// 377 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0x3f, 0x4f, 0xc2, 0x40,
	0x18, 0xc6, 0x7b, 0x60, 0x6a, 0xbc, 0x62, 0x24, 0x37, 0x48, 0x53, 0xf5, 0x42, 0x1a, 0x4d, 0x88,
	0x43, 0x07, 0x74, 0x37, 0x9a, 0xb0, 0x35, 0x31, 0x39, 0xdc, 0x0d, 0x2d, 0x6f, 0xb0, 0xa1, 0xf4,
	0x6a, 0xef, 0xca, 0xec, 0x47, 0xf0, 0x63, 0xb8, 0xb8, 0xf8, 0x29, 0x1c, 0x19, 0x19, 0xa5, 0x2c,
	0x8e, 0x7c, 0x04, 0xd3, 0xa3, 0x8d, 0xa6, 0xa0, 0x93, 0x63, 0xdf, 0xdf, 0xfb, 0xe7, 0x79, 0x9e,
	0x1e, 0xc6, 0x30, 0x1c, 0x81, 0x13, 0x27, 0x5c, 0x72, 0x52, 0x8b, 0x3d, 0xcb, 0x08, 0x07, 0x1e,
	0x84, 0xeb, 0x82, 0xb5, 0x3f, 0xf0, 0x7d, 0x9e, 0x46, 0xb2, 0xfc, 0xf4, 0x79, 0x24, 0x13, 0x5e,
	0x50, 0x1b, 0xf0, 0xa1, 0xcb, 0xf9, 0x38, 0x8d, 0x7b, 0xd1, 0x30, 0xe6, 0x41, 0x24, 0x05, 0x83,
	0xc7, 0x14, 0x84, 0x24, 0x67, 0x78, 0xb7, 0x98, 0x34, 0x51, 0x1b, 0x75, 0x8c, 0xae, 0xe1, 0xc4,
	0x9e, 0x73, 0xbd, 0x2e, 0xb1, 0x92, 0x91, 0x53, 0xac, 0xab, 0x6b, 0xc2, 0xac, 0xa9, 0xae, 0x46,
	0xde, 0xe5, 0xe6, 0x95, 0x3e, 0x48, 0x56, 0x30, 0xdb, 0xc3, 0xad, 0x8d, 0x33, 0x22, 0xe6, 0x91,
	0x00, 0xd2, 0xc1, 0x7a, 0xc2, 0x53, 0x09, 0xc2, 0x44, 0xed, 0x7a, 0xc7, 0xe8, 0x36, 0xf3, 0x05,
	0x7d, 0x48, 0xa6, 0x81, 0x0f, 0x2c, 0x07, 0xac, 0xe0, 0xe4, 0x04, 0x63, 0x7f, 0xe0, 0x3f, 0xc0,
	0xbd, 0x0c, 0x26, 0xa0, 0xce, 0xd5, 0xd9, 0x9e, 0xaa, 0xdc, 0x05, 0x13, 0xb0, 0xaf, 0x70, 0x8b,
	0x81, 0xe0, 0xe1, 0x14, 0xd4, 0x79, 0x37, 0x88, 0xc6, 0xa5, 0x97, 0x6f, 0x91, 0xe8, 0x0f, 0x91,
	0x6f, 0x08, 0x9b, 0x9b, 0x1b, 0x0a, 0x99, 0xff, 0x19, 0x07, 0x39, 0xc7, 0x7a, 0x18, 0x4c, 0x02,
	0x29, 0xcc, 0xba, 0xea, 0x22, 0x3f, 0x76, 0x39, 0xae, 0x22, 0xac, 0xe8, 0xa8, 0xb8, 0xde, 0xa9,
	0xb8, 0xee, 0xbe, 0x22, 0xdc, 0xe8, 0x0d, 0x47, 0x50, 0x24, 0x26, 0x88, 0x8b, 0x0f, 0x2a, 0x51,
	0x13, 0x4b, 0x89, 0xd8, 0xfa, 0x9b, 0xad, 0xa3, 0xad, 0x6c, 0x6d, 0xda, 0xd6, 0xc8, 0x2d, 0x6e,
	0x56, 0x23, 0x21, 0x6a, 0xe4, 0x97, 0xa8, 0xad, 0xe3, 0xed, 0xb0, 0x5c, 0x78, 0x73, 0x39, 0x5b,
	0x50, 0x6d, 0xbe, 0xa0, 0xda, 0x6a, 0x41, 0xd1, 0x53, 0x46, 0xd1, 0x4b, 0x46, 0xd1, 0x7b, 0x46,
	0xd1, 0x2c, 0xa3, 0xe8, 0x23, 0xa3, 0xe8, 0x33, 0xa3, 0xda, 0x2a, 0xa3, 0xe8, 0x79, 0x49, 0xb5,
	0xd9, 0x92, 0x6a, 0xf3, 0x25, 0xd5, 0x3c, 0x5d, 0xbd, 0xd6, 0x8b, 0xaf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xe1, 0x10, 0x28, 0xa7, 0xea, 0x02, 0x00, 0x00,
}

func (this *LookupEndpointsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupEndpointsRequest)
	if !ok {
		that2, ok := that.(LookupEndpointsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Account.Equal(that1.Account) {
		return false
	}
	if !this.Labels.Equal(that1.Labels) {
		return false
	}
	return true
}
func (this *LookupEndpointsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LookupEndpointsResponse)
	if !ok {
		that2, ok := that.(LookupEndpointsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Routes) != len(that1.Routes) {
		return false
	}
	for i := range this.Routes {
		if !this.Routes[i].Equal(that1.Routes[i]) {
			return false
		}
	}
	if this.CacheTime != that1.CacheTime {
		return false
	}
	return true
}
func (this *ResolveLabelLinkRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResolveLabelLinkRequest)
	if !ok {
		that2, ok := that.(ResolveLabelLinkRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Labels.Equal(that1.Labels) {
		return false
	}
	return true
}
func (this *ResolveLabelLinkResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResolveLabelLinkResponse)
	if !ok {
		that2, ok := that.(ResolveLabelLinkResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Account.Equal(that1.Account) {
		return false
	}
	if !this.Labels.Equal(that1.Labels) {
		return false
	}
	if !this.Limits.Equal(that1.Limits) {
		return false
	}
	if this.CacheTime != that1.CacheTime {
		return false
	}
	return true
}
func (this *LookupEndpointsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.LookupEndpointsRequest{")
	if this.Account != nil {
		s = append(s, "Account: "+fmt.Sprintf("%#v", this.Account)+",\n")
	}
	if this.Labels != nil {
		s = append(s, "Labels: "+fmt.Sprintf("%#v", this.Labels)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupEndpointsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.LookupEndpointsResponse{")
	if this.Routes != nil {
		s = append(s, "Routes: "+fmt.Sprintf("%#v", this.Routes)+",\n")
	}
	s = append(s, "CacheTime: "+fmt.Sprintf("%#v", this.CacheTime)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResolveLabelLinkRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ResolveLabelLinkRequest{")
	if this.Labels != nil {
		s = append(s, "Labels: "+fmt.Sprintf("%#v", this.Labels)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResolveLabelLinkResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.ResolveLabelLinkResponse{")
	if this.Account != nil {
		s = append(s, "Account: "+fmt.Sprintf("%#v", this.Account)+",\n")
	}
	if this.Labels != nil {
		s = append(s, "Labels: "+fmt.Sprintf("%#v", this.Labels)+",\n")
	}
	if this.Limits != nil {
		s = append(s, "Limits: "+fmt.Sprintf("%#v", this.Limits)+",\n")
	}
	s = append(s, "CacheTime: "+fmt.Sprintf("%#v", this.CacheTime)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringEdge(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EdgeServicesClient is the client API for EdgeServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EdgeServicesClient interface {
	LookupEndpoints(ctx context.Context, in *LookupEndpointsRequest, opts ...grpc.CallOption) (*LookupEndpointsResponse, error)
	ResolveLabelLink(ctx context.Context, in *ResolveLabelLinkRequest, opts ...grpc.CallOption) (*ResolveLabelLinkResponse, error)
}

type edgeServicesClient struct {
	cc *grpc.ClientConn
}

func NewEdgeServicesClient(cc *grpc.ClientConn) EdgeServicesClient {
	return &edgeServicesClient{cc}
}

func (c *edgeServicesClient) LookupEndpoints(ctx context.Context, in *LookupEndpointsRequest, opts ...grpc.CallOption) (*LookupEndpointsResponse, error) {
	out := new(LookupEndpointsResponse)
	err := c.cc.Invoke(ctx, "/pb.EdgeServices/LookupEndpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeServicesClient) ResolveLabelLink(ctx context.Context, in *ResolveLabelLinkRequest, opts ...grpc.CallOption) (*ResolveLabelLinkResponse, error) {
	out := new(ResolveLabelLinkResponse)
	err := c.cc.Invoke(ctx, "/pb.EdgeServices/ResolveLabelLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EdgeServicesServer is the server API for EdgeServices service.
type EdgeServicesServer interface {
	LookupEndpoints(context.Context, *LookupEndpointsRequest) (*LookupEndpointsResponse, error)
	ResolveLabelLink(context.Context, *ResolveLabelLinkRequest) (*ResolveLabelLinkResponse, error)
}

// UnimplementedEdgeServicesServer can be embedded to have forward compatible implementations.
type UnimplementedEdgeServicesServer struct {
}

func (*UnimplementedEdgeServicesServer) LookupEndpoints(ctx context.Context, req *LookupEndpointsRequest) (*LookupEndpointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupEndpoints not implemented")
}
func (*UnimplementedEdgeServicesServer) ResolveLabelLink(ctx context.Context, req *ResolveLabelLinkRequest) (*ResolveLabelLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveLabelLink not implemented")
}

func RegisterEdgeServicesServer(s *grpc.Server, srv EdgeServicesServer) {
	s.RegisterService(&_EdgeServices_serviceDesc, srv)
}

func _EdgeServices_LookupEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupEndpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeServicesServer).LookupEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EdgeServices/LookupEndpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeServicesServer).LookupEndpoints(ctx, req.(*LookupEndpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeServices_ResolveLabelLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveLabelLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeServicesServer).ResolveLabelLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EdgeServices/ResolveLabelLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeServicesServer).ResolveLabelLink(ctx, req.(*ResolveLabelLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EdgeServices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.EdgeServices",
	HandlerType: (*EdgeServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LookupEndpoints",
			Handler:    _EdgeServices_LookupEndpoints_Handler,
		},
		{
			MethodName: "ResolveLabelLink",
			Handler:    _EdgeServices_ResolveLabelLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "edge.proto",
}

func (m *LookupEndpointsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupEndpointsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupEndpointsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Labels != nil {
		{
			size, err := m.Labels.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEdge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEdge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupEndpointsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupEndpointsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupEndpointsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CacheTime != 0 {
		i = encodeVarintEdge(dAtA, i, uint64(m.CacheTime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEdge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResolveLabelLinkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResolveLabelLinkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResolveLabelLinkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Labels != nil {
		{
			size, err := m.Labels.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEdge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResolveLabelLinkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResolveLabelLinkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResolveLabelLinkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CacheTime != 0 {
		i = encodeVarintEdge(dAtA, i, uint64(m.CacheTime))
		i--
		dAtA[i] = 0x20
	}
	if m.Limits != nil {
		{
			size, err := m.Limits.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEdge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Labels != nil {
		{
			size, err := m.Labels.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEdge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEdge(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEdge(dAtA []byte, offset int, v uint64) int {
	offset -= sovEdge(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LookupEndpointsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovEdge(uint64(l))
	}
	if m.Labels != nil {
		l = m.Labels.Size()
		n += 1 + l + sovEdge(uint64(l))
	}
	return n
}

func (m *LookupEndpointsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovEdge(uint64(l))
		}
	}
	if m.CacheTime != 0 {
		n += 1 + sovEdge(uint64(m.CacheTime))
	}
	return n
}

func (m *ResolveLabelLinkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Labels != nil {
		l = m.Labels.Size()
		n += 1 + l + sovEdge(uint64(l))
	}
	return n
}

func (m *ResolveLabelLinkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovEdge(uint64(l))
	}
	if m.Labels != nil {
		l = m.Labels.Size()
		n += 1 + l + sovEdge(uint64(l))
	}
	if m.Limits != nil {
		l = m.Limits.Size()
		n += 1 + l + sovEdge(uint64(l))
	}
	if m.CacheTime != 0 {
		n += 1 + sovEdge(uint64(m.CacheTime))
	}
	return n
}

func sovEdge(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEdge(x uint64) (n int) {
	return sovEdge(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LookupEndpointsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupEndpointsRequest{`,
		`Account:` + strings.Replace(fmt.Sprintf("%v", this.Account), "Account", "Account", 1) + `,`,
		`Labels:` + strings.Replace(fmt.Sprintf("%v", this.Labels), "LabelSet", "LabelSet", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupEndpointsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRoutes := "[]*ServiceRoute{"
	for _, f := range this.Routes {
		repeatedStringForRoutes += strings.Replace(fmt.Sprintf("%v", f), "ServiceRoute", "ServiceRoute", 1) + ","
	}
	repeatedStringForRoutes += "}"
	s := strings.Join([]string{`&LookupEndpointsResponse{`,
		`Routes:` + repeatedStringForRoutes + `,`,
		`CacheTime:` + fmt.Sprintf("%v", this.CacheTime) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResolveLabelLinkRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResolveLabelLinkRequest{`,
		`Labels:` + strings.Replace(fmt.Sprintf("%v", this.Labels), "LabelSet", "LabelSet", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResolveLabelLinkResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResolveLabelLinkResponse{`,
		`Account:` + strings.Replace(fmt.Sprintf("%v", this.Account), "Account", "Account", 1) + `,`,
		`Labels:` + strings.Replace(fmt.Sprintf("%v", this.Labels), "LabelSet", "LabelSet", 1) + `,`,
		`Limits:` + strings.Replace(fmt.Sprintf("%v", this.Limits), "Account_Limits", "Account_Limits", 1) + `,`,
		`CacheTime:` + fmt.Sprintf("%v", this.CacheTime) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringEdge(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LookupEndpointsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEdge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupEndpointsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupEndpointsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEdge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEdge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEdge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEdge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = &LabelSet{}
			}
			if err := m.Labels.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEdge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEdge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupEndpointsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEdge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupEndpointsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupEndpointsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEdge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEdge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &ServiceRoute{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheTime", wireType)
			}
			m.CacheTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CacheTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEdge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEdge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResolveLabelLinkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEdge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResolveLabelLinkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResolveLabelLinkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEdge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEdge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = &LabelSet{}
			}
			if err := m.Labels.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEdge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEdge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResolveLabelLinkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEdge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResolveLabelLinkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResolveLabelLinkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEdge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEdge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEdge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEdge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = &LabelSet{}
			}
			if err := m.Labels.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEdge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEdge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Limits == nil {
				m.Limits = &Account_Limits{}
			}
			if err := m.Limits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheTime", wireType)
			}
			m.CacheTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CacheTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEdge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEdge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEdge(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEdge
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEdge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEdge
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEdge
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEdge
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEdge        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEdge          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEdge = fmt.Errorf("proto: unexpected end of group")
)
