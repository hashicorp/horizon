// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flow.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FlowStream struct {
	FlowId      *ULID      `protobuf:"bytes,1,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
	HubId       *ULID      `protobuf:"bytes,2,opt,name=hub_id,json=hubId,proto3" json:"hub_id,omitempty"`
	AgentId     *ULID      `protobuf:"bytes,3,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	ServiceId   *ULID      `protobuf:"bytes,4,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Account     *Account   `protobuf:"bytes,5,opt,name=account,proto3" json:"account,omitempty"`
	Labels      *LabelSet  `protobuf:"bytes,6,opt,name=labels,proto3" json:"labels,omitempty"`
	StartedAt   *Timestamp `protobuf:"bytes,10,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	EndedAt     *Timestamp `protobuf:"bytes,11,opt,name=ended_at,json=endedAt,proto3" json:"ended_at,omitempty"`
	NumMessages int64      `protobuf:"varint,12,opt,name=num_messages,json=numMessages,proto3" json:"num_messages,omitempty"`
	NumBytes    int64      `protobuf:"varint,13,opt,name=num_bytes,json=numBytes,proto3" json:"num_bytes,omitempty"`
	Duration    int64      `protobuf:"varint,14,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *FlowStream) Reset()      { *m = FlowStream{} }
func (*FlowStream) ProtoMessage() {}
func (*FlowStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb3fc33c49933823, []int{0}
}
func (m *FlowStream) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlowStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlowStream.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlowStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowStream.Merge(m, src)
}
func (m *FlowStream) XXX_Size() int {
	return m.Size()
}
func (m *FlowStream) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowStream.DiscardUnknown(m)
}

var xxx_messageInfo_FlowStream proto.InternalMessageInfo

func (m *FlowStream) GetFlowId() *ULID {
	if m != nil {
		return m.FlowId
	}
	return nil
}

func (m *FlowStream) GetHubId() *ULID {
	if m != nil {
		return m.HubId
	}
	return nil
}

func (m *FlowStream) GetAgentId() *ULID {
	if m != nil {
		return m.AgentId
	}
	return nil
}

func (m *FlowStream) GetServiceId() *ULID {
	if m != nil {
		return m.ServiceId
	}
	return nil
}

func (m *FlowStream) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *FlowStream) GetLabels() *LabelSet {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *FlowStream) GetStartedAt() *Timestamp {
	if m != nil {
		return m.StartedAt
	}
	return nil
}

func (m *FlowStream) GetEndedAt() *Timestamp {
	if m != nil {
		return m.EndedAt
	}
	return nil
}

func (m *FlowStream) GetNumMessages() int64 {
	if m != nil {
		return m.NumMessages
	}
	return 0
}

func (m *FlowStream) GetNumBytes() int64 {
	if m != nil {
		return m.NumBytes
	}
	return 0
}

func (m *FlowStream) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

type FlowRecord struct {
	Agent    *FlowRecord_AgentConnection `protobuf:"bytes,1,opt,name=agent,proto3" json:"agent,omitempty"`
	Stream   *FlowStream                 `protobuf:"bytes,2,opt,name=stream,proto3" json:"stream,omitempty"`
	HubStats *FlowRecord_HubStats        `protobuf:"bytes,3,opt,name=hub_stats,json=hubStats,proto3" json:"hub_stats,omitempty"`
}

func (m *FlowRecord) Reset()      { *m = FlowRecord{} }
func (*FlowRecord) ProtoMessage() {}
func (*FlowRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb3fc33c49933823, []int{1}
}
func (m *FlowRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlowRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlowRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlowRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowRecord.Merge(m, src)
}
func (m *FlowRecord) XXX_Size() int {
	return m.Size()
}
func (m *FlowRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowRecord.DiscardUnknown(m)
}

var xxx_messageInfo_FlowRecord proto.InternalMessageInfo

func (m *FlowRecord) GetAgent() *FlowRecord_AgentConnection {
	if m != nil {
		return m.Agent
	}
	return nil
}

func (m *FlowRecord) GetStream() *FlowStream {
	if m != nil {
		return m.Stream
	}
	return nil
}

func (m *FlowRecord) GetHubStats() *FlowRecord_HubStats {
	if m != nil {
		return m.HubStats
	}
	return nil
}

type FlowRecord_AgentConnection struct {
	HubId         *ULID      `protobuf:"bytes,1,opt,name=hub_id,json=hubId,proto3" json:"hub_id,omitempty"`
	AgentId       *ULID      `protobuf:"bytes,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Account       *Account   `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
	StartedAt     *Timestamp `protobuf:"bytes,10,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	EndedAt       *Timestamp `protobuf:"bytes,11,opt,name=ended_at,json=endedAt,proto3" json:"ended_at,omitempty"`
	NumServices   int32      `protobuf:"varint,12,opt,name=num_services,json=numServices,proto3" json:"num_services,omitempty"`
	ActiveStreams int64      `protobuf:"varint,13,opt,name=active_streams,json=activeStreams,proto3" json:"active_streams,omitempty"`
}

func (m *FlowRecord_AgentConnection) Reset()      { *m = FlowRecord_AgentConnection{} }
func (*FlowRecord_AgentConnection) ProtoMessage() {}
func (*FlowRecord_AgentConnection) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb3fc33c49933823, []int{1, 0}
}
func (m *FlowRecord_AgentConnection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlowRecord_AgentConnection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlowRecord_AgentConnection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlowRecord_AgentConnection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowRecord_AgentConnection.Merge(m, src)
}
func (m *FlowRecord_AgentConnection) XXX_Size() int {
	return m.Size()
}
func (m *FlowRecord_AgentConnection) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowRecord_AgentConnection.DiscardUnknown(m)
}

var xxx_messageInfo_FlowRecord_AgentConnection proto.InternalMessageInfo

func (m *FlowRecord_AgentConnection) GetHubId() *ULID {
	if m != nil {
		return m.HubId
	}
	return nil
}

func (m *FlowRecord_AgentConnection) GetAgentId() *ULID {
	if m != nil {
		return m.AgentId
	}
	return nil
}

func (m *FlowRecord_AgentConnection) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *FlowRecord_AgentConnection) GetStartedAt() *Timestamp {
	if m != nil {
		return m.StartedAt
	}
	return nil
}

func (m *FlowRecord_AgentConnection) GetEndedAt() *Timestamp {
	if m != nil {
		return m.EndedAt
	}
	return nil
}

func (m *FlowRecord_AgentConnection) GetNumServices() int32 {
	if m != nil {
		return m.NumServices
	}
	return 0
}

func (m *FlowRecord_AgentConnection) GetActiveStreams() int64 {
	if m != nil {
		return m.ActiveStreams
	}
	return 0
}

type FlowRecord_HubStats struct {
	HubId        *ULID `protobuf:"bytes,1,opt,name=hub_id,json=hubId,proto3" json:"hub_id,omitempty"`
	ActiveAgents int64 `protobuf:"varint,2,opt,name=active_agents,json=activeAgents,proto3" json:"active_agents,omitempty"`
	TotalAgents  int64 `protobuf:"varint,3,opt,name=total_agents,json=totalAgents,proto3" json:"total_agents,omitempty"`
	Services     int64 `protobuf:"varint,4,opt,name=services,proto3" json:"services,omitempty"`
}

func (m *FlowRecord_HubStats) Reset()      { *m = FlowRecord_HubStats{} }
func (*FlowRecord_HubStats) ProtoMessage() {}
func (*FlowRecord_HubStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb3fc33c49933823, []int{1, 1}
}
func (m *FlowRecord_HubStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlowRecord_HubStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlowRecord_HubStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlowRecord_HubStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowRecord_HubStats.Merge(m, src)
}
func (m *FlowRecord_HubStats) XXX_Size() int {
	return m.Size()
}
func (m *FlowRecord_HubStats) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowRecord_HubStats.DiscardUnknown(m)
}

var xxx_messageInfo_FlowRecord_HubStats proto.InternalMessageInfo

func (m *FlowRecord_HubStats) GetHubId() *ULID {
	if m != nil {
		return m.HubId
	}
	return nil
}

func (m *FlowRecord_HubStats) GetActiveAgents() int64 {
	if m != nil {
		return m.ActiveAgents
	}
	return 0
}

func (m *FlowRecord_HubStats) GetTotalAgents() int64 {
	if m != nil {
		return m.TotalAgents
	}
	return 0
}

func (m *FlowRecord_HubStats) GetServices() int64 {
	if m != nil {
		return m.Services
	}
	return 0
}

type FlowTopSnapshot struct {
	Records []*FlowStream `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (m *FlowTopSnapshot) Reset()      { *m = FlowTopSnapshot{} }
func (*FlowTopSnapshot) ProtoMessage() {}
func (*FlowTopSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb3fc33c49933823, []int{2}
}
func (m *FlowTopSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlowTopSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlowTopSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlowTopSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowTopSnapshot.Merge(m, src)
}
func (m *FlowTopSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *FlowTopSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowTopSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_FlowTopSnapshot proto.InternalMessageInfo

func (m *FlowTopSnapshot) GetRecords() []*FlowStream {
	if m != nil {
		return m.Records
	}
	return nil
}

type FlowTopRequest struct {
	MaxRecords int32 `protobuf:"varint,1,opt,name=max_records,json=maxRecords,proto3" json:"max_records,omitempty"`
}

func (m *FlowTopRequest) Reset()      { *m = FlowTopRequest{} }
func (*FlowTopRequest) ProtoMessage() {}
func (*FlowTopRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb3fc33c49933823, []int{3}
}
func (m *FlowTopRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlowTopRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlowTopRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlowTopRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowTopRequest.Merge(m, src)
}
func (m *FlowTopRequest) XXX_Size() int {
	return m.Size()
}
func (m *FlowTopRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowTopRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FlowTopRequest proto.InternalMessageInfo

func (m *FlowTopRequest) GetMaxRecords() int32 {
	if m != nil {
		return m.MaxRecords
	}
	return 0
}

func init() {
	proto.RegisterType((*FlowStream)(nil), "pb.FlowStream")
	proto.RegisterType((*FlowRecord)(nil), "pb.FlowRecord")
	proto.RegisterType((*FlowRecord_AgentConnection)(nil), "pb.FlowRecord.AgentConnection")
	proto.RegisterType((*FlowRecord_HubStats)(nil), "pb.FlowRecord.HubStats")
	proto.RegisterType((*FlowTopSnapshot)(nil), "pb.FlowTopSnapshot")
	proto.RegisterType((*FlowTopRequest)(nil), "pb.FlowTopRequest")
}

func init() { proto.RegisterFile("flow.proto", fileDescriptor_bb3fc33c49933823) }

var fileDescriptor_bb3fc33c49933823 = []byte{
	// 647 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0xcb, 0x6e, 0xd3, 0x4e,
	0x14, 0xc6, 0x3d, 0x71, 0x93, 0x38, 0x27, 0x97, 0x4a, 0xf3, 0x5f, 0xfc, 0x2d, 0x23, 0x4d, 0xdb,
	0x40, 0xa1, 0x0b, 0x14, 0x89, 0xd2, 0x5d, 0x57, 0x69, 0x11, 0x22, 0x52, 0x61, 0xe1, 0x94, 0x75,
	0x34, 0x8e, 0x87, 0x26, 0x52, 0xec, 0x31, 0x9e, 0x71, 0x5b, 0x76, 0xbc, 0x01, 0xbc, 0x01, 0x2c,
	0x79, 0x14, 0x96, 0xdd, 0x20, 0x75, 0x49, 0xdd, 0x0d, 0xcb, 0x3e, 0x02, 0x9a, 0x8b, 0xdb, 0x2a,
	0x2a, 0x97, 0x0d, 0xbb, 0x9e, 0xf3, 0xfd, 0x8e, 0xe7, 0xf4, 0xfb, 0x8e, 0x02, 0xf0, 0x66, 0xc1,
	0x4f, 0x06, 0x59, 0xce, 0x25, 0xc7, 0xb5, 0x2c, 0x0a, 0xa0, 0x58, 0xcc, 0x63, 0x53, 0x07, 0xab,
	0x72, 0x9e, 0x30, 0x21, 0x69, 0x92, 0xd9, 0x46, 0x7b, 0x41, 0x23, 0xb6, 0xb0, 0x45, 0x97, 0x4e,
	0xa7, 0xbc, 0x48, 0xa5, 0x29, 0xfb, 0x9f, 0x5c, 0x80, 0xe7, 0x0b, 0x7e, 0x32, 0x96, 0x39, 0xa3,
	0x09, 0xde, 0x80, 0xa6, 0xfa, 0xf2, 0x64, 0x1e, 0xfb, 0x68, 0x1d, 0x6d, 0xb5, 0xb7, 0xbd, 0x41,
	0x16, 0x0d, 0x5e, 0x1f, 0x8c, 0x9e, 0x85, 0x0d, 0x25, 0x8c, 0x62, 0xbc, 0x06, 0x8d, 0x59, 0x11,
	0x29, 0xa2, 0xb6, 0x44, 0xd4, 0x67, 0x45, 0x34, 0x8a, 0xf1, 0x7d, 0xf0, 0xe8, 0x11, 0x4b, 0xa5,
	0x42, 0xdc, 0x25, 0xa4, 0xa9, 0x95, 0x51, 0x8c, 0x1f, 0x01, 0x08, 0x96, 0x1f, 0xcf, 0xa7, 0x4c,
	0x61, 0x2b, 0x4b, 0x58, 0xcb, 0x6a, 0xa3, 0x18, 0x6f, 0x42, 0xd3, 0x6e, 0xec, 0xd7, 0x35, 0xd5,
	0x56, 0xd4, 0xd0, 0xb4, 0xc2, 0x4a, 0xc3, 0x0f, 0xa0, 0xa1, 0xff, 0x4b, 0xe1, 0x37, 0x34, 0xd5,
	0x51, 0xd4, 0x81, 0xea, 0x8c, 0x99, 0x0c, 0xad, 0x86, 0x1f, 0x03, 0x08, 0x49, 0x73, 0xc9, 0xe2,
	0x09, 0x95, 0x3e, 0x68, 0xb2, 0xab, 0xc8, 0xc3, 0xca, 0xb2, 0xb0, 0x65, 0x81, 0xa1, 0xc4, 0x5b,
	0xe0, 0xb1, 0x34, 0x36, 0x6c, 0xfb, 0x2e, 0xb6, 0xa9, 0xe5, 0xa1, 0xc4, 0x1b, 0xd0, 0x49, 0x8b,
	0x64, 0x92, 0x30, 0x21, 0xe8, 0x11, 0x13, 0x7e, 0x67, 0x1d, 0x6d, 0xb9, 0x61, 0x3b, 0x2d, 0x92,
	0x97, 0xb6, 0x85, 0xef, 0x41, 0x4b, 0x21, 0xd1, 0x3b, 0xc9, 0x84, 0xdf, 0xd5, 0xba, 0x97, 0x16,
	0xc9, 0x9e, 0xaa, 0x71, 0x00, 0x5e, 0x5c, 0xe4, 0x54, 0xce, 0x79, 0xea, 0xf7, 0x8c, 0x56, 0xd5,
	0xfd, 0x6f, 0x2b, 0x26, 0xa1, 0x90, 0x4d, 0x79, 0x1e, 0xe3, 0x1d, 0xa8, 0x6b, 0x0f, 0x6d, 0x3e,
	0x44, 0x6d, 0x74, 0x23, 0x0f, 0x86, 0x4a, 0xdb, 0xe7, 0x69, 0xca, 0xa6, 0x6a, 0x3a, 0x34, 0x30,
	0x7e, 0x08, 0x0d, 0xa1, 0x13, 0xb6, 0xa1, 0xf5, 0xaa, 0x31, 0x93, 0x7b, 0x68, 0x55, 0xbc, 0x03,
	0x2d, 0x15, 0xae, 0x90, 0x54, 0x0a, 0x1b, 0xde, 0xff, 0x4b, 0x2f, 0xbc, 0x28, 0xa2, 0xb1, 0x92,
	0x43, 0x6f, 0x66, 0xff, 0x0a, 0x3e, 0xd7, 0x60, 0x75, 0xe9, 0xe1, 0x5b, 0x67, 0x82, 0xfe, 0x7c,
	0x26, 0xb5, 0x5f, 0x9d, 0xc9, 0xad, 0xf4, 0xdd, 0xdf, 0xa4, 0xff, 0x8f, 0x73, 0xb5, 0xd7, 0x68,
	0x72, 0xad, 0xeb, 0x5c, 0xc7, 0xb6, 0x85, 0x37, 0xa1, 0x47, 0xa7, 0x72, 0x7e, 0xcc, 0x26, 0xc6,
	0xc2, 0x2a, 0xdc, 0xae, 0xe9, 0x1a, 0x7f, 0x45, 0xf0, 0x01, 0x81, 0x57, 0x39, 0xf7, 0x37, 0xde,
	0xd8, 0xf1, 0x89, 0x36, 0x42, 0x68, 0x83, 0xdc, 0xb0, 0x63, 0x9a, 0xda, 0x6a, 0xa1, 0x96, 0x93,
	0x5c, 0xd2, 0x45, 0xc5, 0xb8, 0xe6, 0xe8, 0x74, 0xcf, 0x22, 0x01, 0x78, 0xd7, 0xbb, 0xaf, 0x98,
	0xbb, 0xaa, 0xea, 0xfe, 0x2e, 0xac, 0xaa, 0x54, 0x0f, 0x79, 0x36, 0x4e, 0x69, 0x26, 0x66, 0x5c,
	0x19, 0xd3, 0xcc, 0x75, 0xc8, 0xc2, 0x47, 0xeb, 0xee, 0x1d, 0x67, 0x52, 0xc9, 0xfd, 0x27, 0xd0,
	0xb3, 0xc3, 0x21, 0x7b, 0x5b, 0x30, 0x21, 0xf1, 0x1a, 0xb4, 0x13, 0x7a, 0x3a, 0xb9, 0x99, 0x57,
	0x4e, 0x41, 0x42, 0x4f, 0xcd, 0xd9, 0x88, 0xed, 0x57, 0xd7, 0xef, 0x85, 0x2c, 0xe3, 0xb9, 0x64,
	0x39, 0xde, 0x85, 0xde, 0x7e, 0x91, 0xe7, 0x2c, 0x95, 0x56, 0xc1, 0xb8, 0x7a, 0xf0, 0xe6, 0xcb,
	0xc1, 0x7f, 0xb7, 0x7a, 0xd5, 0xaa, 0x7d, 0x67, 0x6f, 0xe7, 0xec, 0x82, 0x38, 0xe7, 0x17, 0xc4,
	0xb9, 0xba, 0x20, 0xe8, 0x7d, 0x49, 0xd0, 0x97, 0x92, 0xa0, 0xaf, 0x25, 0x41, 0x67, 0x25, 0x41,
	0xdf, 0x4b, 0x82, 0x7e, 0x94, 0xc4, 0xb9, 0x2a, 0x09, 0xfa, 0x78, 0x49, 0x9c, 0xb3, 0x4b, 0xe2,
	0x9c, 0x5f, 0x12, 0x27, 0x6a, 0xe8, 0x9f, 0xbd, 0xa7, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x49,
	0xf4, 0xca, 0xc4, 0x41, 0x05, 0x00, 0x00,
}

func (this *FlowStream) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlowStream)
	if !ok {
		that2, ok := that.(FlowStream)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FlowId.Equal(that1.FlowId) {
		return false
	}
	if !this.HubId.Equal(that1.HubId) {
		return false
	}
	if !this.AgentId.Equal(that1.AgentId) {
		return false
	}
	if !this.ServiceId.Equal(that1.ServiceId) {
		return false
	}
	if !this.Account.Equal(that1.Account) {
		return false
	}
	if !this.Labels.Equal(that1.Labels) {
		return false
	}
	if !this.StartedAt.Equal(that1.StartedAt) {
		return false
	}
	if !this.EndedAt.Equal(that1.EndedAt) {
		return false
	}
	if this.NumMessages != that1.NumMessages {
		return false
	}
	if this.NumBytes != that1.NumBytes {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	return true
}
func (this *FlowRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlowRecord)
	if !ok {
		that2, ok := that.(FlowRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Agent.Equal(that1.Agent) {
		return false
	}
	if !this.Stream.Equal(that1.Stream) {
		return false
	}
	if !this.HubStats.Equal(that1.HubStats) {
		return false
	}
	return true
}
func (this *FlowRecord_AgentConnection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlowRecord_AgentConnection)
	if !ok {
		that2, ok := that.(FlowRecord_AgentConnection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HubId.Equal(that1.HubId) {
		return false
	}
	if !this.AgentId.Equal(that1.AgentId) {
		return false
	}
	if !this.Account.Equal(that1.Account) {
		return false
	}
	if !this.StartedAt.Equal(that1.StartedAt) {
		return false
	}
	if !this.EndedAt.Equal(that1.EndedAt) {
		return false
	}
	if this.NumServices != that1.NumServices {
		return false
	}
	if this.ActiveStreams != that1.ActiveStreams {
		return false
	}
	return true
}
func (this *FlowRecord_HubStats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlowRecord_HubStats)
	if !ok {
		that2, ok := that.(FlowRecord_HubStats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HubId.Equal(that1.HubId) {
		return false
	}
	if this.ActiveAgents != that1.ActiveAgents {
		return false
	}
	if this.TotalAgents != that1.TotalAgents {
		return false
	}
	if this.Services != that1.Services {
		return false
	}
	return true
}
func (this *FlowTopSnapshot) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlowTopSnapshot)
	if !ok {
		that2, ok := that.(FlowTopSnapshot)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Records) != len(that1.Records) {
		return false
	}
	for i := range this.Records {
		if !this.Records[i].Equal(that1.Records[i]) {
			return false
		}
	}
	return true
}
func (this *FlowTopRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FlowTopRequest)
	if !ok {
		that2, ok := that.(FlowTopRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxRecords != that1.MaxRecords {
		return false
	}
	return true
}
func (this *FlowStream) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&pb.FlowStream{")
	if this.FlowId != nil {
		s = append(s, "FlowId: "+fmt.Sprintf("%#v", this.FlowId)+",\n")
	}
	if this.HubId != nil {
		s = append(s, "HubId: "+fmt.Sprintf("%#v", this.HubId)+",\n")
	}
	if this.AgentId != nil {
		s = append(s, "AgentId: "+fmt.Sprintf("%#v", this.AgentId)+",\n")
	}
	if this.ServiceId != nil {
		s = append(s, "ServiceId: "+fmt.Sprintf("%#v", this.ServiceId)+",\n")
	}
	if this.Account != nil {
		s = append(s, "Account: "+fmt.Sprintf("%#v", this.Account)+",\n")
	}
	if this.Labels != nil {
		s = append(s, "Labels: "+fmt.Sprintf("%#v", this.Labels)+",\n")
	}
	if this.StartedAt != nil {
		s = append(s, "StartedAt: "+fmt.Sprintf("%#v", this.StartedAt)+",\n")
	}
	if this.EndedAt != nil {
		s = append(s, "EndedAt: "+fmt.Sprintf("%#v", this.EndedAt)+",\n")
	}
	s = append(s, "NumMessages: "+fmt.Sprintf("%#v", this.NumMessages)+",\n")
	s = append(s, "NumBytes: "+fmt.Sprintf("%#v", this.NumBytes)+",\n")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FlowRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.FlowRecord{")
	if this.Agent != nil {
		s = append(s, "Agent: "+fmt.Sprintf("%#v", this.Agent)+",\n")
	}
	if this.Stream != nil {
		s = append(s, "Stream: "+fmt.Sprintf("%#v", this.Stream)+",\n")
	}
	if this.HubStats != nil {
		s = append(s, "HubStats: "+fmt.Sprintf("%#v", this.HubStats)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FlowRecord_AgentConnection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.FlowRecord_AgentConnection{")
	if this.HubId != nil {
		s = append(s, "HubId: "+fmt.Sprintf("%#v", this.HubId)+",\n")
	}
	if this.AgentId != nil {
		s = append(s, "AgentId: "+fmt.Sprintf("%#v", this.AgentId)+",\n")
	}
	if this.Account != nil {
		s = append(s, "Account: "+fmt.Sprintf("%#v", this.Account)+",\n")
	}
	if this.StartedAt != nil {
		s = append(s, "StartedAt: "+fmt.Sprintf("%#v", this.StartedAt)+",\n")
	}
	if this.EndedAt != nil {
		s = append(s, "EndedAt: "+fmt.Sprintf("%#v", this.EndedAt)+",\n")
	}
	s = append(s, "NumServices: "+fmt.Sprintf("%#v", this.NumServices)+",\n")
	s = append(s, "ActiveStreams: "+fmt.Sprintf("%#v", this.ActiveStreams)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FlowRecord_HubStats) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.FlowRecord_HubStats{")
	if this.HubId != nil {
		s = append(s, "HubId: "+fmt.Sprintf("%#v", this.HubId)+",\n")
	}
	s = append(s, "ActiveAgents: "+fmt.Sprintf("%#v", this.ActiveAgents)+",\n")
	s = append(s, "TotalAgents: "+fmt.Sprintf("%#v", this.TotalAgents)+",\n")
	s = append(s, "Services: "+fmt.Sprintf("%#v", this.Services)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FlowTopSnapshot) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.FlowTopSnapshot{")
	if this.Records != nil {
		s = append(s, "Records: "+fmt.Sprintf("%#v", this.Records)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FlowTopRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.FlowTopRequest{")
	s = append(s, "MaxRecords: "+fmt.Sprintf("%#v", this.MaxRecords)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFlow(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FlowTopReporterClient is the client API for FlowTopReporter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FlowTopReporterClient interface {
	CurrentFlowTop(ctx context.Context, in *FlowTopRequest, opts ...grpc.CallOption) (*FlowTopSnapshot, error)
}

type flowTopReporterClient struct {
	cc *grpc.ClientConn
}

func NewFlowTopReporterClient(cc *grpc.ClientConn) FlowTopReporterClient {
	return &flowTopReporterClient{cc}
}

func (c *flowTopReporterClient) CurrentFlowTop(ctx context.Context, in *FlowTopRequest, opts ...grpc.CallOption) (*FlowTopSnapshot, error) {
	out := new(FlowTopSnapshot)
	err := c.cc.Invoke(ctx, "/pb.FlowTopReporter/CurrentFlowTop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlowTopReporterServer is the server API for FlowTopReporter service.
type FlowTopReporterServer interface {
	CurrentFlowTop(context.Context, *FlowTopRequest) (*FlowTopSnapshot, error)
}

// UnimplementedFlowTopReporterServer can be embedded to have forward compatible implementations.
type UnimplementedFlowTopReporterServer struct {
}

func (*UnimplementedFlowTopReporterServer) CurrentFlowTop(ctx context.Context, req *FlowTopRequest) (*FlowTopSnapshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentFlowTop not implemented")
}

func RegisterFlowTopReporterServer(s *grpc.Server, srv FlowTopReporterServer) {
	s.RegisterService(&_FlowTopReporter_serviceDesc, srv)
}

func _FlowTopReporter_CurrentFlowTop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowTopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowTopReporterServer).CurrentFlowTop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FlowTopReporter/CurrentFlowTop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowTopReporterServer).CurrentFlowTop(ctx, req.(*FlowTopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FlowTopReporter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.FlowTopReporter",
	HandlerType: (*FlowTopReporterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CurrentFlowTop",
			Handler:    _FlowTopReporter_CurrentFlowTop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flow.proto",
}

func (m *FlowStream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowStream) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowStream) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		i = encodeVarintFlow(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x70
	}
	if m.NumBytes != 0 {
		i = encodeVarintFlow(dAtA, i, uint64(m.NumBytes))
		i--
		dAtA[i] = 0x68
	}
	if m.NumMessages != 0 {
		i = encodeVarintFlow(dAtA, i, uint64(m.NumMessages))
		i--
		dAtA[i] = 0x60
	}
	if m.EndedAt != nil {
		{
			size, err := m.EndedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.StartedAt != nil {
		{
			size, err := m.StartedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Labels != nil {
		{
			size, err := m.Labels.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ServiceId != nil {
		{
			size, err := m.ServiceId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.AgentId != nil {
		{
			size, err := m.AgentId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.HubId != nil {
		{
			size, err := m.HubId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.FlowId != nil {
		{
			size, err := m.FlowId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FlowRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HubStats != nil {
		{
			size, err := m.HubStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Stream != nil {
		{
			size, err := m.Stream.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Agent != nil {
		{
			size, err := m.Agent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FlowRecord_AgentConnection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowRecord_AgentConnection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowRecord_AgentConnection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActiveStreams != 0 {
		i = encodeVarintFlow(dAtA, i, uint64(m.ActiveStreams))
		i--
		dAtA[i] = 0x68
	}
	if m.NumServices != 0 {
		i = encodeVarintFlow(dAtA, i, uint64(m.NumServices))
		i--
		dAtA[i] = 0x60
	}
	if m.EndedAt != nil {
		{
			size, err := m.EndedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.StartedAt != nil {
		{
			size, err := m.StartedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.AgentId != nil {
		{
			size, err := m.AgentId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.HubId != nil {
		{
			size, err := m.HubId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FlowRecord_HubStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowRecord_HubStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowRecord_HubStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Services != 0 {
		i = encodeVarintFlow(dAtA, i, uint64(m.Services))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalAgents != 0 {
		i = encodeVarintFlow(dAtA, i, uint64(m.TotalAgents))
		i--
		dAtA[i] = 0x18
	}
	if m.ActiveAgents != 0 {
		i = encodeVarintFlow(dAtA, i, uint64(m.ActiveAgents))
		i--
		dAtA[i] = 0x10
	}
	if m.HubId != nil {
		{
			size, err := m.HubId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FlowTopSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowTopSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowTopSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FlowTopRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowTopRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowTopRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxRecords != 0 {
		i = encodeVarintFlow(dAtA, i, uint64(m.MaxRecords))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFlow(dAtA []byte, offset int, v uint64) int {
	offset -= sovFlow(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FlowStream) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FlowId != nil {
		l = m.FlowId.Size()
		n += 1 + l + sovFlow(uint64(l))
	}
	if m.HubId != nil {
		l = m.HubId.Size()
		n += 1 + l + sovFlow(uint64(l))
	}
	if m.AgentId != nil {
		l = m.AgentId.Size()
		n += 1 + l + sovFlow(uint64(l))
	}
	if m.ServiceId != nil {
		l = m.ServiceId.Size()
		n += 1 + l + sovFlow(uint64(l))
	}
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovFlow(uint64(l))
	}
	if m.Labels != nil {
		l = m.Labels.Size()
		n += 1 + l + sovFlow(uint64(l))
	}
	if m.StartedAt != nil {
		l = m.StartedAt.Size()
		n += 1 + l + sovFlow(uint64(l))
	}
	if m.EndedAt != nil {
		l = m.EndedAt.Size()
		n += 1 + l + sovFlow(uint64(l))
	}
	if m.NumMessages != 0 {
		n += 1 + sovFlow(uint64(m.NumMessages))
	}
	if m.NumBytes != 0 {
		n += 1 + sovFlow(uint64(m.NumBytes))
	}
	if m.Duration != 0 {
		n += 1 + sovFlow(uint64(m.Duration))
	}
	return n
}

func (m *FlowRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Agent != nil {
		l = m.Agent.Size()
		n += 1 + l + sovFlow(uint64(l))
	}
	if m.Stream != nil {
		l = m.Stream.Size()
		n += 1 + l + sovFlow(uint64(l))
	}
	if m.HubStats != nil {
		l = m.HubStats.Size()
		n += 1 + l + sovFlow(uint64(l))
	}
	return n
}

func (m *FlowRecord_AgentConnection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HubId != nil {
		l = m.HubId.Size()
		n += 1 + l + sovFlow(uint64(l))
	}
	if m.AgentId != nil {
		l = m.AgentId.Size()
		n += 1 + l + sovFlow(uint64(l))
	}
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovFlow(uint64(l))
	}
	if m.StartedAt != nil {
		l = m.StartedAt.Size()
		n += 1 + l + sovFlow(uint64(l))
	}
	if m.EndedAt != nil {
		l = m.EndedAt.Size()
		n += 1 + l + sovFlow(uint64(l))
	}
	if m.NumServices != 0 {
		n += 1 + sovFlow(uint64(m.NumServices))
	}
	if m.ActiveStreams != 0 {
		n += 1 + sovFlow(uint64(m.ActiveStreams))
	}
	return n
}

func (m *FlowRecord_HubStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HubId != nil {
		l = m.HubId.Size()
		n += 1 + l + sovFlow(uint64(l))
	}
	if m.ActiveAgents != 0 {
		n += 1 + sovFlow(uint64(m.ActiveAgents))
	}
	if m.TotalAgents != 0 {
		n += 1 + sovFlow(uint64(m.TotalAgents))
	}
	if m.Services != 0 {
		n += 1 + sovFlow(uint64(m.Services))
	}
	return n
}

func (m *FlowTopSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovFlow(uint64(l))
		}
	}
	return n
}

func (m *FlowTopRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxRecords != 0 {
		n += 1 + sovFlow(uint64(m.MaxRecords))
	}
	return n
}

func sovFlow(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFlow(x uint64) (n int) {
	return sovFlow(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FlowStream) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlowStream{`,
		`FlowId:` + strings.Replace(fmt.Sprintf("%v", this.FlowId), "ULID", "ULID", 1) + `,`,
		`HubId:` + strings.Replace(fmt.Sprintf("%v", this.HubId), "ULID", "ULID", 1) + `,`,
		`AgentId:` + strings.Replace(fmt.Sprintf("%v", this.AgentId), "ULID", "ULID", 1) + `,`,
		`ServiceId:` + strings.Replace(fmt.Sprintf("%v", this.ServiceId), "ULID", "ULID", 1) + `,`,
		`Account:` + strings.Replace(fmt.Sprintf("%v", this.Account), "Account", "Account", 1) + `,`,
		`Labels:` + strings.Replace(fmt.Sprintf("%v", this.Labels), "LabelSet", "LabelSet", 1) + `,`,
		`StartedAt:` + strings.Replace(fmt.Sprintf("%v", this.StartedAt), "Timestamp", "Timestamp", 1) + `,`,
		`EndedAt:` + strings.Replace(fmt.Sprintf("%v", this.EndedAt), "Timestamp", "Timestamp", 1) + `,`,
		`NumMessages:` + fmt.Sprintf("%v", this.NumMessages) + `,`,
		`NumBytes:` + fmt.Sprintf("%v", this.NumBytes) + `,`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FlowRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlowRecord{`,
		`Agent:` + strings.Replace(fmt.Sprintf("%v", this.Agent), "FlowRecord_AgentConnection", "FlowRecord_AgentConnection", 1) + `,`,
		`Stream:` + strings.Replace(this.Stream.String(), "FlowStream", "FlowStream", 1) + `,`,
		`HubStats:` + strings.Replace(fmt.Sprintf("%v", this.HubStats), "FlowRecord_HubStats", "FlowRecord_HubStats", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FlowRecord_AgentConnection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlowRecord_AgentConnection{`,
		`HubId:` + strings.Replace(fmt.Sprintf("%v", this.HubId), "ULID", "ULID", 1) + `,`,
		`AgentId:` + strings.Replace(fmt.Sprintf("%v", this.AgentId), "ULID", "ULID", 1) + `,`,
		`Account:` + strings.Replace(fmt.Sprintf("%v", this.Account), "Account", "Account", 1) + `,`,
		`StartedAt:` + strings.Replace(fmt.Sprintf("%v", this.StartedAt), "Timestamp", "Timestamp", 1) + `,`,
		`EndedAt:` + strings.Replace(fmt.Sprintf("%v", this.EndedAt), "Timestamp", "Timestamp", 1) + `,`,
		`NumServices:` + fmt.Sprintf("%v", this.NumServices) + `,`,
		`ActiveStreams:` + fmt.Sprintf("%v", this.ActiveStreams) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FlowRecord_HubStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlowRecord_HubStats{`,
		`HubId:` + strings.Replace(fmt.Sprintf("%v", this.HubId), "ULID", "ULID", 1) + `,`,
		`ActiveAgents:` + fmt.Sprintf("%v", this.ActiveAgents) + `,`,
		`TotalAgents:` + fmt.Sprintf("%v", this.TotalAgents) + `,`,
		`Services:` + fmt.Sprintf("%v", this.Services) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FlowTopSnapshot) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRecords := "[]*FlowStream{"
	for _, f := range this.Records {
		repeatedStringForRecords += strings.Replace(f.String(), "FlowStream", "FlowStream", 1) + ","
	}
	repeatedStringForRecords += "}"
	s := strings.Join([]string{`&FlowTopSnapshot{`,
		`Records:` + repeatedStringForRecords + `,`,
		`}`,
	}, "")
	return s
}
func (this *FlowTopRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlowTopRequest{`,
		`MaxRecords:` + fmt.Sprintf("%v", this.MaxRecords) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFlow(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FlowStream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowStream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowStream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlowId == nil {
				m.FlowId = &ULID{}
			}
			if err := m.FlowId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HubId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HubId == nil {
				m.HubId = &ULID{}
			}
			if err := m.HubId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AgentId == nil {
				m.AgentId = &ULID{}
			}
			if err := m.AgentId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServiceId == nil {
				m.ServiceId = &ULID{}
			}
			if err := m.ServiceId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = &LabelSet{}
			}
			if err := m.Labels.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartedAt == nil {
				m.StartedAt = &Timestamp{}
			}
			if err := m.StartedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndedAt == nil {
				m.EndedAt = &Timestamp{}
			}
			if err := m.EndedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumMessages", wireType)
			}
			m.NumMessages = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumMessages |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumBytes", wireType)
			}
			m.NumBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Agent == nil {
				m.Agent = &FlowRecord_AgentConnection{}
			}
			if err := m.Agent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stream", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stream == nil {
				m.Stream = &FlowStream{}
			}
			if err := m.Stream.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HubStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HubStats == nil {
				m.HubStats = &FlowRecord_HubStats{}
			}
			if err := m.HubStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowRecord_AgentConnection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentConnection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentConnection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HubId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HubId == nil {
				m.HubId = &ULID{}
			}
			if err := m.HubId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AgentId == nil {
				m.AgentId = &ULID{}
			}
			if err := m.AgentId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartedAt == nil {
				m.StartedAt = &Timestamp{}
			}
			if err := m.StartedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndedAt == nil {
				m.EndedAt = &Timestamp{}
			}
			if err := m.EndedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumServices", wireType)
			}
			m.NumServices = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumServices |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveStreams", wireType)
			}
			m.ActiveStreams = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveStreams |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowRecord_HubStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HubStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HubStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HubId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HubId == nil {
				m.HubId = &ULID{}
			}
			if err := m.HubId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveAgents", wireType)
			}
			m.ActiveAgents = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveAgents |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAgents", wireType)
			}
			m.TotalAgents = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalAgents |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			m.Services = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Services |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowTopSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowTopSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowTopSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &FlowStream{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowTopRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowTopRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowTopRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRecords", wireType)
			}
			m.MaxRecords = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRecords |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFlow(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFlow
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFlow
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFlow
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFlow
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFlow        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFlow          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFlow = fmt.Errorf("proto: unexpected end of group")
)
