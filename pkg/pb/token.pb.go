// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: token.proto

package pb

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Capability int32

const (
	CONNECT Capability = 0
	SERVE   Capability = 1
	ACCESS  Capability = 2
	MGMT    Capability = 3
	CONFIG  Capability = 4
)

var Capability_name = map[int32]string{
	0: "CONNECT",
	1: "SERVE",
	2: "ACCESS",
	3: "MGMT",
	4: "CONFIG",
}

var Capability_value = map[string]int32{
	"CONNECT": 0,
	"SERVE":   1,
	"ACCESS":  2,
	"MGMT":    3,
	"CONFIG":  4,
}

func (Capability) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3aff0bcd502840ab, []int{0}
}

type TokenRole int32

const (
	AGENT  TokenRole = 0
	HUB    TokenRole = 1
	MANAGE TokenRole = 2
)

var TokenRole_name = map[int32]string{
	0: "AGENT",
	1: "HUB",
	2: "MANAGE",
}

var TokenRole_value = map[string]int32{
	"AGENT":  0,
	"HUB":    1,
	"MANAGE": 2,
}

func (TokenRole) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3aff0bcd502840ab, []int{1}
}

type Signature_SigType int32

const (
	BLAKE2HMAC Signature_SigType = 0
	ED25519    Signature_SigType = 1
	EXTERNAL   Signature_SigType = 2
)

var Signature_SigType_name = map[int32]string{
	0: "BLAKE2HMAC",
	1: "ED25519",
	2: "EXTERNAL",
}

var Signature_SigType_value = map[string]int32{
	"BLAKE2HMAC": 0,
	"ED25519":    1,
	"EXTERNAL":   2,
}

func (Signature_SigType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3aff0bcd502840ab, []int{1, 0}
}

type Headers struct {
	Headers []*KVPair `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty"`
}

func (m *Headers) Reset()      { *m = Headers{} }
func (*Headers) ProtoMessage() {}
func (*Headers) Descriptor() ([]byte, []int) {
	return fileDescriptor_3aff0bcd502840ab, []int{0}
}
func (m *Headers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Headers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Headers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Headers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Headers.Merge(m, src)
}
func (m *Headers) XXX_Size() int {
	return m.Size()
}
func (m *Headers) XXX_DiscardUnknown() {
	xxx_messageInfo_Headers.DiscardUnknown(m)
}

var xxx_messageInfo_Headers proto.InternalMessageInfo

func (m *Headers) GetHeaders() []*KVPair {
	if m != nil {
		return m.Headers
	}
	return nil
}

type Signature struct {
	Signature []byte            `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	SigType   Signature_SigType `protobuf:"varint,2,opt,name=sig_type,json=sigType,proto3,enum=pb.Signature_SigType" json:"sig_type,omitempty"`
	KeyId     string            `protobuf:"bytes,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Headers   *Headers          `protobuf:"bytes,4,opt,name=headers,proto3" json:"headers,omitempty"`
}

func (m *Signature) Reset()      { *m = Signature{} }
func (*Signature) ProtoMessage() {}
func (*Signature) Descriptor() ([]byte, []int) {
	return fileDescriptor_3aff0bcd502840ab, []int{1}
}
func (m *Signature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Signature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Signature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Signature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature.Merge(m, src)
}
func (m *Signature) XXX_Size() int {
	return m.Size()
}
func (m *Signature) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature.DiscardUnknown(m)
}

var xxx_messageInfo_Signature proto.InternalMessageInfo

func (m *Signature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Signature) GetSigType() Signature_SigType {
	if m != nil {
		return m.SigType
	}
	return BLAKE2HMAC
}

func (m *Signature) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

func (m *Signature) GetHeaders() *Headers {
	if m != nil {
		return m.Headers
	}
	return nil
}

type TokenCapability struct {
	Capability Capability `protobuf:"varint,1,opt,name=capability,proto3,enum=pb.Capability" json:"capability,omitempty"`
	Value      string     `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *TokenCapability) Reset()      { *m = TokenCapability{} }
func (*TokenCapability) ProtoMessage() {}
func (*TokenCapability) Descriptor() ([]byte, []int) {
	return fileDescriptor_3aff0bcd502840ab, []int{2}
}
func (m *TokenCapability) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenCapability) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenCapability.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenCapability) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenCapability.Merge(m, src)
}
func (m *TokenCapability) XXX_Size() int {
	return m.Size()
}
func (m *TokenCapability) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenCapability.DiscardUnknown(m)
}

var xxx_messageInfo_TokenCapability proto.InternalMessageInfo

func (m *TokenCapability) GetCapability() Capability {
	if m != nil {
		return m.Capability
	}
	return CONNECT
}

func (m *TokenCapability) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Token struct {
	Body       []byte       `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	Metadata   *Headers     `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Signatures []*Signature `protobuf:"bytes,3,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (m *Token) Reset()      { *m = Token{} }
func (*Token) ProtoMessage() {}
func (*Token) Descriptor() ([]byte, []int) {
	return fileDescriptor_3aff0bcd502840ab, []int{3}
}
func (m *Token) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Token) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Token.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Token) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Token.Merge(m, src)
}
func (m *Token) XXX_Size() int {
	return m.Size()
}
func (m *Token) XXX_DiscardUnknown() {
	xxx_messageInfo_Token.DiscardUnknown(m)
}

var xxx_messageInfo_Token proto.InternalMessageInfo

func (m *Token) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Token) GetMetadata() *Headers {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Token) GetSignatures() []*Signature {
	if m != nil {
		return m.Signatures
	}
	return nil
}

type Token_Body struct {
	Role         TokenRole         `protobuf:"varint,1,opt,name=role,proto3,enum=pb.TokenRole" json:"role,omitempty"`
	Id           *ULID             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Account      *Account          `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
	ValidUntil   *Timestamp        `protobuf:"bytes,4,opt,name=valid_until,json=validUntil,proto3" json:"valid_until,omitempty"`
	Capabilities []TokenCapability `protobuf:"bytes,5,rep,name=capabilities,proto3" json:"capabilities"`
	Additional   *Headers          `protobuf:"bytes,10,opt,name=additional,proto3" json:"additional,omitempty"`
}

func (m *Token_Body) Reset()      { *m = Token_Body{} }
func (*Token_Body) ProtoMessage() {}
func (*Token_Body) Descriptor() ([]byte, []int) {
	return fileDescriptor_3aff0bcd502840ab, []int{3, 0}
}
func (m *Token_Body) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Token_Body) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Token_Body.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Token_Body) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Token_Body.Merge(m, src)
}
func (m *Token_Body) XXX_Size() int {
	return m.Size()
}
func (m *Token_Body) XXX_DiscardUnknown() {
	xxx_messageInfo_Token_Body.DiscardUnknown(m)
}

var xxx_messageInfo_Token_Body proto.InternalMessageInfo

func (m *Token_Body) GetRole() TokenRole {
	if m != nil {
		return m.Role
	}
	return AGENT
}

func (m *Token_Body) GetId() *ULID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Token_Body) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *Token_Body) GetValidUntil() *Timestamp {
	if m != nil {
		return m.ValidUntil
	}
	return nil
}

func (m *Token_Body) GetCapabilities() []TokenCapability {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

func (m *Token_Body) GetAdditional() *Headers {
	if m != nil {
		return m.Additional
	}
	return nil
}

func init() {
	proto.RegisterEnum("pb.Capability", Capability_name, Capability_value)
	proto.RegisterEnum("pb.TokenRole", TokenRole_name, TokenRole_value)
	proto.RegisterEnum("pb.Signature_SigType", Signature_SigType_name, Signature_SigType_value)
	proto.RegisterType((*Headers)(nil), "pb.Headers")
	proto.RegisterType((*Signature)(nil), "pb.Signature")
	proto.RegisterType((*TokenCapability)(nil), "pb.TokenCapability")
	proto.RegisterType((*Token)(nil), "pb.Token")
	proto.RegisterType((*Token_Body)(nil), "pb.Token.Body")
}

func init() { proto.RegisterFile("token.proto", fileDescriptor_3aff0bcd502840ab) }

var fileDescriptor_3aff0bcd502840ab = []byte{
	// 635 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x53, 0xcf, 0x4e, 0xdb, 0x4e,
	0x10, 0xf6, 0x3a, 0x09, 0x4e, 0xc6, 0x10, 0xac, 0xfd, 0xfd, 0x90, 0x2c, 0x54, 0xb9, 0x69, 0xd4,
	0xaa, 0x11, 0xa8, 0xa1, 0x4d, 0xe1, 0xd0, 0x43, 0x0f, 0x8e, 0x31, 0x01, 0x41, 0x42, 0xb5, 0x09,
	0xb4, 0x37, 0xb4, 0xc1, 0xdb, 0x74, 0x15, 0x13, 0x5b, 0xb1, 0x83, 0x94, 0x5b, 0x4f, 0x3d, 0xf7,
	0x31, 0xfa, 0x28, 0xdc, 0xca, 0x91, 0x53, 0x55, 0xcc, 0xa5, 0x47, 0x1e, 0xa0, 0x87, 0xca, 0x6b,
	0xc7, 0x09, 0xed, 0x6d, 0xfe, 0x7c, 0x33, 0xf3, 0xcd, 0x37, 0xbb, 0xa0, 0x86, 0xde, 0x90, 0x8d,
	0xea, 0xfe, 0xd8, 0x0b, 0x3d, 0x2c, 0xfb, 0xfd, 0xf5, 0x55, 0x87, 0x7d, 0x0c, 0xb6, 0x06, 0xde,
	0xc0, 0x4b, 0x82, 0xeb, 0xab, 0x21, 0xbf, 0x60, 0x41, 0x48, 0x2f, 0xfc, 0x34, 0x50, 0x1c, 0x5e,
	0xa6, 0x16, 0x4c, 0x5c, 0xee, 0xa4, 0xf6, 0x0a, 0x3d, 0x3f, 0xf7, 0x26, 0xa3, 0x30, 0x71, 0xab,
	0x5b, 0xa0, 0xec, 0x33, 0xea, 0xb0, 0x71, 0x80, 0x9f, 0x82, 0xf2, 0x29, 0x31, 0x75, 0x54, 0xc9,
	0xd5, 0xd4, 0x06, 0xd4, 0xfd, 0x7e, 0xfd, 0xf0, 0xf4, 0x1d, 0xe5, 0x63, 0x32, 0x4b, 0x55, 0xbf,
	0x23, 0x28, 0x75, 0xf9, 0x60, 0x44, 0xc3, 0xc9, 0x98, 0xe1, 0x47, 0x50, 0x0a, 0x66, 0x8e, 0x8e,
	0x2a, 0xa8, 0xb6, 0x4c, 0xe6, 0x01, 0xfc, 0x12, 0x8a, 0x01, 0x1f, 0x9c, 0x85, 0x53, 0x9f, 0xe9,
	0x72, 0x05, 0xd5, 0xca, 0x8d, 0xb5, 0xb8, 0x65, 0x56, 0x1e, 0x5b, 0xbd, 0xa9, 0xcf, 0x88, 0x12,
	0x24, 0x06, 0x5e, 0x83, 0xa5, 0x21, 0x9b, 0x9e, 0x71, 0x47, 0xcf, 0x55, 0x50, 0xad, 0x44, 0x0a,
	0x43, 0x36, 0x3d, 0x70, 0xf0, 0xb3, 0x39, 0xb5, 0x7c, 0x05, 0xd5, 0xd4, 0x86, 0x1a, 0xf7, 0x49,
	0x89, 0xcf, 0xb9, 0x6d, 0x83, 0x92, 0x76, 0xc4, 0x65, 0x80, 0xe6, 0x91, 0x79, 0x68, 0x37, 0xf6,
	0xdb, 0xa6, 0xa5, 0x49, 0x58, 0x05, 0xc5, 0xde, 0x6d, 0xec, 0xec, 0xbc, 0x7a, 0xa3, 0x21, 0xbc,
	0x0c, 0x45, 0xfb, 0x43, 0xcf, 0x26, 0x1d, 0xf3, 0x48, 0x93, 0xab, 0xef, 0x61, 0xb5, 0x17, 0x8b,
	0x6b, 0x51, 0x9f, 0xf6, 0xb9, 0xcb, 0xc3, 0x29, 0xae, 0x03, 0x9c, 0x67, 0x9e, 0xd8, 0xab, 0xdc,
	0x28, 0xc7, 0x23, 0xe7, 0x18, 0xb2, 0x80, 0xc0, 0xff, 0x43, 0xe1, 0x92, 0xba, 0x93, 0x64, 0xcb,
	0x12, 0x49, 0x9c, 0xea, 0x6f, 0x19, 0x0a, 0xa2, 0x33, 0xc6, 0x90, 0xef, 0x7b, 0xce, 0x34, 0x55,
	0x48, 0xd8, 0xf8, 0x39, 0x14, 0x2f, 0x58, 0x48, 0x1d, 0x1a, 0x52, 0x51, 0xf6, 0xd7, 0x52, 0x59,
	0x12, 0xbf, 0x00, 0xc8, 0x24, 0x0d, 0xf4, 0x9c, 0x38, 0xcd, 0xca, 0x03, 0x1d, 0xc9, 0x02, 0x60,
	0xfd, 0x8b, 0x0c, 0xf9, 0x66, 0x3c, 0xe0, 0x09, 0xe4, 0xc7, 0x9e, 0xcb, 0x52, 0xfa, 0xa2, 0x42,
	0xb0, 0x21, 0x9e, 0xcb, 0x88, 0x48, 0x61, 0x1d, 0x64, 0xee, 0xa4, 0xd3, 0x8b, 0x31, 0xe0, 0xe4,
	0xe8, 0x60, 0x97, 0xc8, 0x5c, 0x28, 0x9e, 0x3e, 0x14, 0x71, 0x89, 0x94, 0x9c, 0x99, 0x84, 0xc8,
	0x2c, 0x87, 0xeb, 0xa0, 0x5e, 0x52, 0x97, 0x3b, 0x67, 0x93, 0x51, 0xc8, 0xdd, 0xf4, 0x38, 0xc9,
	0xa8, 0xd9, 0x6b, 0x24, 0x20, 0x10, 0x27, 0x31, 0x00, 0xbf, 0x85, 0xe5, 0x4c, 0x36, 0xce, 0x02,
	0xbd, 0x20, 0xb6, 0xf9, 0x2f, 0xe3, 0x36, 0xd7, 0xb7, 0x99, 0xbf, 0xfa, 0xf1, 0x58, 0x22, 0x0f,
	0xe0, 0x78, 0x13, 0x80, 0x3a, 0x0e, 0x0f, 0xb9, 0x37, 0xa2, 0xae, 0x0e, 0xff, 0xaa, 0xb6, 0x90,
	0xde, 0xd8, 0x03, 0x58, 0x38, 0xa9, 0x0a, 0x8a, 0x75, 0xdc, 0xe9, 0xd8, 0x56, 0x4f, 0x93, 0x70,
	0x09, 0x0a, 0x5d, 0x9b, 0x9c, 0xda, 0x1a, 0xc2, 0x00, 0x4b, 0xa6, 0x65, 0xd9, 0xdd, 0xae, 0x26,
	0xe3, 0x22, 0xe4, 0xdb, 0xad, 0x76, 0x4f, 0xcb, 0xc5, 0x51, 0xeb, 0xb8, 0xb3, 0x77, 0xd0, 0xd2,
	0xf2, 0x1b, 0x9b, 0x50, 0xca, 0x74, 0x8b, 0x2b, 0xcd, 0x96, 0xdd, 0x89, 0x9b, 0x28, 0x90, 0xdb,
	0x3f, 0x69, 0x26, 0x2d, 0xda, 0x66, 0xc7, 0x6c, 0xd9, 0x9a, 0xdc, 0xdc, 0xbe, 0xbe, 0x35, 0xa4,
	0x9b, 0x5b, 0x43, 0xba, 0xbf, 0x35, 0xd0, 0xe7, 0xc8, 0x40, 0xdf, 0x22, 0x03, 0x5d, 0x45, 0x06,
	0xba, 0x8e, 0x0c, 0xf4, 0x33, 0x32, 0xd0, 0xaf, 0xc8, 0x90, 0xee, 0x23, 0x03, 0x7d, 0xbd, 0x33,
	0xa4, 0xeb, 0x3b, 0x43, 0xba, 0xb9, 0x33, 0xa4, 0xfe, 0x92, 0xf8, 0x8c, 0xaf, 0xff, 0x04, 0x00,
	0x00, 0xff, 0xff, 0xab, 0xc7, 0xc3, 0x51, 0xe6, 0x03, 0x00, 0x00,
}

func (x Capability) String() string {
	s, ok := Capability_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TokenRole) String() string {
	s, ok := TokenRole_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Signature_SigType) String() string {
	s, ok := Signature_SigType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Headers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Headers)
	if !ok {
		that2, ok := that.(Headers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Headers) != len(that1.Headers) {
		return false
	}
	for i := range this.Headers {
		if !this.Headers[i].Equal(that1.Headers[i]) {
			return false
		}
	}
	return true
}
func (this *Signature) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Signature)
	if !ok {
		that2, ok := that.(Signature)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	if this.SigType != that1.SigType {
		return false
	}
	if this.KeyId != that1.KeyId {
		return false
	}
	if !this.Headers.Equal(that1.Headers) {
		return false
	}
	return true
}
func (this *TokenCapability) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TokenCapability)
	if !ok {
		that2, ok := that.(TokenCapability)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Capability != that1.Capability {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *Token) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Token)
	if !ok {
		that2, ok := that.(Token)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Body, that1.Body) {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if len(this.Signatures) != len(that1.Signatures) {
		return false
	}
	for i := range this.Signatures {
		if !this.Signatures[i].Equal(that1.Signatures[i]) {
			return false
		}
	}
	return true
}
func (this *Token_Body) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Token_Body)
	if !ok {
		that2, ok := that.(Token_Body)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Role != that1.Role {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if !this.Account.Equal(that1.Account) {
		return false
	}
	if !this.ValidUntil.Equal(that1.ValidUntil) {
		return false
	}
	if len(this.Capabilities) != len(that1.Capabilities) {
		return false
	}
	for i := range this.Capabilities {
		if !this.Capabilities[i].Equal(&that1.Capabilities[i]) {
			return false
		}
	}
	if !this.Additional.Equal(that1.Additional) {
		return false
	}
	return true
}
func (this *Headers) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.Headers{")
	if this.Headers != nil {
		s = append(s, "Headers: "+fmt.Sprintf("%#v", this.Headers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Signature) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.Signature{")
	s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	s = append(s, "SigType: "+fmt.Sprintf("%#v", this.SigType)+",\n")
	s = append(s, "KeyId: "+fmt.Sprintf("%#v", this.KeyId)+",\n")
	if this.Headers != nil {
		s = append(s, "Headers: "+fmt.Sprintf("%#v", this.Headers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TokenCapability) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.TokenCapability{")
	s = append(s, "Capability: "+fmt.Sprintf("%#v", this.Capability)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Token) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.Token{")
	s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.Signatures != nil {
		s = append(s, "Signatures: "+fmt.Sprintf("%#v", this.Signatures)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Token_Body) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.Token_Body{")
	s = append(s, "Role: "+fmt.Sprintf("%#v", this.Role)+",\n")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	if this.Account != nil {
		s = append(s, "Account: "+fmt.Sprintf("%#v", this.Account)+",\n")
	}
	if this.ValidUntil != nil {
		s = append(s, "ValidUntil: "+fmt.Sprintf("%#v", this.ValidUntil)+",\n")
	}
	if this.Capabilities != nil {
		vs := make([]TokenCapability, len(this.Capabilities))
		for i := range vs {
			vs[i] = this.Capabilities[i]
		}
		s = append(s, "Capabilities: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	if this.Additional != nil {
		s = append(s, "Additional: "+fmt.Sprintf("%#v", this.Additional)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringToken(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Headers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Headers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Headers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Headers) > 0 {
		for iNdEx := len(m.Headers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Headers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintToken(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Signature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Signature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Signature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Headers != nil {
		{
			size, err := m.Headers.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintToken(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.KeyId) > 0 {
		i -= len(m.KeyId)
		copy(dAtA[i:], m.KeyId)
		i = encodeVarintToken(dAtA, i, uint64(len(m.KeyId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SigType != 0 {
		i = encodeVarintToken(dAtA, i, uint64(m.SigType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintToken(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TokenCapability) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenCapability) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenCapability) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintToken(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.Capability != 0 {
		i = encodeVarintToken(dAtA, i, uint64(m.Capability))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Token) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Token) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Token) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signatures) > 0 {
		for iNdEx := len(m.Signatures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Signatures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintToken(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintToken(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintToken(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Token_Body) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Token_Body) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Token_Body) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Additional != nil {
		{
			size, err := m.Additional.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintToken(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.Capabilities) > 0 {
		for iNdEx := len(m.Capabilities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Capabilities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintToken(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.ValidUntil != nil {
		{
			size, err := m.ValidUntil.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintToken(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintToken(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintToken(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Role != 0 {
		i = encodeVarintToken(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintToken(dAtA []byte, offset int, v uint64) int {
	offset -= sovToken(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Headers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Headers) > 0 {
		for _, e := range m.Headers {
			l = e.Size()
			n += 1 + l + sovToken(uint64(l))
		}
	}
	return n
}

func (m *Signature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	if m.SigType != 0 {
		n += 1 + sovToken(uint64(m.SigType))
	}
	l = len(m.KeyId)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	if m.Headers != nil {
		l = m.Headers.Size()
		n += 1 + l + sovToken(uint64(l))
	}
	return n
}

func (m *TokenCapability) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Capability != 0 {
		n += 1 + sovToken(uint64(m.Capability))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	return n
}

func (m *Token) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovToken(uint64(l))
	}
	if len(m.Signatures) > 0 {
		for _, e := range m.Signatures {
			l = e.Size()
			n += 1 + l + sovToken(uint64(l))
		}
	}
	return n
}

func (m *Token_Body) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Role != 0 {
		n += 1 + sovToken(uint64(m.Role))
	}
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovToken(uint64(l))
	}
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovToken(uint64(l))
	}
	if m.ValidUntil != nil {
		l = m.ValidUntil.Size()
		n += 1 + l + sovToken(uint64(l))
	}
	if len(m.Capabilities) > 0 {
		for _, e := range m.Capabilities {
			l = e.Size()
			n += 1 + l + sovToken(uint64(l))
		}
	}
	if m.Additional != nil {
		l = m.Additional.Size()
		n += 1 + l + sovToken(uint64(l))
	}
	return n
}

func sovToken(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozToken(x uint64) (n int) {
	return sovToken(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Headers) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHeaders := "[]*KVPair{"
	for _, f := range this.Headers {
		repeatedStringForHeaders += strings.Replace(fmt.Sprintf("%v", f), "KVPair", "KVPair", 1) + ","
	}
	repeatedStringForHeaders += "}"
	s := strings.Join([]string{`&Headers{`,
		`Headers:` + repeatedStringForHeaders + `,`,
		`}`,
	}, "")
	return s
}
func (this *Signature) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Signature{`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`SigType:` + fmt.Sprintf("%v", this.SigType) + `,`,
		`KeyId:` + fmt.Sprintf("%v", this.KeyId) + `,`,
		`Headers:` + strings.Replace(this.Headers.String(), "Headers", "Headers", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TokenCapability) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TokenCapability{`,
		`Capability:` + fmt.Sprintf("%v", this.Capability) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Token) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSignatures := "[]*Signature{"
	for _, f := range this.Signatures {
		repeatedStringForSignatures += strings.Replace(f.String(), "Signature", "Signature", 1) + ","
	}
	repeatedStringForSignatures += "}"
	s := strings.Join([]string{`&Token{`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`Metadata:` + strings.Replace(this.Metadata.String(), "Headers", "Headers", 1) + `,`,
		`Signatures:` + repeatedStringForSignatures + `,`,
		`}`,
	}, "")
	return s
}
func (this *Token_Body) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCapabilities := "[]TokenCapability{"
	for _, f := range this.Capabilities {
		repeatedStringForCapabilities += strings.Replace(strings.Replace(f.String(), "TokenCapability", "TokenCapability", 1), `&`, ``, 1) + ","
	}
	repeatedStringForCapabilities += "}"
	s := strings.Join([]string{`&Token_Body{`,
		`Role:` + fmt.Sprintf("%v", this.Role) + `,`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "ULID", "ULID", 1) + `,`,
		`Account:` + strings.Replace(fmt.Sprintf("%v", this.Account), "Account", "Account", 1) + `,`,
		`ValidUntil:` + strings.Replace(fmt.Sprintf("%v", this.ValidUntil), "Timestamp", "Timestamp", 1) + `,`,
		`Capabilities:` + repeatedStringForCapabilities + `,`,
		`Additional:` + strings.Replace(this.Additional.String(), "Headers", "Headers", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringToken(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Headers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Headers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Headers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Headers = append(m.Headers, &KVPair{})
			if err := m.Headers[len(m.Headers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Signature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Signature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Signature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigType", wireType)
			}
			m.SigType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SigType |= Signature_SigType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Headers == nil {
				m.Headers = &Headers{}
			}
			if err := m.Headers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenCapability) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenCapability: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenCapability: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capability", wireType)
			}
			m.Capability = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Capability |= Capability(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Token) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Token: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Token: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &Headers{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, &Signature{})
			if err := m.Signatures[len(m.Signatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Token_Body) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Body: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Body: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= TokenRole(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &ULID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidUntil", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValidUntil == nil {
				m.ValidUntil = &Timestamp{}
			}
			if err := m.ValidUntil.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capabilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Capabilities = append(m.Capabilities, TokenCapability{})
			if err := m.Capabilities[len(m.Capabilities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Additional", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Additional == nil {
				m.Additional = &Headers{}
			}
			if err := m.Additional.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipToken(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowToken
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthToken
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupToken
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthToken
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthToken        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowToken          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupToken = fmt.Errorf("proto: unexpected end of group")
)
